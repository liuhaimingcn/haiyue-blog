{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":0},{"_id":"themes/BlueLake/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/BlueLake/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","path":"iconfont/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","path":"iconfont/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","path":"iconfont/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","path":"iconfont/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/search.json.js","path":"js/search.json.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/toctotop.js","path":"js/toctotop.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/img/bg.jpg","path":"img/bg.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"72a35a064228a8454786062441b834c5a4a94c60","modified":1523079388000},{"_id":"source/robots.txt","hash":"8943ad27646c1df758f43a10c5aab4c33d4b6425","modified":1522927943000},{"_id":"themes/BlueLake/LICENSE","hash":"3e191ca3f51efc111863c4941051291a696ef43e","modified":1523078770000},{"_id":"themes/BlueLake/README.en.md","hash":"b9f84036214ec79a8c319c5383696e0076305dfe","modified":1523078770000},{"_id":"themes/BlueLake/README.md","hash":"152969bd5a7e94a595d058f085c517b65d3b61d2","modified":1523078770000},{"_id":"themes/BlueLake/_config.yml","hash":"badfbf8f9e7de26935daa30cf21c18d242c79446","modified":1523079279000},{"_id":"themes/BlueLake/package.json","hash":"e06eea20c64b2821631a49e8902e645bad2c5102","modified":1523078770000},{"_id":"source/_posts/.Ulysses-Group.plist","hash":"013bdb83f8f327f3851a9af684bee5fb50e9229b","modified":1522927984000},{"_id":"source/about/index.md","hash":"17ab7204e505c2b6f54ec21306e4a199bcd73a16","modified":1523079465000},{"_id":"source/categories/index.md","hash":"3162c335c5dfafee793c463d0cb4e85de806fcd4","modified":1522927984000},{"_id":"source/tags/index.md","hash":"b5cea9db4620416c871ea1b14b7eddf23b330779","modified":1522927984000},{"_id":"themes/BlueLake/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1523078770000},{"_id":"themes/BlueLake/.git/config","hash":"cb5d8538f60766fe2a079a1894a586d81b258abf","modified":1523078770000},{"_id":"themes/BlueLake/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1523078766000},{"_id":"themes/BlueLake/.git/index","hash":"0961f001c17a90321c4ac6d6c8ab6826fdc63604","modified":1523078770000},{"_id":"source/apple-touch-icon.png","hash":"40f6e4b127e6dd12b909c4a030fa6caa35e39c0d","modified":1522927943000},{"_id":"themes/BlueLake/.git/packed-refs","hash":"842a64dcd40e108353d1da6314a0c447e35b921d","modified":1523078770000},{"_id":"themes/BlueLake/languages/de-DE.yml","hash":"3e78b20edc66b153cb6b708734ad9aa5381266bc","modified":1523078770000},{"_id":"themes/BlueLake/languages/en.yml","hash":"88f4e4cffce5598f949192d7e76c863a0d409981","modified":1523078770000},{"_id":"themes/BlueLake/languages/es-ES.yml","hash":"83ee131065111147d20ec13c4634a27ee4fd541d","modified":1523078770000},{"_id":"themes/BlueLake/languages/fr-FR.yml","hash":"d9f90ef2c6b4d8c95d142d021a5f47dda8462715","modified":1523078770000},{"_id":"themes/BlueLake/languages/ko.yml","hash":"20c7df4087ee65d75e96f68c71fdb050eb63677f","modified":1523078770000},{"_id":"themes/BlueLake/languages/zh-TW.yml","hash":"61f419488d4a8f62c2b90ee766b6e68ba2e88bd7","modified":1523078770000},{"_id":"themes/BlueLake/languages/tr.yml","hash":"1c623122f1ff7878595de6783bd83afc3a746373","modified":1523078770000},{"_id":"themes/BlueLake/languages/zh-CN.yml","hash":"0755af57d92a07ecff0e327f78eb25b0623a5852","modified":1523078770000},{"_id":"themes/BlueLake/layout/base.jade","hash":"2e65a06a499fbb67c72f8345d71222e40e9ef523","modified":1523078770000},{"_id":"themes/BlueLake/layout/archive.jade","hash":"0497469c869f0ac28f150295dbddf6920e6582c1","modified":1523078770000},{"_id":"themes/BlueLake/layout/category.jade","hash":"384e2e2588ecab3f518f03f11f2b052d3827fad8","modified":1523078770000},{"_id":"themes/BlueLake/layout/index.jade","hash":"ba1ea647af5c134b1a950638ea864663b29d4e22","modified":1523078770000},{"_id":"themes/BlueLake/layout/page.jade","hash":"7d2a48f6a902605fd6cfc237e3c2f9c02d76492e","modified":1523078770000},{"_id":"themes/BlueLake/layout/post.jade","hash":"3025e7e259d69551a35f17db3c3981aaa77fe7bc","modified":1523078770000},{"_id":"themes/BlueLake/layout/tag.jade","hash":"835da21846c730f0e3e344dc7e2e59154030b4f7","modified":1523078770000},{"_id":"themes/BlueLake/source/apple-touch-icon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1523078770000},{"_id":"themes/BlueLake/source/favicon.ico","hash":"94e5d25d942bff5479470322454c951f2ddebac6","modified":1523078770000},{"_id":"source/_posts/Android/android-base.md","hash":"8b30a990b81238a20aeb13fef4191ac4af29cfa2","modified":1522927943000},{"_id":"source/_posts/Architecture/cache.md","hash":"90c7d14ad7244bec471489d63c0c3ca1a809ecbf","modified":1522927943000},{"_id":"source/_posts/Architecture/elk.md","hash":"7ff2d45b0667fe54b02e7f1be61c9b8adb1c90be","modified":1522927943000},{"_id":"source/_posts/Architecture/jenkins.md","hash":"524d73d6fc12277c5df668be770bfdc90ebb6233","modified":1522927943000},{"_id":"source/_posts/Docker/docker-hello-world.md","hash":"e8e2ca6ed592daa732348a06eb1e83ed05fd1677","modified":1522927943000},{"_id":"source/_posts/Java/UnsupportedOperationException.md","hash":"3e80844dbd281c378e3238c2c09298a4db115537","modified":1522927943000},{"_id":"source/_posts/JavaScript/ES6-in-depth.md","hash":"1057105a9e82b1c749390e1fb68ee32a7ba2476e","modified":1522927943000},{"_id":"source/_posts/Java/jvm.md","hash":"6bc37ec085b251d49096de0bcaf31bc3a28e69da","modified":1522927943000},{"_id":"source/_posts/Java/volatile.md","hash":"8e8045d9fd512e59766ae65cb4adb5a81f75a520","modified":1522927943000},{"_id":"source/_posts/JavaScript/es6-class.md","hash":"ec2e07a87230df7d6de410a44bb7d81fba5cfc84","modified":1522927943000},{"_id":"source/_posts/JavaScript/es6-module.md","hash":"f8debfcd8540a20c4b4c062e3bd19d7acb2a5f1f","modified":1522927943000},{"_id":"source/_posts/JavaScript/es6-generator.md","hash":"da30d474a0db5239e781bb96ab4c881a778a4ef4","modified":1522927943000},{"_id":"source/_posts/JavaScript/es6-string.md","hash":"9fecb80d666191e2b9a9950b0e1380a744107c81","modified":1522927943000},{"_id":"source/_posts/JavaScript/es6-style.md","hash":"a2bd92c60c502463ce8fac4b3c025f9147035e58","modified":1522927943000},{"_id":"source/_posts/JavaScript/nexttick_immediate.md","hash":"8b44325450995a6ad52bc280fe43f1a348ca9749","modified":1522927943000},{"_id":"source/_posts/JavaScript/promises.md","hash":"5694185c32cd9b75597bb3b118d8a9282fddfe7a","modified":1522927943000},{"_id":"source/_posts/JavaScript/尾调用优化.md","hash":"bd5e6ffa77838d8901da8d82cf763cc5f60a1a53","modified":1522927943000},{"_id":"source/_posts/Linux/iterm2.md","hash":"06bde6edaff96e9e1af2d821e1ec86974285903d","modified":1522927943000},{"_id":"source/_posts/Linux/dns-records.md","hash":"a069677559db435331c58618dd7af685c56bf7ec","modified":1522927943000},{"_id":"source/_posts/Linux/linux-kernel.md","hash":"e5c3960089b98b4b3f84c5506b3680c79ce52cc9","modified":1522927943000},{"_id":"source/_posts/MySQL/mysql-batch-delete.md","hash":"791444e401ad5f3e6d4e02efcae2944bb4a5a092","modified":1522927943000},{"_id":"source/_posts/MySQL/sql.md","hash":"a7a53dfb9e8b5a30791b0a00aecc93f6fda2c06e","modified":1522927943000},{"_id":"source/_posts/Nginx/nginx-install.md","hash":"af3a84a016342952aa864ec2d916400540b5fe2c","modified":1522927943000},{"_id":"source/_posts/Node.js/escape.md","hash":"83c722ccf726ae4c919a31226748627ab8e8f623","modified":1522927943000},{"_id":"source/_posts/Photo/.Ulysses-Group.plist","hash":"c6d0335feda5720befd65c949db8e32d5698f18d","modified":1522927943000},{"_id":"source/_posts/Photo/beijingdaxue.md","hash":"fce24af7ba0f6e9f169a5b7a19e2b61a0eaa85d1","modified":1522927943000},{"_id":"source/_posts/Photo/lansegangwan.md","hash":"699d424a9665f818efd6c81467afdae13b905a2f","modified":1522927943000},{"_id":"source/_posts/Photo/sanyacunjie.md","hash":"aed23bc0df54bcb3adc2f7f3a0db54bf4cc3e1b8","modified":1522927943000},{"_id":"source/_posts/Photo/xiangshan.md","hash":"96570c2ca7ab30d064f35f1ed1f224d4c8457764","modified":1522927943000},{"_id":"source/_posts/SpringBoot/spring-boot-jedis.md","hash":"76dc28fdfe2b0bf9b803e6552941a08fdf4b6e3c","modified":1522927943000},{"_id":"source/_posts/RPC/motan-hello.md","hash":"9573f42b8feb3029582852b9871a74a82d5e8cba","modified":1522927943000},{"_id":"source/_posts/SpringBoot/spring-boot-no-beans.md","hash":"d7e962b648e6e936a2a0497681941dcb4449c751","modified":1522927943000},{"_id":"source/_posts/SpringBoot/spring-boot-single-main.md","hash":"1b71c3d6ea1297d2d902a7b8a3966e739e5f209e","modified":1522927943000},{"_id":"source/_posts/SpringBoot/yml-evn.md","hash":"712547ea79cc81a8c19e8b5d905508109895700a","modified":1522927943000},{"_id":"source/favicon.ico","hash":"889cd6b36855718aa12c00309a4fe8f3e1c169d1","modified":1522927943000},{"_id":"themes/BlueLake/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1523078766000},{"_id":"themes/BlueLake/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1523078766000},{"_id":"themes/BlueLake/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1523078766000},{"_id":"themes/BlueLake/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1523078766000},{"_id":"themes/BlueLake/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1523078766000},{"_id":"themes/BlueLake/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1523078766000},{"_id":"themes/BlueLake/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1523078766000},{"_id":"themes/BlueLake/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1523078766000},{"_id":"themes/BlueLake/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1523078766000},{"_id":"themes/BlueLake/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1523078766000},{"_id":"themes/BlueLake/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1523078766000},{"_id":"themes/BlueLake/.git/logs/HEAD","hash":"29293b690784bdc1779e454f1aa48975e75aa603","modified":1523078770000},{"_id":"themes/BlueLake/layout/_partial/after_footer.jade","hash":"26ae121ecc5bbe351927dd273d58871f69454500","modified":1523078770000},{"_id":"themes/BlueLake/layout/_partial/comment_count.jade","hash":"52e4cacd58d5e0061924189ad75e0c3bf622aa7f","modified":1523078770000},{"_id":"themes/BlueLake/layout/_partial/footer.jade","hash":"dbc5c401f4d8aa80fe9e73423aadb8b8969f0b62","modified":1523078770000},{"_id":"themes/BlueLake/layout/_partial/comments.jade","hash":"af9a4a65eba65c5140921326f2b5cae9db5d7d28","modified":1523078770000},{"_id":"themes/BlueLake/layout/_partial/comments_js.jade","hash":"25e28dc48c392a5d10db1ed0f8a5899598d643d5","modified":1523078770000},{"_id":"themes/BlueLake/layout/_partial/helpers.jade","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1523078770000},{"_id":"themes/BlueLake/layout/_partial/mathjax.jade","hash":"b54b56faff9e47ab3ca3cdd55056c73e60776f3c","modified":1523078770000},{"_id":"themes/BlueLake/layout/_partial/mathjax2.jade","hash":"d6ac5dc4e9c7a1b866f1f92d88988cfb35aded4c","modified":1523078770000},{"_id":"themes/BlueLake/layout/_partial/paginator.jade","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1523078770000},{"_id":"themes/BlueLake/layout/_partial/post_nav.jade","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1523078770000},{"_id":"themes/BlueLake/layout/_partial/search.jade","hash":"1c988c7e1f716036e428ee16b8005a7b1bfb33c7","modified":1523078770000},{"_id":"themes/BlueLake/layout/_partial/share.jade","hash":"28d79fbb9d8ecc5692d3063e439f16224188abac","modified":1523078770000},{"_id":"themes/BlueLake/layout/_partial/tag.jade","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1523078770000},{"_id":"themes/BlueLake/layout/_partial/totop.jade","hash":"3e4141538285aef2bd019832ba62bafd094c6097","modified":1523078770000},{"_id":"themes/BlueLake/layout/_widget/archive.jade","hash":"082ae16dad18ada28913772675861d7230134bea","modified":1523078770000},{"_id":"themes/BlueLake/layout/_widget/category.jade","hash":"ba43bd011d64cd86fa420677c9000d328f4f6114","modified":1523078770000},{"_id":"themes/BlueLake/layout/_widget/links.jade","hash":"ff46afdedc1ab3c075ffed686b98f23aed066124","modified":1523078770000},{"_id":"themes/BlueLake/layout/_widget/recent_comments.jade","hash":"f8ae55d5514fe493651ec04fbe73cb5fc482f7cd","modified":1523078770000},{"_id":"themes/BlueLake/layout/_widget/recent_posts.jade","hash":"a0309137277323f2fd61a3c6691e1bc51026f711","modified":1523078770000},{"_id":"themes/BlueLake/layout/_widget/tag.jade","hash":"3df9a00a21d3bc151026b2d403a99c28fe1ccd13","modified":1523078770000},{"_id":"themes/BlueLake/layout/_widget/weibo.jade","hash":"53e99461ae7f8efb2a1e78ad3090dd93d18bcd5c","modified":1523078770000},{"_id":"themes/BlueLake/source/css/highlight.styl","hash":"be9ad73454b7029311caafd8e1faa469a5d4f58d","modified":1523078770000},{"_id":"themes/BlueLake/source/css/style.styl","hash":"5852cc541b74868e6464c7224b65683ea5aaa8d8","modified":1523078770000},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","hash":"e664dd848ca65fe3aca4acfc234ff9c18ffd4c33","modified":1523078770000},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","hash":"2b6a0b21bf63bdf746130117baf432fcb44ad210","modified":1523078770000},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","hash":"5770696cc0d19d9c9479912a5cf54c9dd4ab24c4","modified":1523078770000},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","hash":"df2bd849134cbd02beb385e5061a30b923c99058","modified":1523078770000},{"_id":"themes/BlueLake/source/js/search.json.js","hash":"a0e8dfee9b9845aabd64360d497df7c0767b7235","modified":1523078770000},{"_id":"themes/BlueLake/source/js/toctotop.js","hash":"ad6386bc746ff375715ca9da17af4716ea86e06a","modified":1523078770000},{"_id":"themes/BlueLake/source/js/totop.js","hash":"5b1131830209c2daaf6fe34c5e39ab7c1059bfa4","modified":1523078770000},{"_id":"themes/BlueLake/source/img/bg.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1523078770000},{"_id":"themes/BlueLake/.git/refs/heads/master","hash":"c292cfc66fa6a171bcb9e25157b4ee8f09da6755","modified":1523078770000},{"_id":"themes/BlueLake/.git/objects/pack/pack-3960201a6b68eb8fa7ccb74fce2c388277a0b0ef.idx","hash":"72b864447dcf0acf0212056587453d6cbed114af","modified":1523078770000},{"_id":"themes/BlueLake/.git/logs/refs/heads/master","hash":"29293b690784bdc1779e454f1aa48975e75aa603","modified":1523078770000},{"_id":"themes/BlueLake/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1523078770000},{"_id":"themes/BlueLake/.git/logs/refs/remotes/origin/HEAD","hash":"29293b690784bdc1779e454f1aa48975e75aa603","modified":1523078770000},{"_id":"themes/BlueLake/.git/objects/pack/pack-3960201a6b68eb8fa7ccb74fce2c388277a0b0ef.pack","hash":"dba040ba1c38e38283e16f9ff438852ac811a55a","modified":1523078770000},{"_id":"public/about/index.html","hash":"daf84d023dc86c8c7affc318421f498b85a72e44","modified":1523079477380},{"_id":"public/categories/index.html","hash":"c770284c7908e7b0597d017735a1ce5cf9bc70cd","modified":1523079477380},{"_id":"public/tags/index.html","hash":"de6f3b177fc6f862091501e326cd377fab9629b0","modified":1523079477381},{"_id":"public/2017/03/27/Linux/linux-kernel/index.html","hash":"3988c28278049e003bf7ab8d613848ef426752a3","modified":1523079477381},{"_id":"public/2016/10/26/SpringBoot/spring-boot-no-beans/index.html","hash":"b1acd100d9dde3b9c5f24baab93804401daf9d5d","modified":1523079477381},{"_id":"public/2016/10/25/SpringBoot/yml-evn/index.html","hash":"270e98c2a0ee46445035b001978c88f1fb5ad56f","modified":1523079477381},{"_id":"public/2016/10/24/SpringBoot/spring-boot-single-main/index.html","hash":"0f7c049e4d55e305679619683e81f59824b49e80","modified":1523079477381},{"_id":"public/2016/07/05/Node.js/escape/index.html","hash":"9abe299559460af95d2791f9a15a9c2f0943d0b1","modified":1523079477381},{"_id":"public/2016/05/26/MySQL/mysql-batch-delete/index.html","hash":"be16f6704d87efd425365927fe8bb24bc543e235","modified":1523079477381},{"_id":"public/2016/05/26/MySQL/sql/index.html","hash":"b02bde438bac5974e4cafb582abc25c080f48f92","modified":1523079477381},{"_id":"public/2016/05/11/Architecture/cache/index.html","hash":"a0084598a7db08ee73c8caef5f2ec8408ea9c457","modified":1523079477381},{"_id":"public/2016/02/16/Photo/sanyacunjie/index.html","hash":"6931f4a5f631bf96e74c813a62ecbe0164f2c411","modified":1523079477381},{"_id":"public/2016/01/06/Photo/beijingdaxue/index.html","hash":"52b43d0b8adcb7aaa862af0f9822546dc569590a","modified":1523079477382},{"_id":"public/2016/01/06/Photo/lansegangwan/index.html","hash":"6c890a556843d47da13771bf01478d6094b6bd67","modified":1523079477382},{"_id":"public/2015/10/28/Photo/xiangshan/index.html","hash":"caccb39130acd85778ca0667445d7d343768127c","modified":1523079477382},{"_id":"public/2015/07/23/Linux/iterm2/index.html","hash":"e8dd8ab615b617e962dc178c655423f8c293cbae","modified":1523079477382},{"_id":"public/archives/index.html","hash":"ed4ab79e4ae35aefb9881715fbb6fdf14d9968a8","modified":1523079477382},{"_id":"public/archives/page/2/index.html","hash":"ee69e84c02a9df108bc3a9e18a56166c8fdc46fa","modified":1523079477382},{"_id":"public/archives/page/3/index.html","hash":"9b948aab125041c328c81f5949e0c97ce8d2ac27","modified":1523079477382},{"_id":"public/archives/page/4/index.html","hash":"8fb673f076991d5cdb680cd8811de387044631e7","modified":1523079477382},{"_id":"public/archives/2015/index.html","hash":"632be71e89a41942b04dd6ef79ca504aa7f6a005","modified":1523079477382},{"_id":"public/archives/2015/07/index.html","hash":"48d1ed5ef05ac5ffa2babc60cc2706ea2a4f8eab","modified":1523079477382},{"_id":"public/archives/2015/10/index.html","hash":"3fc80d54a681764705c6cab4cbdef350d4a84d2e","modified":1523079477382},{"_id":"public/archives/2016/index.html","hash":"aa0f39c827c2d297a5d625ce0a418d7e248bab5d","modified":1523079477382},{"_id":"public/archives/2016/page/2/index.html","hash":"32269c0143c0bcea0c6e6134f095c8aa717d14f5","modified":1523079477382},{"_id":"public/archives/2016/page/3/index.html","hash":"7bf40f0cafff56bec16364600b2ef05566eb5e13","modified":1523079477382},{"_id":"public/archives/2016/01/index.html","hash":"15475767df926360e093d699320ed997d9e64713","modified":1523079477382},{"_id":"public/archives/2016/02/index.html","hash":"a5c9364795d99aabeb808647aae5ed13d6906ead","modified":1523079477383},{"_id":"public/archives/2016/05/index.html","hash":"5cceedcbda4b73df93a341268af4b6929e6ae5ee","modified":1523079477383},{"_id":"public/archives/2016/07/index.html","hash":"9ca286690eb42b6ab7cd1b9e962546510428a5ac","modified":1523079477383},{"_id":"public/archives/2016/09/index.html","hash":"a2673899a042cad0863b0cd0b99c8142d372ca10","modified":1523079477383},{"_id":"public/archives/2016/10/index.html","hash":"ce4ffe815e84acb5af530aa3c69f6d3dd61b8963","modified":1523079477383},{"_id":"public/archives/2016/11/index.html","hash":"929846a663a40a860c99a178a00eeaca0bad80c3","modified":1523079477383},{"_id":"public/archives/2016/12/index.html","hash":"b1b12d303b2f4bd1f2800a539ddb260668bae1ad","modified":1523079477383},{"_id":"public/archives/2017/index.html","hash":"7ac7fd4713739faebc6b3eb22bb12311b8d31c0a","modified":1523079477383},{"_id":"public/archives/2017/03/index.html","hash":"f8053ee4646b9b2844ddbee52fbe999bd52094c4","modified":1523079477383},{"_id":"public/archives/2017/04/index.html","hash":"605d04d9cf776f17741529a1334b91d8f127076a","modified":1523079477383},{"_id":"public/categories/Android/index.html","hash":"c458004c43ca7ff066a31ae9e2abaeca0a413a7e","modified":1523079477383},{"_id":"public/categories/Architecture/index.html","hash":"3c8b9fb4242a58569d1ea816030e9ff86ce48d44","modified":1523079477383},{"_id":"public/categories/Docker/index.html","hash":"009323aae9604f35327cb6e3ae025918bd40a79d","modified":1523079477383},{"_id":"public/categories/JavaScript/index.html","hash":"dcd18ed3da5b081b41d924953cb1ba6b99b5df75","modified":1523079477383},{"_id":"public/categories/Java/index.html","hash":"899bb1f0432adf7f00b0f53118d099586d33c7f6","modified":1523079477383},{"_id":"public/categories/Linux/index.html","hash":"04e695d89699a5c19f8136f1c16249f5485c8021","modified":1523079477383},{"_id":"public/categories/MySQL/index.html","hash":"fbc86a618b91b6f1e3e82c871893d2d6e28e3651","modified":1523079477383},{"_id":"public/categories/Nginx/index.html","hash":"ce72ddfa06b0a2a26fa086fd697d71dae92b72fa","modified":1523079477383},{"_id":"public/categories/Node-js/index.html","hash":"bb521d2ff9109676aad866e553a6013f8c1652a7","modified":1523079477384},{"_id":"public/categories/Photo/index.html","hash":"b53dfa3d59f6962266ddd18e22d01b4a32d57c4a","modified":1523079477384},{"_id":"public/categories/Spring-Boot/index.html","hash":"14a7c14ac05181094b382e12173af0ab649cb179","modified":1523079477384},{"_id":"public/categories/RPC/index.html","hash":"e2e66a404691eea5a2d79b0b811e9dbd472f5183","modified":1523079477384},{"_id":"public/page/4/index.html","hash":"2464c6fdee1795f24f1d66ae6bdd33b166bf6092","modified":1523079477384},{"_id":"public/tags/note/index.html","hash":"0221f2d5065636f8a0d939b8362f13a4e73da341","modified":1523079477384},{"_id":"public/tags/note/page/2/index.html","hash":"95218b322ab907595fd4280ed35d7cf33fff398a","modified":1523079477384},{"_id":"public/tags/original/index.html","hash":"87d65d1fa43db210a0dfec8c14fa4666560d1975","modified":1523079477384},{"_id":"public/tags/original/page/2/index.html","hash":"6791f078e440fffc812da5a309f523be2149a728","modified":1523079477384},{"_id":"public/tags/jvm/index.html","hash":"9b8d3d090deb28dccb7b4694af1f033f3f22c955","modified":1523079477384},{"_id":"public/tags/es6/index.html","hash":"d71ada944828a7fe6dd20d8f8a91c647446fd055","modified":1523079477384},{"_id":"public/tags/软件/index.html","hash":"ab380dc78003584f60a1d181a33eb99742664f19","modified":1523079477384},{"_id":"public/tags/motan/index.html","hash":"87711883d46d7c483c2243d92e02c614c1ff6a09","modified":1523079477384},{"_id":"public/2017/04/05/Linux/dns-records/index.html","hash":"bb493c373b82c1005caeddb39df31ff652c495fc","modified":1523079477384},{"_id":"public/2017/04/05/Java/volatile/index.html","hash":"7aab7bc49774558cfef1b749afd17fdcd26c1d3c","modified":1523079477384},{"_id":"public/2016/12/21/Architecture/jenkins/index.html","hash":"71287f693ae62fbeba2f937df65d26a767768b2c","modified":1523079477384},{"_id":"public/2016/12/16/JavaScript/尾调用优化/index.html","hash":"262dfad5dd93b956784134ac9bc8e6b06f06343d","modified":1523079477384},{"_id":"public/2016/12/06/Java/jvm/index.html","hash":"471c6a03bdd381c5bc006ca5b4c00cf4549d4c3a","modified":1523079477385},{"_id":"public/2016/11/10/RPC/motan-hello/index.html","hash":"dbaeaa7fa1c69c6a06a2d01c69dd99c17f6d0dd4","modified":1523079477385},{"_id":"public/2016/11/04/Architecture/elk/index.html","hash":"7205a6ec5cdf35c51a8712b9c316a132df626da4","modified":1523079477385},{"_id":"public/2016/10/27/SpringBoot/spring-boot-jedis/index.html","hash":"7d3b69c71937dbfcbf11b6fc76af2ba09147f083","modified":1523079477385},{"_id":"public/2016/10/09/Docker/docker-hello-world/index.html","hash":"b423f084e8001f69d11f4e74ee199d98f66f81ff","modified":1523079477385},{"_id":"public/2016/09/06/Nginx/nginx-install/index.html","hash":"7f748214cb1f4478911eef74050565fd244a6093","modified":1523079477385},{"_id":"public/2016/05/28/Android/android-base/index.html","hash":"55f1d756ef0ea9b431e1ddf5ceccb3286803b469","modified":1523079477385},{"_id":"public/2016/05/13/Java/UnsupportedOperationException/index.html","hash":"29bf76f4a138347f1951cfd8acc952427d644594","modified":1523079477385},{"_id":"public/2016/02/23/JavaScript/promises/index.html","hash":"eb31483870f3b70039a917c1637ef2557fc628ed","modified":1523079477385},{"_id":"public/2016/02/18/JavaScript/ES6-in-depth/index.html","hash":"5ba2eb5cabc32a7de90ec0999f17c1c1db3ef9a4","modified":1523079477385},{"_id":"public/2016/02/02/JavaScript/es6-style/index.html","hash":"5434777f16b3580a8ba1d9a38c7b8fbe527f1cee","modified":1523079477386},{"_id":"public/2016/02/02/JavaScript/es6-class/index.html","hash":"e8260588d39a71ef19f9ac79733f452af4d98612","modified":1523079477386},{"_id":"public/2016/02/02/JavaScript/es6-module/index.html","hash":"ee3c12224ad1eb13f11846003719565cd5acc2ca","modified":1523079477386},{"_id":"public/2015/10/28/JavaScript/es6-generator/index.html","hash":"c21711e36d867cdb6ad812a1fefeb255b3443cf0","modified":1523079477386},{"_id":"public/2015/10/26/JavaScript/es6-string/index.html","hash":"c2a4f353eb23b2b2b9dedf704cb60bc23c27eacb","modified":1523079477386},{"_id":"public/2015/07/22/JavaScript/nexttick_immediate/index.html","hash":"8647c9f441e14d807206817f35b8d73c70ab3b71","modified":1523079477386},{"_id":"public/index.html","hash":"15e97200c0fddb8db404aeed016361bc8e40e89f","modified":1523079477386},{"_id":"public/page/2/index.html","hash":"8deaf22f63c42cf240caa32a00d48c375b6b4f86","modified":1523079477386},{"_id":"public/page/3/index.html","hash":"bc14e90a6b4ae9b9ee5bc12f60a9405bc917a6b8","modified":1523079477386},{"_id":"public/robots.txt","hash":"8943ad27646c1df758f43a10c5aab4c33d4b6425","modified":1523079477391},{"_id":"public/apple-touch-icon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1523079477391},{"_id":"public/iconfont/iconfont.eot","hash":"e664dd848ca65fe3aca4acfc234ff9c18ffd4c33","modified":1523079477391},{"_id":"public/iconfont/iconfont.svg","hash":"2b6a0b21bf63bdf746130117baf432fcb44ad210","modified":1523079477391},{"_id":"public/iconfont/iconfont.ttf","hash":"5770696cc0d19d9c9479912a5cf54c9dd4ab24c4","modified":1523079477391},{"_id":"public/iconfont/iconfont.woff","hash":"df2bd849134cbd02beb385e5061a30b923c99058","modified":1523079477391},{"_id":"public/img/bg.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1523079477685},{"_id":"public/css/highlight.css","hash":"fb0403feb34cc8bb8b1f28f238540d36588b86df","modified":1523079477690},{"_id":"public/js/toctotop.js","hash":"ad6386bc746ff375715ca9da17af4716ea86e06a","modified":1523079477690},{"_id":"public/js/search.json.js","hash":"a0e8dfee9b9845aabd64360d497df7c0767b7235","modified":1523079477690},{"_id":"public/js/totop.js","hash":"5b1131830209c2daaf6fe34c5e39ab7c1059bfa4","modified":1523079477690},{"_id":"public/css/style.css","hash":"0b87f0674cad37ed4006f989cca7e1cd9f9568a3","modified":1523079477690},{"_id":"public/favicon.ico","hash":"889cd6b36855718aa12c00309a4fe8f3e1c169d1","modified":1523079477700}],"Category":[{"name":"Android","_id":"cjfoy71250005acien4g14lzk"},{"name":"Architecture","_id":"cjfoy712a000aaciek1pvdeh0"},{"name":"Docker","_id":"cjfoy712p000saciervtjw9c9"},{"name":"JavaScript","_id":"cjfoy712s0010acieblzaxwz9"},{"name":"Java","_id":"cjfoy712v0017acieody7quql"},{"name":"Linux","_id":"cjfoy713o002naciew4mkxw2d"},{"name":"MySQL","_id":"cjfoy713w0033acietug9vw3e"},{"name":"Nginx","_id":"cjfoy713y003bacieledrjr57"},{"name":"Node.js","_id":"cjfoy713z003haciebq8vuex6"},{"name":"Photo","_id":"cjfoy713z003lacie2kyzg1pz"},{"name":"Spring Boot","_id":"cjfoy7142003vaciee1lrnfxm"},{"name":"RPC","_id":"cjfoy7143003yacie94j3llyl"}],"Data":[],"Page":[{"title":"关于我","date":"2015-10-27T16:00:00.000Z","_content":"\n","source":"about/index.md","raw":"title: 关于我\ndate: 2015-10-28\n\n---\n\n","updated":"2018-04-07T05:37:45.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjfoy70fu0000acieatursha6","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"目录","layout":"categories","_content":"","source":"categories/index.md","raw":"title: \"目录\"\nlayout: \"categories\"\n---\n","date":"2018-04-07T05:36:14.000Z","updated":"2018-04-05T11:33:04.000Z","path":"categories/index.html","comments":1,"_id":"cjfoy70fw0001aciehfms9n6r","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","layout":"tags","_content":"","source":"tags/index.md","raw":"title: \"标签\"\nlayout: \"tags\"\n---\n","date":"2018-04-07T05:36:23.000Z","updated":"2018-04-05T11:33:04.000Z","path":"tags/index.html","comments":1,"_id":"cjfoy711j0002aciesycmmq7i","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Android 基础","date":"2016-05-27T16:00:00.000Z","_content":"\n### Android 开发的基本环境  \n* JDK (Java Development Kit)  \n* IDE (Android Studio)  \n* Android SDK (Android Software Development Kit)  \n* ADT (Android Development Tools)  \n\n<!-- more -->\n\n### ADT 和 Android SDK的区别\n* ADT(Android Development Tools)： 目前Android开发所用的开发工具是Eclipse，在Eclipse编译IDE环境中，安装ADT，为Android开发提供开发工具的升级或者变更，简单理解为在Eclipse下开发工具的升级下载工具。ADT只是一个Eclipse的插件，里面可以设置sdk路径。     \n* SDK(Software Development Kit)： 一般是一些被软件工程师用于为特定的软件包、软件框架、硬件平台、操作系统等建立应用软件的开发工具的集合。在Android中，他为开发者提供了库文件以及其他开发所用到的工具。简单理解为开发工具包集合，是整体开发中所用到的工具包，如果你不用Eclipse作为你的开发工具，你就不需要下载ADT，只下载SDK即可开发。  \n\n### JDK 和 JRE的区别\n* JRE(Java Runtime Environment): 顾名思义是java运行时环境，包含了java虚拟机，java基础类库。是使用java语言编写的程序运行所需要的软件环境，是提供给想运行java程序的用户使用的。  \n* JDK(Java Development Kit): 顾名思义是java开发工具包，是程序员使用java语言编写java程序所需的开发工具包，是提供给程序员使用的。\n* JDK包含了JRE，同时还包含了编译java源码的编译器javac，还包含了很多java程序调试和分析的工具：jconsole，jvisualvm等工具软件，还包含了java程序编写所需的文档和demo例子程序。如果你需要运行java程序，只需安装JRE就可以了。如果你需要编写java程序，需要安装JDK。\n\n### Android项目目录结构\n* src\t放java代码的目录\n * gen目录下的文件是编译器生成\n* assets 资源目录，例如音频、图片、xml（不一定要打入apk包中）\n * bin存放编译后的.class .dex  .apk文件的目录，编译器生成\n * libs放第三方jar包\n * res资源目录 （都要打入apk包中）\n * drawable（根据名字存放不同分辨率的图片，Android系统为了适配移动设备会根据设备的DPI去对应的目录选择图片）\n  * Drawable-hdpi 存放高分辨率图片；\n  * Drawable-ldpi 存放低分辨率图片；\n  * Drawable-mdpi 存放中分辨率图片；\n  * Drawable-xhdpi 存放中高分辨率图片；\n  * Drawable-xhdpi 存放特高分辨率图片。\n\n * layout 布局文件，Android系统为了使控制层和View层做分离，对一些静态的界面尽量写成xml文件的形式放在Layout文件夹下。\n * menu 存放菜单文件\n * values 存放文字信息配置\n  * dimens.xml文件存放一些尺寸信息，为了适配屏幕用；\n  * string.xml文件存放文本信息；\n  * styles.xml 文件中定义了一些属性集，方便复用和修改。\n * AndroidManifest.xml 清单文件，这个文件列出了应用程序所提供的功能，需要什么权限，用到那些服务，当前应用的版本，最低支持android版本，应用的名称、图标和包名，有那些组件，每个组件的配置信息\n\n<br>","source":"_posts/Android/android-base.md","raw":"title: Android 基础\ndate: 2016-5-28  \ntags:\n    - note  \ncategories:\n    - Android\n---\n\n### Android 开发的基本环境  \n* JDK (Java Development Kit)  \n* IDE (Android Studio)  \n* Android SDK (Android Software Development Kit)  \n* ADT (Android Development Tools)  \n\n<!-- more -->\n\n### ADT 和 Android SDK的区别\n* ADT(Android Development Tools)： 目前Android开发所用的开发工具是Eclipse，在Eclipse编译IDE环境中，安装ADT，为Android开发提供开发工具的升级或者变更，简单理解为在Eclipse下开发工具的升级下载工具。ADT只是一个Eclipse的插件，里面可以设置sdk路径。     \n* SDK(Software Development Kit)： 一般是一些被软件工程师用于为特定的软件包、软件框架、硬件平台、操作系统等建立应用软件的开发工具的集合。在Android中，他为开发者提供了库文件以及其他开发所用到的工具。简单理解为开发工具包集合，是整体开发中所用到的工具包，如果你不用Eclipse作为你的开发工具，你就不需要下载ADT，只下载SDK即可开发。  \n\n### JDK 和 JRE的区别\n* JRE(Java Runtime Environment): 顾名思义是java运行时环境，包含了java虚拟机，java基础类库。是使用java语言编写的程序运行所需要的软件环境，是提供给想运行java程序的用户使用的。  \n* JDK(Java Development Kit): 顾名思义是java开发工具包，是程序员使用java语言编写java程序所需的开发工具包，是提供给程序员使用的。\n* JDK包含了JRE，同时还包含了编译java源码的编译器javac，还包含了很多java程序调试和分析的工具：jconsole，jvisualvm等工具软件，还包含了java程序编写所需的文档和demo例子程序。如果你需要运行java程序，只需安装JRE就可以了。如果你需要编写java程序，需要安装JDK。\n\n### Android项目目录结构\n* src\t放java代码的目录\n * gen目录下的文件是编译器生成\n* assets 资源目录，例如音频、图片、xml（不一定要打入apk包中）\n * bin存放编译后的.class .dex  .apk文件的目录，编译器生成\n * libs放第三方jar包\n * res资源目录 （都要打入apk包中）\n * drawable（根据名字存放不同分辨率的图片，Android系统为了适配移动设备会根据设备的DPI去对应的目录选择图片）\n  * Drawable-hdpi 存放高分辨率图片；\n  * Drawable-ldpi 存放低分辨率图片；\n  * Drawable-mdpi 存放中分辨率图片；\n  * Drawable-xhdpi 存放中高分辨率图片；\n  * Drawable-xhdpi 存放特高分辨率图片。\n\n * layout 布局文件，Android系统为了使控制层和View层做分离，对一些静态的界面尽量写成xml文件的形式放在Layout文件夹下。\n * menu 存放菜单文件\n * values 存放文字信息配置\n  * dimens.xml文件存放一些尺寸信息，为了适配屏幕用；\n  * string.xml文件存放文本信息；\n  * styles.xml 文件中定义了一些属性集，方便复用和修改。\n * AndroidManifest.xml 清单文件，这个文件列出了应用程序所提供的功能，需要什么权限，用到那些服务，当前应用的版本，最低支持android版本，应用的名称、图标和包名，有那些组件，每个组件的配置信息\n\n<br>","slug":"Android/android-base","published":1,"updated":"2018-04-05T11:32:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfoy711y0003acienicocm9a","content":"<h3 id=\"Android-开发的基本环境\"><a href=\"#Android-开发的基本环境\" class=\"headerlink\" title=\"Android 开发的基本环境\"></a>Android 开发的基本环境</h3><ul>\n<li>JDK (Java Development Kit)  </li>\n<li>IDE (Android Studio)  </li>\n<li>Android SDK (Android Software Development Kit)  </li>\n<li>ADT (Android Development Tools)  </li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"ADT-和-Android-SDK的区别\"><a href=\"#ADT-和-Android-SDK的区别\" class=\"headerlink\" title=\"ADT 和 Android SDK的区别\"></a>ADT 和 Android SDK的区别</h3><ul>\n<li>ADT(Android Development Tools)： 目前Android开发所用的开发工具是Eclipse，在Eclipse编译IDE环境中，安装ADT，为Android开发提供开发工具的升级或者变更，简单理解为在Eclipse下开发工具的升级下载工具。ADT只是一个Eclipse的插件，里面可以设置sdk路径。     </li>\n<li>SDK(Software Development Kit)： 一般是一些被软件工程师用于为特定的软件包、软件框架、硬件平台、操作系统等建立应用软件的开发工具的集合。在Android中，他为开发者提供了库文件以及其他开发所用到的工具。简单理解为开发工具包集合，是整体开发中所用到的工具包，如果你不用Eclipse作为你的开发工具，你就不需要下载ADT，只下载SDK即可开发。  </li>\n</ul>\n<h3 id=\"JDK-和-JRE的区别\"><a href=\"#JDK-和-JRE的区别\" class=\"headerlink\" title=\"JDK 和 JRE的区别\"></a>JDK 和 JRE的区别</h3><ul>\n<li>JRE(Java Runtime Environment): 顾名思义是java运行时环境，包含了java虚拟机，java基础类库。是使用java语言编写的程序运行所需要的软件环境，是提供给想运行java程序的用户使用的。  </li>\n<li>JDK(Java Development Kit): 顾名思义是java开发工具包，是程序员使用java语言编写java程序所需的开发工具包，是提供给程序员使用的。</li>\n<li>JDK包含了JRE，同时还包含了编译java源码的编译器javac，还包含了很多java程序调试和分析的工具：jconsole，jvisualvm等工具软件，还包含了java程序编写所需的文档和demo例子程序。如果你需要运行java程序，只需安装JRE就可以了。如果你需要编写java程序，需要安装JDK。</li>\n</ul>\n<h3 id=\"Android项目目录结构\"><a href=\"#Android项目目录结构\" class=\"headerlink\" title=\"Android项目目录结构\"></a>Android项目目录结构</h3><ul>\n<li>src    放java代码的目录<ul>\n<li>gen目录下的文件是编译器生成</li>\n</ul>\n</li>\n<li><p>assets 资源目录，例如音频、图片、xml（不一定要打入apk包中）</p>\n<ul>\n<li>bin存放编译后的.class .dex  .apk文件的目录，编译器生成</li>\n<li>libs放第三方jar包</li>\n<li>res资源目录 （都要打入apk包中）</li>\n<li>drawable（根据名字存放不同分辨率的图片，Android系统为了适配移动设备会根据设备的DPI去对应的目录选择图片）</li>\n<li>Drawable-hdpi 存放高分辨率图片；</li>\n<li>Drawable-ldpi 存放低分辨率图片；</li>\n<li>Drawable-mdpi 存放中分辨率图片；</li>\n<li>Drawable-xhdpi 存放中高分辨率图片；</li>\n<li><p>Drawable-xhdpi 存放特高分辨率图片。</p>\n</li>\n<li><p>layout 布局文件，Android系统为了使控制层和View层做分离，对一些静态的界面尽量写成xml文件的形式放在Layout文件夹下。</p>\n</li>\n<li>menu 存放菜单文件</li>\n<li>values 存放文字信息配置</li>\n<li>dimens.xml文件存放一些尺寸信息，为了适配屏幕用；</li>\n<li>string.xml文件存放文本信息；</li>\n<li>styles.xml 文件中定义了一些属性集，方便复用和修改。</li>\n<li>AndroidManifest.xml 清单文件，这个文件列出了应用程序所提供的功能，需要什么权限，用到那些服务，当前应用的版本，最低支持android版本，应用的名称、图标和包名，有那些组件，每个组件的配置信息</li>\n</ul>\n</li>\n</ul>\n<p><br></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"Android-开发的基本环境\"><a href=\"#Android-开发的基本环境\" class=\"headerlink\" title=\"Android 开发的基本环境\"></a>Android 开发的基本环境</h3><ul>\n<li>JDK (Java Development Kit)  </li>\n<li>IDE (Android Studio)  </li>\n<li>Android SDK (Android Software Development Kit)  </li>\n<li>ADT (Android Development Tools)  </li>\n</ul>","more":"<h3 id=\"ADT-和-Android-SDK的区别\"><a href=\"#ADT-和-Android-SDK的区别\" class=\"headerlink\" title=\"ADT 和 Android SDK的区别\"></a>ADT 和 Android SDK的区别</h3><ul>\n<li>ADT(Android Development Tools)： 目前Android开发所用的开发工具是Eclipse，在Eclipse编译IDE环境中，安装ADT，为Android开发提供开发工具的升级或者变更，简单理解为在Eclipse下开发工具的升级下载工具。ADT只是一个Eclipse的插件，里面可以设置sdk路径。     </li>\n<li>SDK(Software Development Kit)： 一般是一些被软件工程师用于为特定的软件包、软件框架、硬件平台、操作系统等建立应用软件的开发工具的集合。在Android中，他为开发者提供了库文件以及其他开发所用到的工具。简单理解为开发工具包集合，是整体开发中所用到的工具包，如果你不用Eclipse作为你的开发工具，你就不需要下载ADT，只下载SDK即可开发。  </li>\n</ul>\n<h3 id=\"JDK-和-JRE的区别\"><a href=\"#JDK-和-JRE的区别\" class=\"headerlink\" title=\"JDK 和 JRE的区别\"></a>JDK 和 JRE的区别</h3><ul>\n<li>JRE(Java Runtime Environment): 顾名思义是java运行时环境，包含了java虚拟机，java基础类库。是使用java语言编写的程序运行所需要的软件环境，是提供给想运行java程序的用户使用的。  </li>\n<li>JDK(Java Development Kit): 顾名思义是java开发工具包，是程序员使用java语言编写java程序所需的开发工具包，是提供给程序员使用的。</li>\n<li>JDK包含了JRE，同时还包含了编译java源码的编译器javac，还包含了很多java程序调试和分析的工具：jconsole，jvisualvm等工具软件，还包含了java程序编写所需的文档和demo例子程序。如果你需要运行java程序，只需安装JRE就可以了。如果你需要编写java程序，需要安装JDK。</li>\n</ul>\n<h3 id=\"Android项目目录结构\"><a href=\"#Android项目目录结构\" class=\"headerlink\" title=\"Android项目目录结构\"></a>Android项目目录结构</h3><ul>\n<li>src    放java代码的目录<ul>\n<li>gen目录下的文件是编译器生成</li>\n</ul>\n</li>\n<li><p>assets 资源目录，例如音频、图片、xml（不一定要打入apk包中）</p>\n<ul>\n<li>bin存放编译后的.class .dex  .apk文件的目录，编译器生成</li>\n<li>libs放第三方jar包</li>\n<li>res资源目录 （都要打入apk包中）</li>\n<li>drawable（根据名字存放不同分辨率的图片，Android系统为了适配移动设备会根据设备的DPI去对应的目录选择图片）</li>\n<li>Drawable-hdpi 存放高分辨率图片；</li>\n<li>Drawable-ldpi 存放低分辨率图片；</li>\n<li>Drawable-mdpi 存放中分辨率图片；</li>\n<li>Drawable-xhdpi 存放中高分辨率图片；</li>\n<li><p>Drawable-xhdpi 存放特高分辨率图片。</p>\n</li>\n<li><p>layout 布局文件，Android系统为了使控制层和View层做分离，对一些静态的界面尽量写成xml文件的形式放在Layout文件夹下。</p>\n</li>\n<li>menu 存放菜单文件</li>\n<li>values 存放文字信息配置</li>\n<li>dimens.xml文件存放一些尺寸信息，为了适配屏幕用；</li>\n<li>string.xml文件存放文本信息；</li>\n<li>styles.xml 文件中定义了一些属性集，方便复用和修改。</li>\n<li>AndroidManifest.xml 清单文件，这个文件列出了应用程序所提供的功能，需要什么权限，用到那些服务，当前应用的版本，最低支持android版本，应用的名称、图标和包名，有那些组件，每个组件的配置信息</li>\n</ul>\n</li>\n</ul>\n<p><br></p>"},{"title":"缓存的相关概念和应用","date":"2016-05-10T16:00:00.000Z","_content":"\n一般都是用Redis或者Memcached来做数据的缓存，让程序的读取效率更高，以此缓解数据库的压力。\n\n## 缓存穿透\n原因：我们在项目中使用缓存通常都是先检查缓存中是否存在，如果存在直接返回缓存内容，如果不存在就直接查询数据库然后再缓存查询结果返回。这个时候如果我们查询的某一个数据在缓存中一直不存在，就会造成每一次请求都查询DB，这样缓存就失去了意义，在流量大时，可能DB就挂掉了。有人利用不存在的key频繁攻击我们的应用，这就是漏洞。\n\n<!-- more -->\n\n解决办法：可以在查询时将不存在的key预先设定一个值。比如，\"key\" , “&&”。在返回这个&&值的时候，我们的应用就可以认为这是不存在的key，再次请求这个key，如果取到的值不再是&&，则可以认为这时候key有值了，从而避免了透传到数据库，从而把大量的类似请求挡在了缓存之中。\n\n## 缓存并发\n原因：有时候如果网站并发访问高，一个缓存如果失效，可能出现多个进程同时查询DB，同时设置缓存的情况，如果并发确实很大，这也可能造成DB压力过大，还有缓存频繁更新的问题。\n\n解决办法：对缓存查询加锁，如果KEY不存在，就加锁，然后查DB入缓存，然后解锁；其他进程如果发现有锁就等待，然后等解锁后返回数据或者进入DB查询。\n\n## 缓存失效\n原因：高并发的时候，平时我们设定一个缓存的过期时间时，可能有一些会设置1分钟啊，5分钟这些，并发很高时可能会出在某一个时间同时生成了很多的缓存，并且过期时间都一样，这个时候就可能引发一当过期时间到后，这些缓存同时失效，请求全部转发到DB，DB可能会压力过重。\n\n解决办法：将缓存失效时间分散开，比如我们可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。\n\n### 总结\n缓存并发和缓存失效都是在高并发的时候对压力的优化，缓存穿透很有必要在做缓存的时候加上解决的措施。\n\n原文链接：[缓存穿透、缓存并发、缓存失效之思路变迁 - 小程故事多](http://www.jianshu.com/p/d96906140199)   \n\n\n<br>","source":"_posts/Architecture/cache.md","raw":"title: 缓存的相关概念和应用\ndate: 2016-5-11  \ntags:\n    - note  \ncategories:\n    - Architecture\n---\n\n一般都是用Redis或者Memcached来做数据的缓存，让程序的读取效率更高，以此缓解数据库的压力。\n\n## 缓存穿透\n原因：我们在项目中使用缓存通常都是先检查缓存中是否存在，如果存在直接返回缓存内容，如果不存在就直接查询数据库然后再缓存查询结果返回。这个时候如果我们查询的某一个数据在缓存中一直不存在，就会造成每一次请求都查询DB，这样缓存就失去了意义，在流量大时，可能DB就挂掉了。有人利用不存在的key频繁攻击我们的应用，这就是漏洞。\n\n<!-- more -->\n\n解决办法：可以在查询时将不存在的key预先设定一个值。比如，\"key\" , “&&”。在返回这个&&值的时候，我们的应用就可以认为这是不存在的key，再次请求这个key，如果取到的值不再是&&，则可以认为这时候key有值了，从而避免了透传到数据库，从而把大量的类似请求挡在了缓存之中。\n\n## 缓存并发\n原因：有时候如果网站并发访问高，一个缓存如果失效，可能出现多个进程同时查询DB，同时设置缓存的情况，如果并发确实很大，这也可能造成DB压力过大，还有缓存频繁更新的问题。\n\n解决办法：对缓存查询加锁，如果KEY不存在，就加锁，然后查DB入缓存，然后解锁；其他进程如果发现有锁就等待，然后等解锁后返回数据或者进入DB查询。\n\n## 缓存失效\n原因：高并发的时候，平时我们设定一个缓存的过期时间时，可能有一些会设置1分钟啊，5分钟这些，并发很高时可能会出在某一个时间同时生成了很多的缓存，并且过期时间都一样，这个时候就可能引发一当过期时间到后，这些缓存同时失效，请求全部转发到DB，DB可能会压力过重。\n\n解决办法：将缓存失效时间分散开，比如我们可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。\n\n### 总结\n缓存并发和缓存失效都是在高并发的时候对压力的优化，缓存穿透很有必要在做缓存的时候加上解决的措施。\n\n原文链接：[缓存穿透、缓存并发、缓存失效之思路变迁 - 小程故事多](http://www.jianshu.com/p/d96906140199)   \n\n\n<br>","slug":"Architecture/cache","published":1,"updated":"2018-04-05T11:32:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfoy71220004aciet6nmh7wd","content":"<p>一般都是用Redis或者Memcached来做数据的缓存，让程序的读取效率更高，以此缓解数据库的压力。</p>\n<h2 id=\"缓存穿透\"><a href=\"#缓存穿透\" class=\"headerlink\" title=\"缓存穿透\"></a>缓存穿透</h2><p>原因：我们在项目中使用缓存通常都是先检查缓存中是否存在，如果存在直接返回缓存内容，如果不存在就直接查询数据库然后再缓存查询结果返回。这个时候如果我们查询的某一个数据在缓存中一直不存在，就会造成每一次请求都查询DB，这样缓存就失去了意义，在流量大时，可能DB就挂掉了。有人利用不存在的key频繁攻击我们的应用，这就是漏洞。</p>\n<a id=\"more\"></a>\n<p>解决办法：可以在查询时将不存在的key预先设定一个值。比如，”key” , “&amp;&amp;”。在返回这个&amp;&amp;值的时候，我们的应用就可以认为这是不存在的key，再次请求这个key，如果取到的值不再是&amp;&amp;，则可以认为这时候key有值了，从而避免了透传到数据库，从而把大量的类似请求挡在了缓存之中。</p>\n<h2 id=\"缓存并发\"><a href=\"#缓存并发\" class=\"headerlink\" title=\"缓存并发\"></a>缓存并发</h2><p>原因：有时候如果网站并发访问高，一个缓存如果失效，可能出现多个进程同时查询DB，同时设置缓存的情况，如果并发确实很大，这也可能造成DB压力过大，还有缓存频繁更新的问题。</p>\n<p>解决办法：对缓存查询加锁，如果KEY不存在，就加锁，然后查DB入缓存，然后解锁；其他进程如果发现有锁就等待，然后等解锁后返回数据或者进入DB查询。</p>\n<h2 id=\"缓存失效\"><a href=\"#缓存失效\" class=\"headerlink\" title=\"缓存失效\"></a>缓存失效</h2><p>原因：高并发的时候，平时我们设定一个缓存的过期时间时，可能有一些会设置1分钟啊，5分钟这些，并发很高时可能会出在某一个时间同时生成了很多的缓存，并且过期时间都一样，这个时候就可能引发一当过期时间到后，这些缓存同时失效，请求全部转发到DB，DB可能会压力过重。</p>\n<p>解决办法：将缓存失效时间分散开，比如我们可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>缓存并发和缓存失效都是在高并发的时候对压力的优化，缓存穿透很有必要在做缓存的时候加上解决的措施。</p>\n<p>原文链接：<a href=\"http://www.jianshu.com/p/d96906140199\" target=\"_blank\" rel=\"noopener\">缓存穿透、缓存并发、缓存失效之思路变迁 - 小程故事多</a>   </p>\n<p><br></p>\n","site":{"data":{}},"excerpt":"<p>一般都是用Redis或者Memcached来做数据的缓存，让程序的读取效率更高，以此缓解数据库的压力。</p>\n<h2 id=\"缓存穿透\"><a href=\"#缓存穿透\" class=\"headerlink\" title=\"缓存穿透\"></a>缓存穿透</h2><p>原因：我们在项目中使用缓存通常都是先检查缓存中是否存在，如果存在直接返回缓存内容，如果不存在就直接查询数据库然后再缓存查询结果返回。这个时候如果我们查询的某一个数据在缓存中一直不存在，就会造成每一次请求都查询DB，这样缓存就失去了意义，在流量大时，可能DB就挂掉了。有人利用不存在的key频繁攻击我们的应用，这就是漏洞。</p>","more":"<p>解决办法：可以在查询时将不存在的key预先设定一个值。比如，”key” , “&amp;&amp;”。在返回这个&amp;&amp;值的时候，我们的应用就可以认为这是不存在的key，再次请求这个key，如果取到的值不再是&amp;&amp;，则可以认为这时候key有值了，从而避免了透传到数据库，从而把大量的类似请求挡在了缓存之中。</p>\n<h2 id=\"缓存并发\"><a href=\"#缓存并发\" class=\"headerlink\" title=\"缓存并发\"></a>缓存并发</h2><p>原因：有时候如果网站并发访问高，一个缓存如果失效，可能出现多个进程同时查询DB，同时设置缓存的情况，如果并发确实很大，这也可能造成DB压力过大，还有缓存频繁更新的问题。</p>\n<p>解决办法：对缓存查询加锁，如果KEY不存在，就加锁，然后查DB入缓存，然后解锁；其他进程如果发现有锁就等待，然后等解锁后返回数据或者进入DB查询。</p>\n<h2 id=\"缓存失效\"><a href=\"#缓存失效\" class=\"headerlink\" title=\"缓存失效\"></a>缓存失效</h2><p>原因：高并发的时候，平时我们设定一个缓存的过期时间时，可能有一些会设置1分钟啊，5分钟这些，并发很高时可能会出在某一个时间同时生成了很多的缓存，并且过期时间都一样，这个时候就可能引发一当过期时间到后，这些缓存同时失效，请求全部转发到DB，DB可能会压力过重。</p>\n<p>解决办法：将缓存失效时间分散开，比如我们可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>缓存并发和缓存失效都是在高并发的时候对压力的优化，缓存穿透很有必要在做缓存的时候加上解决的措施。</p>\n<p>原文链接：<a href=\"http://www.jianshu.com/p/d96906140199\" target=\"_blank\" rel=\"noopener\">缓存穿透、缓存并发、缓存失效之思路变迁 - 小程故事多</a>   </p>\n<p><br></p>"},{"title":"使用ELK管理日志","date":"2016-11-03T16:00:00.000Z","_content":"\n# Logstash\n\n## 简介\n* 官网： https://www.elastic.co/products/logstash\n\n<!-- more -->\n\n## 检查java环境\n\n* 需要java8以上的环境支撑\n\n``` sh\n$ java -version\njava version \"1.8.0_111\"\nJava(TM) SE Runtime Environment (build 1.8.0_111-b14)\nJava HotSpot(TM) 64-Bit Server VM (build 25.111-b14, mixed mode)\n```\n\n## 下载安装\n\n``` sh\n$ wget https://artifacts.elastic.co/downloads/logstash/logstash-5.0.0.tar.gz\n$ tar zxvf logstash-5.0.0.tar.gz\n$ cd logstash-5.0.0/\n$ ./bin/logstash -e 'input { stdin { } } output { stdout {} }'\nSending Logstash logs to /home/nlp/logstash-5.0.0/logs which is now configured via log4j2.properties.\nThe stdin plugin is now waiting for input:\n[2016-11-03T16:05:11,070][INFO ][logstash.pipeline        ] Starting pipeline {\"id\"=>\"main\", \"pipeline.workers\"=>4, \"pipeline.batch.size\"=>125, \"pipeline.batch.delay\"=>5, \"pipeline.max_inflight\"=>500}\n[2016-11-03T16:05:11,091][INFO ][logstash.pipeline        ] Pipeline main started\n[2016-11-03T16:05:11,133][INFO ][logstash.agent           ] Successfully started Logstash API endpoint {:port=>9600}\nhello world\n2016-11-03T08:05:47.176Z iZ25ueoepxdZ hello world\n```\n\n## 自定义配置文件\n* 将日志文件输出到elasticsearch\n\n``` sh\n$ vim test.conf\ninput {\n    file {\n        path => [\"/alidata/logs/web/web-info.log\"]\n        start_position => \"beginning\"\n    }\n}\n\noutput {\n    elasticsearch {\n        hosts => [\"127.0.0.1:9200\"]\n    }\n}\n```\n\n# Elasticsearch\n\n## 简介\n* 官网：https://www.elastic.co/products/elasticsearch\n\n## 下载安装\n\n``` sh\n$ wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.0.0.tar.gz\n$ tar zxvf elasticsearch-5.0.0.tar.gz\n$ cd elasticsearch-5.0.0/\n$ ./bin/elasticsearch\n$ curl http://localhost:9200\n{\n  \"name\" : \"R9IzZP9\",\n  \"cluster_name\" : \"elasticsearch\",\n  \"cluster_uuid\" : \"TGY12_FFSQCfp42g5NZ1VQ\",\n  \"version\" : {\n    \"number\" : \"5.0.0\",\n    \"build_hash\" : \"253032b\",\n    \"build_date\" : \"2016-10-26T04:37:51.531Z\",\n    \"build_snapshot\" : false,\n    \"lucene_version\" : \"6.2.0\"\n  },\n  \"tagline\" : \"You Know, for Search\"\n}\n```\n\n## 后台运行\n\n``` sh\n$ ./bin/elasticsearch -d -p es.pid  // 进程id写到es.pid文件中\n```\n\n# Kibana\n\n## 简介\n* 官网：https://www.elastic.co/products/kibana\n\n## 下载安装\n\n``` sh\n$ wget https://artifacts.elastic.co/downloads/kibana/kibana-5.0.0-linux-x86_64.tar.gz\n$ tar xvf kibana-5.0.0-linux-x86_64.tar\n$ cd kibana-5.0.0-linux-x86_64/\n$ vim config/kibana.yml\nserver.host: \"*.205.*.30\" // 外网ip地址，不然只能本机才能访问\nelasticsearch.url: \"http://localhost:9200\"  // 集成elasticsearch\n```\n\n* 用浏览器打开查看： http://*.205.*.30:5601\n\n## 后台运行\n\n``` sh\n$ nohup ./bin/kibana > nohup.log 2>&1 &\n```\n\n\n<br>","source":"_posts/Architecture/elk.md","raw":"title: 使用ELK管理日志\ndate: 2016-11-04  \ntags:\n    - original\ncategories:\n    - Architecture\n---\n\n# Logstash\n\n## 简介\n* 官网： https://www.elastic.co/products/logstash\n\n<!-- more -->\n\n## 检查java环境\n\n* 需要java8以上的环境支撑\n\n``` sh\n$ java -version\njava version \"1.8.0_111\"\nJava(TM) SE Runtime Environment (build 1.8.0_111-b14)\nJava HotSpot(TM) 64-Bit Server VM (build 25.111-b14, mixed mode)\n```\n\n## 下载安装\n\n``` sh\n$ wget https://artifacts.elastic.co/downloads/logstash/logstash-5.0.0.tar.gz\n$ tar zxvf logstash-5.0.0.tar.gz\n$ cd logstash-5.0.0/\n$ ./bin/logstash -e 'input { stdin { } } output { stdout {} }'\nSending Logstash logs to /home/nlp/logstash-5.0.0/logs which is now configured via log4j2.properties.\nThe stdin plugin is now waiting for input:\n[2016-11-03T16:05:11,070][INFO ][logstash.pipeline        ] Starting pipeline {\"id\"=>\"main\", \"pipeline.workers\"=>4, \"pipeline.batch.size\"=>125, \"pipeline.batch.delay\"=>5, \"pipeline.max_inflight\"=>500}\n[2016-11-03T16:05:11,091][INFO ][logstash.pipeline        ] Pipeline main started\n[2016-11-03T16:05:11,133][INFO ][logstash.agent           ] Successfully started Logstash API endpoint {:port=>9600}\nhello world\n2016-11-03T08:05:47.176Z iZ25ueoepxdZ hello world\n```\n\n## 自定义配置文件\n* 将日志文件输出到elasticsearch\n\n``` sh\n$ vim test.conf\ninput {\n    file {\n        path => [\"/alidata/logs/web/web-info.log\"]\n        start_position => \"beginning\"\n    }\n}\n\noutput {\n    elasticsearch {\n        hosts => [\"127.0.0.1:9200\"]\n    }\n}\n```\n\n# Elasticsearch\n\n## 简介\n* 官网：https://www.elastic.co/products/elasticsearch\n\n## 下载安装\n\n``` sh\n$ wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.0.0.tar.gz\n$ tar zxvf elasticsearch-5.0.0.tar.gz\n$ cd elasticsearch-5.0.0/\n$ ./bin/elasticsearch\n$ curl http://localhost:9200\n{\n  \"name\" : \"R9IzZP9\",\n  \"cluster_name\" : \"elasticsearch\",\n  \"cluster_uuid\" : \"TGY12_FFSQCfp42g5NZ1VQ\",\n  \"version\" : {\n    \"number\" : \"5.0.0\",\n    \"build_hash\" : \"253032b\",\n    \"build_date\" : \"2016-10-26T04:37:51.531Z\",\n    \"build_snapshot\" : false,\n    \"lucene_version\" : \"6.2.0\"\n  },\n  \"tagline\" : \"You Know, for Search\"\n}\n```\n\n## 后台运行\n\n``` sh\n$ ./bin/elasticsearch -d -p es.pid  // 进程id写到es.pid文件中\n```\n\n# Kibana\n\n## 简介\n* 官网：https://www.elastic.co/products/kibana\n\n## 下载安装\n\n``` sh\n$ wget https://artifacts.elastic.co/downloads/kibana/kibana-5.0.0-linux-x86_64.tar.gz\n$ tar xvf kibana-5.0.0-linux-x86_64.tar\n$ cd kibana-5.0.0-linux-x86_64/\n$ vim config/kibana.yml\nserver.host: \"*.205.*.30\" // 外网ip地址，不然只能本机才能访问\nelasticsearch.url: \"http://localhost:9200\"  // 集成elasticsearch\n```\n\n* 用浏览器打开查看： http://*.205.*.30:5601\n\n## 后台运行\n\n``` sh\n$ nohup ./bin/kibana > nohup.log 2>&1 &\n```\n\n\n<br>","slug":"Architecture/elk","published":1,"updated":"2018-04-05T11:32:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfoy71270007acie9eq0okte","content":"<h1 id=\"Logstash\"><a href=\"#Logstash\" class=\"headerlink\" title=\"Logstash\"></a>Logstash</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>官网： <a href=\"https://www.elastic.co/products/logstash\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/products/logstash</a></li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"检查java环境\"><a href=\"#检查java环境\" class=\"headerlink\" title=\"检查java环境\"></a>检查java环境</h2><ul>\n<li>需要java8以上的环境支撑</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ java -version</span><br><span class=\"line\">java version <span class=\"string\">\"1.8.0_111\"</span></span><br><span class=\"line\">Java(TM) SE Runtime Environment (build 1.8.0_111-b14)</span><br><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 25.111-b14, mixed mode)</span><br></pre></td></tr></table></figure>\n<h2 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://artifacts.elastic.co/downloads/logstash/logstash-5.0.0.tar.gz</span><br><span class=\"line\">$ tar zxvf logstash-5.0.0.tar.gz</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> logstash-5.0.0/</span><br><span class=\"line\">$ ./bin/logstash -e <span class=\"string\">'input &#123; stdin &#123; &#125; &#125; output &#123; stdout &#123;&#125; &#125;'</span></span><br><span class=\"line\">Sending Logstash logs to /home/nlp/logstash-5.0.0/logs <span class=\"built_in\">which</span> is now configured via log4j2.properties.</span><br><span class=\"line\">The stdin plugin is now waiting <span class=\"keyword\">for</span> input:</span><br><span class=\"line\">[2016-11-03T16:05:11,070][INFO ][logstash.pipeline        ] Starting pipeline &#123;<span class=\"string\">\"id\"</span>=&gt;<span class=\"string\">\"main\"</span>, <span class=\"string\">\"pipeline.workers\"</span>=&gt;4, <span class=\"string\">\"pipeline.batch.size\"</span>=&gt;125, <span class=\"string\">\"pipeline.batch.delay\"</span>=&gt;5, <span class=\"string\">\"pipeline.max_inflight\"</span>=&gt;500&#125;</span><br><span class=\"line\">[2016-11-03T16:05:11,091][INFO ][logstash.pipeline        ] Pipeline main started</span><br><span class=\"line\">[2016-11-03T16:05:11,133][INFO ][logstash.agent           ] Successfully started Logstash API endpoint &#123;:port=&gt;9600&#125;</span><br><span class=\"line\">hello world</span><br><span class=\"line\">2016-11-03T08:05:47.176Z iZ25ueoepxdZ hello world</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义配置文件\"><a href=\"#自定义配置文件\" class=\"headerlink\" title=\"自定义配置文件\"></a>自定义配置文件</h2><ul>\n<li>将日志文件输出到elasticsearch</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim test.conf</span><br><span class=\"line\">input &#123;</span><br><span class=\"line\">    file &#123;</span><br><span class=\"line\">        path =&gt; [<span class=\"string\">\"/alidata/logs/web/web-info.log\"</span>]</span><br><span class=\"line\">        start_position =&gt; <span class=\"string\">\"beginning\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">    elasticsearch &#123;</span><br><span class=\"line\">        hosts =&gt; [<span class=\"string\">\"127.0.0.1:9200\"</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Elasticsearch\"><a href=\"#Elasticsearch\" class=\"headerlink\" title=\"Elasticsearch\"></a>Elasticsearch</h1><h2 id=\"简介-1\"><a href=\"#简介-1\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>官网：<a href=\"https://www.elastic.co/products/elasticsearch\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/products/elasticsearch</a></li>\n</ul>\n<h2 id=\"下载安装-1\"><a href=\"#下载安装-1\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.0.0.tar.gz</span><br><span class=\"line\">$ tar zxvf elasticsearch-5.0.0.tar.gz</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> elasticsearch-5.0.0/</span><br><span class=\"line\">$ ./bin/elasticsearch</span><br><span class=\"line\">$ curl http://localhost:9200</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span> : <span class=\"string\">\"R9IzZP9\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"cluster_name\"</span> : <span class=\"string\">\"elasticsearch\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"cluster_uuid\"</span> : <span class=\"string\">\"TGY12_FFSQCfp42g5NZ1VQ\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"version\"</span> : &#123;</span><br><span class=\"line\">    <span class=\"string\">\"number\"</span> : <span class=\"string\">\"5.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"build_hash\"</span> : <span class=\"string\">\"253032b\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"build_date\"</span> : <span class=\"string\">\"2016-10-26T04:37:51.531Z\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"build_snapshot\"</span> : <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">\"lucene_version\"</span> : <span class=\"string\">\"6.2.0\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"tagline\"</span> : <span class=\"string\">\"You Know, for Search\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"后台运行\"><a href=\"#后台运行\" class=\"headerlink\" title=\"后台运行\"></a>后台运行</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./bin/elasticsearch -d -p es.pid  // 进程id写到es.pid文件中</span><br></pre></td></tr></table></figure>\n<h1 id=\"Kibana\"><a href=\"#Kibana\" class=\"headerlink\" title=\"Kibana\"></a>Kibana</h1><h2 id=\"简介-2\"><a href=\"#简介-2\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>官网：<a href=\"https://www.elastic.co/products/kibana\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/products/kibana</a></li>\n</ul>\n<h2 id=\"下载安装-2\"><a href=\"#下载安装-2\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://artifacts.elastic.co/downloads/kibana/kibana-5.0.0-linux-x86_64.tar.gz</span><br><span class=\"line\">$ tar xvf kibana-5.0.0-linux-x86_64.tar</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> kibana-5.0.0-linux-x86_64/</span><br><span class=\"line\">$ vim config/kibana.yml</span><br><span class=\"line\">server.host: <span class=\"string\">\"*.205.*.30\"</span> // 外网ip地址，不然只能本机才能访问</span><br><span class=\"line\">elasticsearch.url: <span class=\"string\">\"http://localhost:9200\"</span>  // 集成elasticsearch</span><br></pre></td></tr></table></figure>\n<ul>\n<li>用浏览器打开查看： http://<em>.205.</em>.30:5601</li>\n</ul>\n<h2 id=\"后台运行-1\"><a href=\"#后台运行-1\" class=\"headerlink\" title=\"后台运行\"></a>后台运行</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nohup ./bin/kibana &gt; nohup.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Logstash\"><a href=\"#Logstash\" class=\"headerlink\" title=\"Logstash\"></a>Logstash</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>官网： <a href=\"https://www.elastic.co/products/logstash\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/products/logstash</a></li>\n</ul>","more":"<h2 id=\"检查java环境\"><a href=\"#检查java环境\" class=\"headerlink\" title=\"检查java环境\"></a>检查java环境</h2><ul>\n<li>需要java8以上的环境支撑</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ java -version</span><br><span class=\"line\">java version <span class=\"string\">\"1.8.0_111\"</span></span><br><span class=\"line\">Java(TM) SE Runtime Environment (build 1.8.0_111-b14)</span><br><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 25.111-b14, mixed mode)</span><br></pre></td></tr></table></figure>\n<h2 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://artifacts.elastic.co/downloads/logstash/logstash-5.0.0.tar.gz</span><br><span class=\"line\">$ tar zxvf logstash-5.0.0.tar.gz</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> logstash-5.0.0/</span><br><span class=\"line\">$ ./bin/logstash -e <span class=\"string\">'input &#123; stdin &#123; &#125; &#125; output &#123; stdout &#123;&#125; &#125;'</span></span><br><span class=\"line\">Sending Logstash logs to /home/nlp/logstash-5.0.0/logs <span class=\"built_in\">which</span> is now configured via log4j2.properties.</span><br><span class=\"line\">The stdin plugin is now waiting <span class=\"keyword\">for</span> input:</span><br><span class=\"line\">[2016-11-03T16:05:11,070][INFO ][logstash.pipeline        ] Starting pipeline &#123;<span class=\"string\">\"id\"</span>=&gt;<span class=\"string\">\"main\"</span>, <span class=\"string\">\"pipeline.workers\"</span>=&gt;4, <span class=\"string\">\"pipeline.batch.size\"</span>=&gt;125, <span class=\"string\">\"pipeline.batch.delay\"</span>=&gt;5, <span class=\"string\">\"pipeline.max_inflight\"</span>=&gt;500&#125;</span><br><span class=\"line\">[2016-11-03T16:05:11,091][INFO ][logstash.pipeline        ] Pipeline main started</span><br><span class=\"line\">[2016-11-03T16:05:11,133][INFO ][logstash.agent           ] Successfully started Logstash API endpoint &#123;:port=&gt;9600&#125;</span><br><span class=\"line\">hello world</span><br><span class=\"line\">2016-11-03T08:05:47.176Z iZ25ueoepxdZ hello world</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义配置文件\"><a href=\"#自定义配置文件\" class=\"headerlink\" title=\"自定义配置文件\"></a>自定义配置文件</h2><ul>\n<li>将日志文件输出到elasticsearch</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim test.conf</span><br><span class=\"line\">input &#123;</span><br><span class=\"line\">    file &#123;</span><br><span class=\"line\">        path =&gt; [<span class=\"string\">\"/alidata/logs/web/web-info.log\"</span>]</span><br><span class=\"line\">        start_position =&gt; <span class=\"string\">\"beginning\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">    elasticsearch &#123;</span><br><span class=\"line\">        hosts =&gt; [<span class=\"string\">\"127.0.0.1:9200\"</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Elasticsearch\"><a href=\"#Elasticsearch\" class=\"headerlink\" title=\"Elasticsearch\"></a>Elasticsearch</h1><h2 id=\"简介-1\"><a href=\"#简介-1\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>官网：<a href=\"https://www.elastic.co/products/elasticsearch\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/products/elasticsearch</a></li>\n</ul>\n<h2 id=\"下载安装-1\"><a href=\"#下载安装-1\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.0.0.tar.gz</span><br><span class=\"line\">$ tar zxvf elasticsearch-5.0.0.tar.gz</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> elasticsearch-5.0.0/</span><br><span class=\"line\">$ ./bin/elasticsearch</span><br><span class=\"line\">$ curl http://localhost:9200</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span> : <span class=\"string\">\"R9IzZP9\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"cluster_name\"</span> : <span class=\"string\">\"elasticsearch\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"cluster_uuid\"</span> : <span class=\"string\">\"TGY12_FFSQCfp42g5NZ1VQ\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"version\"</span> : &#123;</span><br><span class=\"line\">    <span class=\"string\">\"number\"</span> : <span class=\"string\">\"5.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"build_hash\"</span> : <span class=\"string\">\"253032b\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"build_date\"</span> : <span class=\"string\">\"2016-10-26T04:37:51.531Z\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"build_snapshot\"</span> : <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">\"lucene_version\"</span> : <span class=\"string\">\"6.2.0\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"tagline\"</span> : <span class=\"string\">\"You Know, for Search\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"后台运行\"><a href=\"#后台运行\" class=\"headerlink\" title=\"后台运行\"></a>后台运行</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./bin/elasticsearch -d -p es.pid  // 进程id写到es.pid文件中</span><br></pre></td></tr></table></figure>\n<h1 id=\"Kibana\"><a href=\"#Kibana\" class=\"headerlink\" title=\"Kibana\"></a>Kibana</h1><h2 id=\"简介-2\"><a href=\"#简介-2\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>官网：<a href=\"https://www.elastic.co/products/kibana\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/products/kibana</a></li>\n</ul>\n<h2 id=\"下载安装-2\"><a href=\"#下载安装-2\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://artifacts.elastic.co/downloads/kibana/kibana-5.0.0-linux-x86_64.tar.gz</span><br><span class=\"line\">$ tar xvf kibana-5.0.0-linux-x86_64.tar</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> kibana-5.0.0-linux-x86_64/</span><br><span class=\"line\">$ vim config/kibana.yml</span><br><span class=\"line\">server.host: <span class=\"string\">\"*.205.*.30\"</span> // 外网ip地址，不然只能本机才能访问</span><br><span class=\"line\">elasticsearch.url: <span class=\"string\">\"http://localhost:9200\"</span>  // 集成elasticsearch</span><br></pre></td></tr></table></figure>\n<ul>\n<li>用浏览器打开查看： http://<em>.205.</em>.30:5601</li>\n</ul>\n<h2 id=\"后台运行-1\"><a href=\"#后台运行-1\" class=\"headerlink\" title=\"后台运行\"></a>后台运行</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nohup ./bin/kibana &gt; nohup.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n<p><br></p>"},{"title":"使用jenkins进行项目的自动构建部署","date":"2016-12-20T16:00:00.000Z","_content":"\n# jenkins 简介\n* Jenkins是基于Java开发的一种持续集成工具，用于监控持续重复的工作，功能包括：持续的软件版本发布/测试项目和监控外部调用执行的工作。\n* 官网地址地址： https://jenkins.io\n\n<!-- more -->\n\n# 下载安装启动\n\n## CentOS 下用yum进行安装启动\n\n``` sh\n# 先更新源再安装最新版 jenkins\nsudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo\nsudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key\nsudo yum install jenkins\n# 启动\nsudo service jenkins start\n# 停止\nsudo service jenkins stop\n# 重启\nsudo service jenkins restart\n# 检查\nsudo chkconfig jenkins on\n```\n\n## 下载war包放到tomcat中启动\n\n* 服务器 yum 安装速度太慢了，最终我选择了这种方式，本地下载好war包传到服务器上的tomcat容器下，然后启动\n* 下载地址：http://mirrors.jenkins.io/war-stable/latest/jenkins.war\n\n# 初始化\n\n* 在浏览器中输入url打开jenkins的后台控制页面\n  ![初始化界面](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.00.jpeg)\n* 初始化成功后会自动生成一个管理员密码放到指定位置，根据页面提示复制密码粘贴到输入框就可以登录了\n  ![初始登录界面](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.01.jpeg)\n* 登录成功后回让你选择插件的安装，可以选择建议的安装也可以自己进行选择，不清楚的话可以使用建议的安装\n  ![初始登录界面](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.02.jpeg)\n* 由于建议安装的插件比较多，安装的过程有点慢，多等待一会\n  ![初始登录界面](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.06.jpeg)\n* 安装的过程也可能因为网络等一些原因安装会失败，现在可以无视它，点击Continue，后面再进行手动的安装\n  ![安装完成](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.30.jpeg)\n* 安装完成后最好新创建一个管理员账户代替之前的临时自动生成的密码账户\n  ![创建新的管理员账户](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.31.jpeg)\n* 初始化完成，进入后台管理界面\n  ![初始化完成](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.32.jpeg)\n  ![后台管理界面](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.322.jpeg)\n\n# 安装插件\n\n* 之前初始化的时候，有些插件安装失败，可以在用到的时候来手动修复它，没用到的话就可以暂且不理它，不影响jenkins的使用\n* 点击左侧边栏的“系统管理”，就可以看了插件安装的一些错误信息\n  ![插件错误信息](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.40.jpeg)\n* 在“系统管理”中往下拉,找到“管理插件”点击进去就可以查看和管理所有的插件，点击“可选插件”显示所有jenkins支持的插件，在右上角的“过滤”输入框中，输入需要安装的插件名就可以筛选查找到想要的插件\n  ![查找插件](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.54.jpeg)\n* 选中要安装的插件输入框，点击安装就可以在线安装需要的插件，当然由于网络的原因也可能再次安装错误，或者安装的比较慢。我们可以点击插件名进入插件的主页，里面有该插件的详细信息并能下载hpi文件进行手动安装\n  ![插件详情](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.58.jpeg)\n* 在“管理插件”的页面中点击高级选项，我们可以在下面找到“上传插件”，上传下载好的插件，点击“上传”，系统就会自动上传安装该插件。\n  ![上传插件](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2012.00.jpeg)\n\n# gitlab的配置\n* 集成gitlab，让jenkins能够直接读取修改gitlab中的代码，方便项目的构建\n* 安装gitlab-plugin\n* 在“系统管理” -> “系统设置“ -> “Gitlab” 中配置对应的gitlab信息\n* 点击“Test Connection”测试下配置是否成功\n  ![Gitlab配置](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2012.28.jpeg)\n  ![Add Gitlab Credentials](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2012.27.jpeg)\n  ![Gitlab API token](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2012.29.jpeg)\n\n# Publish Over SSH\n* 通过ssh连接远程服务器，并能执行脚本部署项目\n* 安装publish-over-ssh\n* 在“系统管理” -> “系统设置“ -> “Publish over SSH” 中配置对应的ssh信息\n* Key中填登录远程服务器的密码([ssh免密码登录](https://www.google.com.hk/search?client=safari&rls=en&q=ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95&ie=UTF-8&oe=UTF-8&gws_rd=cr,ssl))\n* 点击\"SSH Servers\"后的“增加”按钮，新增一个远程服务器\n* 点开“高级...”按钮，能进一步的配置端口等信息。\n* 配置为Server信息后，点击\"Test Configuration\"按钮测试是否能够连接成功。\n  ![ssh配置](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2014.21.jpeg)\n\n# 监测代码变动自动部署\n\n* 点击左侧边栏的“新建”按钮，新建一个任务。\n* 填写项目的名称，并选择一种构建的方式，此时我们选择第一个，构建一个自由风格的软件项目，然后点击“OK”按钮创建任务，并进行详细的配置\n  ![新建任务](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2014.28.jpeg)\n* 默认设置里填写项目名和描述，并选择之前配置好的要连接的gitlab\n  ![默认配置](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2014.32.jpeg)\n* 配置源码，填写要构建项目的源码仓库地址，并指定要构建的分支\n  ![配置源码](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2014.30.jpeg)\n* 配置触发器，选择触发构建的方式，可以通过hook，根据jenkins提供的地址，放到gitlab中的hook配置中，就会自动触发构建。此时我们选择的是定时检测项目变动，如果检测到分支有新的变动就触发构建，如果感觉一分钟时间太频繁的话，可以自己设置时间频率。\n  ![构建触发器](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2014.34.jpeg)\n* 配置构建，构建选用的是“Invoke top-level Maven target”,填写对应的maven命令，就会自动执行maven命令进行侯建\n* 配置构建后操作， 该行为会在构建完成后执行，我们选用的是“Send build artifacts over SSH”的方式，把构建完成的jar包发送到远程服务器上用ssh命令执行启动，此时jenkins所有机器的默认路径是任务所在的目录，远程机器的默认路径是之前publish-over-ssh中指定的文件地址。Source files指定要传送到远程服务器上的文件，remote directory指定的是传送到远程服务器上的文件地址，Remove prefix是值要去除的文件目录，不然传送到远程服务器也会带有该目录层级结构的。exec Command里输入的是在远程服务器上要执行的指令。\n  ![构建部署配置](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2014.39.jpeg)\n* 项目构建后会有构建历史，点击进去，选择“Console Output”就可以查看构建过程中的执行记录\n\n# 项目回滚\n* 上面虽然实现了项目的自动部署，但是有时部署失败的时候我们需要回滚到指定版本的构建，这样才能更灵活的进行项目的构建部署。我们可以选择“参数化的构建过程”进行传递不同的参数来选择是进行新的构建还是回滚\n* 如果要在实现回滚，一定要在构建后将，构建完成的文件进行存档，方便以后回滚的时候使用\n  ![构建后存档](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2015.27.jpeg)\n* 使用参数化构建过程，让后面的脚步可以根据不同的变量执行不同的操作。添加“Choice”参数配置不同的选项，让选择发布还是回滚，添加“String Parameter”参数来传递要回滚的版本号。\n  ![参数和构建过程](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2015.28.jpeg)\n* 构建选择“Execute Shell”的方式，自己根据变量，自定义构建的脚本，此时如果是发布安装maven的构建过程进行新的构建，如果是回滚，知道历史构建后的文件，复制到当前构建结果目录。\n  ![构建脚本](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2015.29.jpeg)\n* 点击构建，根据不同的参数选择发布还是回滚，回滚的时候填写要回滚到的历史版本号\n  ![构建页面](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2015.30.jpeg)\n\n<br>","source":"_posts/Architecture/jenkins.md","raw":"title: 使用jenkins进行项目的自动构建部署\ndate: 2016-12-21  \ntags:\n    - original\ncategories:\n    - Architecture\n---\n\n# jenkins 简介\n* Jenkins是基于Java开发的一种持续集成工具，用于监控持续重复的工作，功能包括：持续的软件版本发布/测试项目和监控外部调用执行的工作。\n* 官网地址地址： https://jenkins.io\n\n<!-- more -->\n\n# 下载安装启动\n\n## CentOS 下用yum进行安装启动\n\n``` sh\n# 先更新源再安装最新版 jenkins\nsudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo\nsudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key\nsudo yum install jenkins\n# 启动\nsudo service jenkins start\n# 停止\nsudo service jenkins stop\n# 重启\nsudo service jenkins restart\n# 检查\nsudo chkconfig jenkins on\n```\n\n## 下载war包放到tomcat中启动\n\n* 服务器 yum 安装速度太慢了，最终我选择了这种方式，本地下载好war包传到服务器上的tomcat容器下，然后启动\n* 下载地址：http://mirrors.jenkins.io/war-stable/latest/jenkins.war\n\n# 初始化\n\n* 在浏览器中输入url打开jenkins的后台控制页面\n  ![初始化界面](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.00.jpeg)\n* 初始化成功后会自动生成一个管理员密码放到指定位置，根据页面提示复制密码粘贴到输入框就可以登录了\n  ![初始登录界面](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.01.jpeg)\n* 登录成功后回让你选择插件的安装，可以选择建议的安装也可以自己进行选择，不清楚的话可以使用建议的安装\n  ![初始登录界面](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.02.jpeg)\n* 由于建议安装的插件比较多，安装的过程有点慢，多等待一会\n  ![初始登录界面](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.06.jpeg)\n* 安装的过程也可能因为网络等一些原因安装会失败，现在可以无视它，点击Continue，后面再进行手动的安装\n  ![安装完成](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.30.jpeg)\n* 安装完成后最好新创建一个管理员账户代替之前的临时自动生成的密码账户\n  ![创建新的管理员账户](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.31.jpeg)\n* 初始化完成，进入后台管理界面\n  ![初始化完成](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.32.jpeg)\n  ![后台管理界面](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.322.jpeg)\n\n# 安装插件\n\n* 之前初始化的时候，有些插件安装失败，可以在用到的时候来手动修复它，没用到的话就可以暂且不理它，不影响jenkins的使用\n* 点击左侧边栏的“系统管理”，就可以看了插件安装的一些错误信息\n  ![插件错误信息](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.40.jpeg)\n* 在“系统管理”中往下拉,找到“管理插件”点击进去就可以查看和管理所有的插件，点击“可选插件”显示所有jenkins支持的插件，在右上角的“过滤”输入框中，输入需要安装的插件名就可以筛选查找到想要的插件\n  ![查找插件](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.54.jpeg)\n* 选中要安装的插件输入框，点击安装就可以在线安装需要的插件，当然由于网络的原因也可能再次安装错误，或者安装的比较慢。我们可以点击插件名进入插件的主页，里面有该插件的详细信息并能下载hpi文件进行手动安装\n  ![插件详情](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.58.jpeg)\n* 在“管理插件”的页面中点击高级选项，我们可以在下面找到“上传插件”，上传下载好的插件，点击“上传”，系统就会自动上传安装该插件。\n  ![上传插件](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2012.00.jpeg)\n\n# gitlab的配置\n* 集成gitlab，让jenkins能够直接读取修改gitlab中的代码，方便项目的构建\n* 安装gitlab-plugin\n* 在“系统管理” -> “系统设置“ -> “Gitlab” 中配置对应的gitlab信息\n* 点击“Test Connection”测试下配置是否成功\n  ![Gitlab配置](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2012.28.jpeg)\n  ![Add Gitlab Credentials](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2012.27.jpeg)\n  ![Gitlab API token](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2012.29.jpeg)\n\n# Publish Over SSH\n* 通过ssh连接远程服务器，并能执行脚本部署项目\n* 安装publish-over-ssh\n* 在“系统管理” -> “系统设置“ -> “Publish over SSH” 中配置对应的ssh信息\n* Key中填登录远程服务器的密码([ssh免密码登录](https://www.google.com.hk/search?client=safari&rls=en&q=ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95&ie=UTF-8&oe=UTF-8&gws_rd=cr,ssl))\n* 点击\"SSH Servers\"后的“增加”按钮，新增一个远程服务器\n* 点开“高级...”按钮，能进一步的配置端口等信息。\n* 配置为Server信息后，点击\"Test Configuration\"按钮测试是否能够连接成功。\n  ![ssh配置](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2014.21.jpeg)\n\n# 监测代码变动自动部署\n\n* 点击左侧边栏的“新建”按钮，新建一个任务。\n* 填写项目的名称，并选择一种构建的方式，此时我们选择第一个，构建一个自由风格的软件项目，然后点击“OK”按钮创建任务，并进行详细的配置\n  ![新建任务](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2014.28.jpeg)\n* 默认设置里填写项目名和描述，并选择之前配置好的要连接的gitlab\n  ![默认配置](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2014.32.jpeg)\n* 配置源码，填写要构建项目的源码仓库地址，并指定要构建的分支\n  ![配置源码](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2014.30.jpeg)\n* 配置触发器，选择触发构建的方式，可以通过hook，根据jenkins提供的地址，放到gitlab中的hook配置中，就会自动触发构建。此时我们选择的是定时检测项目变动，如果检测到分支有新的变动就触发构建，如果感觉一分钟时间太频繁的话，可以自己设置时间频率。\n  ![构建触发器](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2014.34.jpeg)\n* 配置构建，构建选用的是“Invoke top-level Maven target”,填写对应的maven命令，就会自动执行maven命令进行侯建\n* 配置构建后操作， 该行为会在构建完成后执行，我们选用的是“Send build artifacts over SSH”的方式，把构建完成的jar包发送到远程服务器上用ssh命令执行启动，此时jenkins所有机器的默认路径是任务所在的目录，远程机器的默认路径是之前publish-over-ssh中指定的文件地址。Source files指定要传送到远程服务器上的文件，remote directory指定的是传送到远程服务器上的文件地址，Remove prefix是值要去除的文件目录，不然传送到远程服务器也会带有该目录层级结构的。exec Command里输入的是在远程服务器上要执行的指令。\n  ![构建部署配置](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2014.39.jpeg)\n* 项目构建后会有构建历史，点击进去，选择“Console Output”就可以查看构建过程中的执行记录\n\n# 项目回滚\n* 上面虽然实现了项目的自动部署，但是有时部署失败的时候我们需要回滚到指定版本的构建，这样才能更灵活的进行项目的构建部署。我们可以选择“参数化的构建过程”进行传递不同的参数来选择是进行新的构建还是回滚\n* 如果要在实现回滚，一定要在构建后将，构建完成的文件进行存档，方便以后回滚的时候使用\n  ![构建后存档](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2015.27.jpeg)\n* 使用参数化构建过程，让后面的脚步可以根据不同的变量执行不同的操作。添加“Choice”参数配置不同的选项，让选择发布还是回滚，添加“String Parameter”参数来传递要回滚的版本号。\n  ![参数和构建过程](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2015.28.jpeg)\n* 构建选择“Execute Shell”的方式，自己根据变量，自定义构建的脚本，此时如果是发布安装maven的构建过程进行新的构建，如果是回滚，知道历史构建后的文件，复制到当前构建结果目录。\n  ![构建脚本](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2015.29.jpeg)\n* 点击构建，根据不同的参数选择发布还是回滚，回滚的时候填写要回滚到的历史版本号\n  ![构建页面](http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2015.30.jpeg)\n\n<br>","slug":"Architecture/jenkins","published":1,"updated":"2018-04-05T11:32:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfoy71280008aciemq579pq5","content":"<h1 id=\"jenkins-简介\"><a href=\"#jenkins-简介\" class=\"headerlink\" title=\"jenkins 简介\"></a>jenkins 简介</h1><ul>\n<li>Jenkins是基于Java开发的一种持续集成工具，用于监控持续重复的工作，功能包括：持续的软件版本发布/测试项目和监控外部调用执行的工作。</li>\n<li>官网地址地址： <a href=\"https://jenkins.io\" target=\"_blank\" rel=\"noopener\">https://jenkins.io</a></li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"下载安装启动\"><a href=\"#下载安装启动\" class=\"headerlink\" title=\"下载安装启动\"></a>下载安装启动</h1><h2 id=\"CentOS-下用yum进行安装启动\"><a href=\"#CentOS-下用yum进行安装启动\" class=\"headerlink\" title=\"CentOS 下用yum进行安装启动\"></a>CentOS 下用yum进行安装启动</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 先更新源再安装最新版 jenkins</span></span><br><span class=\"line\">sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</span><br><span class=\"line\">sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><br><span class=\"line\">sudo yum install jenkins</span><br><span class=\"line\"><span class=\"comment\"># 启动</span></span><br><span class=\"line\">sudo service jenkins start</span><br><span class=\"line\"><span class=\"comment\"># 停止</span></span><br><span class=\"line\">sudo service jenkins stop</span><br><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\">sudo service jenkins restart</span><br><span class=\"line\"><span class=\"comment\"># 检查</span></span><br><span class=\"line\">sudo chkconfig jenkins on</span><br></pre></td></tr></table></figure>\n<h2 id=\"下载war包放到tomcat中启动\"><a href=\"#下载war包放到tomcat中启动\" class=\"headerlink\" title=\"下载war包放到tomcat中启动\"></a>下载war包放到tomcat中启动</h2><ul>\n<li>服务器 yum 安装速度太慢了，最终我选择了这种方式，本地下载好war包传到服务器上的tomcat容器下，然后启动</li>\n<li>下载地址：<a href=\"http://mirrors.jenkins.io/war-stable/latest/jenkins.war\" target=\"_blank\" rel=\"noopener\">http://mirrors.jenkins.io/war-stable/latest/jenkins.war</a></li>\n</ul>\n<h1 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h1><ul>\n<li>在浏览器中输入url打开jenkins的后台控制页面<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.00.jpeg\" alt=\"初始化界面\"></li>\n<li>初始化成功后会自动生成一个管理员密码放到指定位置，根据页面提示复制密码粘贴到输入框就可以登录了<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.01.jpeg\" alt=\"初始登录界面\"></li>\n<li>登录成功后回让你选择插件的安装，可以选择建议的安装也可以自己进行选择，不清楚的话可以使用建议的安装<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.02.jpeg\" alt=\"初始登录界面\"></li>\n<li>由于建议安装的插件比较多，安装的过程有点慢，多等待一会<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.06.jpeg\" alt=\"初始登录界面\"></li>\n<li>安装的过程也可能因为网络等一些原因安装会失败，现在可以无视它，点击Continue，后面再进行手动的安装<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.30.jpeg\" alt=\"安装完成\"></li>\n<li>安装完成后最好新创建一个管理员账户代替之前的临时自动生成的密码账户<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.31.jpeg\" alt=\"创建新的管理员账户\"></li>\n<li>初始化完成，进入后台管理界面<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.32.jpeg\" alt=\"初始化完成\"><br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.322.jpeg\" alt=\"后台管理界面\"></li>\n</ul>\n<h1 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h1><ul>\n<li>之前初始化的时候，有些插件安装失败，可以在用到的时候来手动修复它，没用到的话就可以暂且不理它，不影响jenkins的使用</li>\n<li>点击左侧边栏的“系统管理”，就可以看了插件安装的一些错误信息<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.40.jpeg\" alt=\"插件错误信息\"></li>\n<li>在“系统管理”中往下拉,找到“管理插件”点击进去就可以查看和管理所有的插件，点击“可选插件”显示所有jenkins支持的插件，在右上角的“过滤”输入框中，输入需要安装的插件名就可以筛选查找到想要的插件<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.54.jpeg\" alt=\"查找插件\"></li>\n<li>选中要安装的插件输入框，点击安装就可以在线安装需要的插件，当然由于网络的原因也可能再次安装错误，或者安装的比较慢。我们可以点击插件名进入插件的主页，里面有该插件的详细信息并能下载hpi文件进行手动安装<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.58.jpeg\" alt=\"插件详情\"></li>\n<li>在“管理插件”的页面中点击高级选项，我们可以在下面找到“上传插件”，上传下载好的插件，点击“上传”，系统就会自动上传安装该插件。<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2012.00.jpeg\" alt=\"上传插件\"></li>\n</ul>\n<h1 id=\"gitlab的配置\"><a href=\"#gitlab的配置\" class=\"headerlink\" title=\"gitlab的配置\"></a>gitlab的配置</h1><ul>\n<li>集成gitlab，让jenkins能够直接读取修改gitlab中的代码，方便项目的构建</li>\n<li>安装gitlab-plugin</li>\n<li>在“系统管理” -&gt; “系统设置“ -&gt; “Gitlab” 中配置对应的gitlab信息</li>\n<li>点击“Test Connection”测试下配置是否成功<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2012.28.jpeg\" alt=\"Gitlab配置\"><br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2012.27.jpeg\" alt=\"Add Gitlab Credentials\"><br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2012.29.jpeg\" alt=\"Gitlab API token\"></li>\n</ul>\n<h1 id=\"Publish-Over-SSH\"><a href=\"#Publish-Over-SSH\" class=\"headerlink\" title=\"Publish Over SSH\"></a>Publish Over SSH</h1><ul>\n<li>通过ssh连接远程服务器，并能执行脚本部署项目</li>\n<li>安装publish-over-ssh</li>\n<li>在“系统管理” -&gt; “系统设置“ -&gt; “Publish over SSH” 中配置对应的ssh信息</li>\n<li>Key中填登录远程服务器的密码(<a href=\"https://www.google.com.hk/search?client=safari&amp;rls=en&amp;q=ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95&amp;ie=UTF-8&amp;oe=UTF-8&amp;gws_rd=cr,ssl\" target=\"_blank\" rel=\"noopener\">ssh免密码登录</a>)</li>\n<li>点击”SSH Servers”后的“增加”按钮，新增一个远程服务器</li>\n<li>点开“高级…”按钮，能进一步的配置端口等信息。</li>\n<li>配置为Server信息后，点击”Test Configuration”按钮测试是否能够连接成功。<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2014.21.jpeg\" alt=\"ssh配置\"></li>\n</ul>\n<h1 id=\"监测代码变动自动部署\"><a href=\"#监测代码变动自动部署\" class=\"headerlink\" title=\"监测代码变动自动部署\"></a>监测代码变动自动部署</h1><ul>\n<li>点击左侧边栏的“新建”按钮，新建一个任务。</li>\n<li>填写项目的名称，并选择一种构建的方式，此时我们选择第一个，构建一个自由风格的软件项目，然后点击“OK”按钮创建任务，并进行详细的配置<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2014.28.jpeg\" alt=\"新建任务\"></li>\n<li>默认设置里填写项目名和描述，并选择之前配置好的要连接的gitlab<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2014.32.jpeg\" alt=\"默认配置\"></li>\n<li>配置源码，填写要构建项目的源码仓库地址，并指定要构建的分支<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2014.30.jpeg\" alt=\"配置源码\"></li>\n<li>配置触发器，选择触发构建的方式，可以通过hook，根据jenkins提供的地址，放到gitlab中的hook配置中，就会自动触发构建。此时我们选择的是定时检测项目变动，如果检测到分支有新的变动就触发构建，如果感觉一分钟时间太频繁的话，可以自己设置时间频率。<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2014.34.jpeg\" alt=\"构建触发器\"></li>\n<li>配置构建，构建选用的是“Invoke top-level Maven target”,填写对应的maven命令，就会自动执行maven命令进行侯建</li>\n<li>配置构建后操作， 该行为会在构建完成后执行，我们选用的是“Send build artifacts over SSH”的方式，把构建完成的jar包发送到远程服务器上用ssh命令执行启动，此时jenkins所有机器的默认路径是任务所在的目录，远程机器的默认路径是之前publish-over-ssh中指定的文件地址。Source files指定要传送到远程服务器上的文件，remote directory指定的是传送到远程服务器上的文件地址，Remove prefix是值要去除的文件目录，不然传送到远程服务器也会带有该目录层级结构的。exec Command里输入的是在远程服务器上要执行的指令。<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2014.39.jpeg\" alt=\"构建部署配置\"></li>\n<li>项目构建后会有构建历史，点击进去，选择“Console Output”就可以查看构建过程中的执行记录</li>\n</ul>\n<h1 id=\"项目回滚\"><a href=\"#项目回滚\" class=\"headerlink\" title=\"项目回滚\"></a>项目回滚</h1><ul>\n<li>上面虽然实现了项目的自动部署，但是有时部署失败的时候我们需要回滚到指定版本的构建，这样才能更灵活的进行项目的构建部署。我们可以选择“参数化的构建过程”进行传递不同的参数来选择是进行新的构建还是回滚</li>\n<li>如果要在实现回滚，一定要在构建后将，构建完成的文件进行存档，方便以后回滚的时候使用<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2015.27.jpeg\" alt=\"构建后存档\"></li>\n<li>使用参数化构建过程，让后面的脚步可以根据不同的变量执行不同的操作。添加“Choice”参数配置不同的选项，让选择发布还是回滚，添加“String Parameter”参数来传递要回滚的版本号。<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2015.28.jpeg\" alt=\"参数和构建过程\"></li>\n<li>构建选择“Execute Shell”的方式，自己根据变量，自定义构建的脚本，此时如果是发布安装maven的构建过程进行新的构建，如果是回滚，知道历史构建后的文件，复制到当前构建结果目录。<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2015.29.jpeg\" alt=\"构建脚本\"></li>\n<li>点击构建，根据不同的参数选择发布还是回滚，回滚的时候填写要回滚到的历史版本号<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2015.30.jpeg\" alt=\"构建页面\"></li>\n</ul>\n<p><br></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"jenkins-简介\"><a href=\"#jenkins-简介\" class=\"headerlink\" title=\"jenkins 简介\"></a>jenkins 简介</h1><ul>\n<li>Jenkins是基于Java开发的一种持续集成工具，用于监控持续重复的工作，功能包括：持续的软件版本发布/测试项目和监控外部调用执行的工作。</li>\n<li>官网地址地址： <a href=\"https://jenkins.io\" target=\"_blank\" rel=\"noopener\">https://jenkins.io</a></li>\n</ul>","more":"<h1 id=\"下载安装启动\"><a href=\"#下载安装启动\" class=\"headerlink\" title=\"下载安装启动\"></a>下载安装启动</h1><h2 id=\"CentOS-下用yum进行安装启动\"><a href=\"#CentOS-下用yum进行安装启动\" class=\"headerlink\" title=\"CentOS 下用yum进行安装启动\"></a>CentOS 下用yum进行安装启动</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 先更新源再安装最新版 jenkins</span></span><br><span class=\"line\">sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</span><br><span class=\"line\">sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><br><span class=\"line\">sudo yum install jenkins</span><br><span class=\"line\"><span class=\"comment\"># 启动</span></span><br><span class=\"line\">sudo service jenkins start</span><br><span class=\"line\"><span class=\"comment\"># 停止</span></span><br><span class=\"line\">sudo service jenkins stop</span><br><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\">sudo service jenkins restart</span><br><span class=\"line\"><span class=\"comment\"># 检查</span></span><br><span class=\"line\">sudo chkconfig jenkins on</span><br></pre></td></tr></table></figure>\n<h2 id=\"下载war包放到tomcat中启动\"><a href=\"#下载war包放到tomcat中启动\" class=\"headerlink\" title=\"下载war包放到tomcat中启动\"></a>下载war包放到tomcat中启动</h2><ul>\n<li>服务器 yum 安装速度太慢了，最终我选择了这种方式，本地下载好war包传到服务器上的tomcat容器下，然后启动</li>\n<li>下载地址：<a href=\"http://mirrors.jenkins.io/war-stable/latest/jenkins.war\" target=\"_blank\" rel=\"noopener\">http://mirrors.jenkins.io/war-stable/latest/jenkins.war</a></li>\n</ul>\n<h1 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h1><ul>\n<li>在浏览器中输入url打开jenkins的后台控制页面<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.00.jpeg\" alt=\"初始化界面\"></li>\n<li>初始化成功后会自动生成一个管理员密码放到指定位置，根据页面提示复制密码粘贴到输入框就可以登录了<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.01.jpeg\" alt=\"初始登录界面\"></li>\n<li>登录成功后回让你选择插件的安装，可以选择建议的安装也可以自己进行选择，不清楚的话可以使用建议的安装<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.02.jpeg\" alt=\"初始登录界面\"></li>\n<li>由于建议安装的插件比较多，安装的过程有点慢，多等待一会<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.06.jpeg\" alt=\"初始登录界面\"></li>\n<li>安装的过程也可能因为网络等一些原因安装会失败，现在可以无视它，点击Continue，后面再进行手动的安装<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.30.jpeg\" alt=\"安装完成\"></li>\n<li>安装完成后最好新创建一个管理员账户代替之前的临时自动生成的密码账户<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.31.jpeg\" alt=\"创建新的管理员账户\"></li>\n<li>初始化完成，进入后台管理界面<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.32.jpeg\" alt=\"初始化完成\"><br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.322.jpeg\" alt=\"后台管理界面\"></li>\n</ul>\n<h1 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h1><ul>\n<li>之前初始化的时候，有些插件安装失败，可以在用到的时候来手动修复它，没用到的话就可以暂且不理它，不影响jenkins的使用</li>\n<li>点击左侧边栏的“系统管理”，就可以看了插件安装的一些错误信息<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.40.jpeg\" alt=\"插件错误信息\"></li>\n<li>在“系统管理”中往下拉,找到“管理插件”点击进去就可以查看和管理所有的插件，点击“可选插件”显示所有jenkins支持的插件，在右上角的“过滤”输入框中，输入需要安装的插件名就可以筛选查找到想要的插件<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.54.jpeg\" alt=\"查找插件\"></li>\n<li>选中要安装的插件输入框，点击安装就可以在线安装需要的插件，当然由于网络的原因也可能再次安装错误，或者安装的比较慢。我们可以点击插件名进入插件的主页，里面有该插件的详细信息并能下载hpi文件进行手动安装<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2011.58.jpeg\" alt=\"插件详情\"></li>\n<li>在“管理插件”的页面中点击高级选项，我们可以在下面找到“上传插件”，上传下载好的插件，点击“上传”，系统就会自动上传安装该插件。<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2012.00.jpeg\" alt=\"上传插件\"></li>\n</ul>\n<h1 id=\"gitlab的配置\"><a href=\"#gitlab的配置\" class=\"headerlink\" title=\"gitlab的配置\"></a>gitlab的配置</h1><ul>\n<li>集成gitlab，让jenkins能够直接读取修改gitlab中的代码，方便项目的构建</li>\n<li>安装gitlab-plugin</li>\n<li>在“系统管理” -&gt; “系统设置“ -&gt; “Gitlab” 中配置对应的gitlab信息</li>\n<li>点击“Test Connection”测试下配置是否成功<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2012.28.jpeg\" alt=\"Gitlab配置\"><br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2012.27.jpeg\" alt=\"Add Gitlab Credentials\"><br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2012.29.jpeg\" alt=\"Gitlab API token\"></li>\n</ul>\n<h1 id=\"Publish-Over-SSH\"><a href=\"#Publish-Over-SSH\" class=\"headerlink\" title=\"Publish Over SSH\"></a>Publish Over SSH</h1><ul>\n<li>通过ssh连接远程服务器，并能执行脚本部署项目</li>\n<li>安装publish-over-ssh</li>\n<li>在“系统管理” -&gt; “系统设置“ -&gt; “Publish over SSH” 中配置对应的ssh信息</li>\n<li>Key中填登录远程服务器的密码(<a href=\"https://www.google.com.hk/search?client=safari&amp;rls=en&amp;q=ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95&amp;ie=UTF-8&amp;oe=UTF-8&amp;gws_rd=cr,ssl\" target=\"_blank\" rel=\"noopener\">ssh免密码登录</a>)</li>\n<li>点击”SSH Servers”后的“增加”按钮，新增一个远程服务器</li>\n<li>点开“高级…”按钮，能进一步的配置端口等信息。</li>\n<li>配置为Server信息后，点击”Test Configuration”按钮测试是否能够连接成功。<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2014.21.jpeg\" alt=\"ssh配置\"></li>\n</ul>\n<h1 id=\"监测代码变动自动部署\"><a href=\"#监测代码变动自动部署\" class=\"headerlink\" title=\"监测代码变动自动部署\"></a>监测代码变动自动部署</h1><ul>\n<li>点击左侧边栏的“新建”按钮，新建一个任务。</li>\n<li>填写项目的名称，并选择一种构建的方式，此时我们选择第一个，构建一个自由风格的软件项目，然后点击“OK”按钮创建任务，并进行详细的配置<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2014.28.jpeg\" alt=\"新建任务\"></li>\n<li>默认设置里填写项目名和描述，并选择之前配置好的要连接的gitlab<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2014.32.jpeg\" alt=\"默认配置\"></li>\n<li>配置源码，填写要构建项目的源码仓库地址，并指定要构建的分支<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2014.30.jpeg\" alt=\"配置源码\"></li>\n<li>配置触发器，选择触发构建的方式，可以通过hook，根据jenkins提供的地址，放到gitlab中的hook配置中，就会自动触发构建。此时我们选择的是定时检测项目变动，如果检测到分支有新的变动就触发构建，如果感觉一分钟时间太频繁的话，可以自己设置时间频率。<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2014.34.jpeg\" alt=\"构建触发器\"></li>\n<li>配置构建，构建选用的是“Invoke top-level Maven target”,填写对应的maven命令，就会自动执行maven命令进行侯建</li>\n<li>配置构建后操作， 该行为会在构建完成后执行，我们选用的是“Send build artifacts over SSH”的方式，把构建完成的jar包发送到远程服务器上用ssh命令执行启动，此时jenkins所有机器的默认路径是任务所在的目录，远程机器的默认路径是之前publish-over-ssh中指定的文件地址。Source files指定要传送到远程服务器上的文件，remote directory指定的是传送到远程服务器上的文件地址，Remove prefix是值要去除的文件目录，不然传送到远程服务器也会带有该目录层级结构的。exec Command里输入的是在远程服务器上要执行的指令。<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2014.39.jpeg\" alt=\"构建部署配置\"></li>\n<li>项目构建后会有构建历史，点击进去，选择“Console Output”就可以查看构建过程中的执行记录</li>\n</ul>\n<h1 id=\"项目回滚\"><a href=\"#项目回滚\" class=\"headerlink\" title=\"项目回滚\"></a>项目回滚</h1><ul>\n<li>上面虽然实现了项目的自动部署，但是有时部署失败的时候我们需要回滚到指定版本的构建，这样才能更灵活的进行项目的构建部署。我们可以选择“参数化的构建过程”进行传递不同的参数来选择是进行新的构建还是回滚</li>\n<li>如果要在实现回滚，一定要在构建后将，构建完成的文件进行存档，方便以后回滚的时候使用<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2015.27.jpeg\" alt=\"构建后存档\"></li>\n<li>使用参数化构建过程，让后面的脚步可以根据不同的变量执行不同的操作。添加“Choice”参数配置不同的选项，让选择发布还是回滚，添加“String Parameter”参数来传递要回滚的版本号。<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2015.28.jpeg\" alt=\"参数和构建过程\"></li>\n<li>构建选择“Execute Shell”的方式，自己根据变量，自定义构建的脚本，此时如果是发布安装maven的构建过程进行新的构建，如果是回滚，知道历史构建后的文件，复制到当前构建结果目录。<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2015.29.jpeg\" alt=\"构建脚本\"></li>\n<li>点击构建，根据不同的参数选择发布还是回滚，回滚的时候填写要回滚到的历史版本号<br><img src=\"http://luobuxiadeyu.oss-cn-beijing.aliyuncs.com/2016-12-21%20at%2015.30.jpeg\" alt=\"构建页面\"></li>\n</ul>\n<p><br></p>"},{"title":"Docker Hello World","date":"2016-10-08T16:00:00.000Z","_content":"\n## 查看linux版本\n\n```sh\n$ lsb_release -a\nLSB Version:    :core-4.1-amd64:core-4.1-noarch\nDistributor ID: CentOS\nDescription:    CentOS Linux release 7.2.1511 (Core)\nRelease:    7.2.1511\nCodename:   Core\n```\n\n<!-- more -->   \n\n## Docker 环境准备\n\n* CentOS7 系统 CentOS-Extras 库中已带 Docker，可以直接安装\n\n### 安装\n\n```sh\n$ su root\n# yum install docker\n```\n\n### 启动\n\n```sh\n# service docker start\nRedirecting to /bin/systemctl start  docker.service\n```\n\n### 让它随系统启动自动加载\n\n```sh\n# service docker start\nRedirecting to /bin/systemctl start  docker.service\n# chkconfig docker on\n注意：正在将请求转发到“systemctl enable docker.service”。\nCreated symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.\n```\n\n## 镜像\n\n### 获取镜像\n```sh\n# docker pull ubuntu:12.04\nTrying to pull repository docker.io/library/ubuntu ...\n12.04: Pulling from docker.io/library/ubuntu\n36cef014d5d4: Pull complete\n0d99ad4de1d2: Pull complete\n3e32dbf1ab94: Pull complete\n44710c456ffc: Pull complete\n56e70ac3b314: Pull complete\nDigest: sha256:0c25aa67baaff2b895882ce1e7d25efeeb15d0f38df6c099e23f481641cd6cab\nStatus: Downloaded newer image for docker.io/ubuntu:12.04\n```\n\n### 列出本地已有的镜像\n\n```sh\n# docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\ndocker.io/ubuntu    12.04               e216a057b1cb        12 days ago         103.6 MB\n```\n* REPOSITORY: 来自于哪个仓库\n* TAG: 镜像的标记（如果不指定具体的标记，则默认使用 latest 标记信息。）\n* IMAGE ID: 它的 ID 号（唯一）\n* CREATED: 创建时间\n* SIZE: 镜像大小\n\n### 创建镜像\n\n* 修改已有镜像\n\n```sh\n# docker run -t -i docker.io/ubuntu:12.04 /bin/bash\nroot@d7ac9b2f8cd7:/# apt-get update\nroot@d7ac9b2f8cd7:/# apt-get install nodejs\nroot@d7ac9b2f8cd7:/# node -v\nv0.6.12\nroot@d7ac9b2f8cd7:/# exit\nexit\n# docker commit -m \"add node evn\" -a \"haiyue\" d7ac9b2f8cd7 haiyue/nodejs:v1\nsha256:23c1c51f86414ae2ab3bf31f192537e6635c248044b61802c9e553ef4e46fbf9\n# docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nhaiyue/nodejs       v1                  23c1c51f8641        10 seconds ago      162.4 MB\ndocker.io/ubuntu    12.04               e216a057b1cb        12 days ago         103.6 MB\n```\n\n-m 来指定提交的说明信息；-a 可以指定更新的用户信息；之后是用来创建镜像的容器的 ID；最后指定目标镜像的仓库名和 tag 信息。创建成功后会返回这个镜像的 ID 信息。\n\n* 利用 Dockerfile 来创建镜像\n```sh\n# mkdir haiyue\n# cd haiyue/\n# This is a comment\n# vim Dockerfile\nFROM docker.io/ubuntu:12.04\nMAINTAINER haiyue\nRUN apt-get update\nRUN apt-get install nodejs\n# docker build -t=\"haiyue/nodejs:v2\" .\n# docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nhaiyue/nodejs       v2                  5190c35fc391        4 seconds ago       103.6 MB\nhaiyue/nodejs       v1                  23c1c51f8641        2 hours ago         162.4 MB\n```\n\n```\nDockerfile 基本的语法是\n#: 注释\nFROM: 告诉 Docker 使用哪个镜像作为基础\nMAINTAINER: 维护者的信息\nRUN: 指令会在创建中运行\n\nbuild 指令后 -t 标记来添加 tag，指定新的镜像的用户信息。 “.” 是 Dockerfile 所在的路径（当前目录），也可以替换为一个具体的 Dockerfile 的路径。\n\n*注意一个镜像不能超过 127 层\n```\n\n* 上传镜像(推送自己的镜像到仓库, Docker Hub)\n```sh\n# docker push haiyue/nodejs\nThe push refers to a repository [haiyue/nodejs] (len: 1)\nSending image list\nPushing repository haiyue/nodejs (2 tags)\n```\n\n### 存出和载入镜像\n\n* 存出镜像\n\n```sh\n# docker save -o nodejs_v1.tar haiyue/nodejs:v1\n```\n\n* 载入镜像\n\n```sh\n# docker load < nodejs_v1.tar\n```\n\n### 移除\n\n```sh\n# docker rmi haiyue/nodejs:v2\nUntagged: haiyue/nodejs:v2\nDeleted: sha256:5190c35fc391b6e9b3ed228a60a8342887fb555efcbb8a7bc351badfbb306550\nDeleted: sha256:01e2cd409ed3b15a1c34a2cd656772f51e472ec988b2011ec7d60de3a23e3111\nDeleted: sha256:daf78048142d52646c96e8ac025ea5d034270e15cab677838638767b00cb908e\n# docker rmi 23c1c51f8641\nFailed to remove image (23c1c51f8641): Error response from daemon: conflict: unable to delete 23c1c51f8641 (must be forced) - image is being used by stopped container 1586df1c5dc1\n# docker rmi -f 23c1c51f8641\nUntagged: haiyue/nodejs:v1\n```\n\n## 容器\n\n### 启动\n\n* 新建并启动\n```sh\n# docker run haiyue/nodejs:v1 /bin/echo 'Hello world'\nHello world\n# docker run -t -i haiyue/nodejs:v1 /bin/bash\nroot@66230fd659ff:/# node -v\nv0.6.12\nroot@66230fd659ff:/# ls\nbin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  selinux  srv  sys  tmp  usr  var\n```\n\n```\n-t 让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上 \n-i 则让容器的标准输入保持打开。\n\ndocker run 来创建容器时，Docker 在后台运行的标准操作包括：\n检查本地是否存在指定的镜像，不存在就从公有仓库下载\n利用镜像创建并启动一个容器\n分配一个文件系统，并在只读的镜像层外面挂载一层可读写层\n从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去\n从地址池配置一个 ip 地址给容器\n执行用户指定的应用程序\n执行完毕后容器被终止\n```\n\n* 启动已终止容器\n```\n利用 docker start 命令，直接将一个已经终止的容器启动运行。\ndocker restart 命令会将一个运行态的容器终止，然后再重新启动它。\n```\n\n### 守护态运行\n\n```sh\n# docker run -d haiyue/nodejs:v1 /bin/sh -c \"while true; do echo hello world; sleep 1; done\"\n90a4f5809293e21f8eacf1945668b9076e68ed500ac3d3018fc902d947f57248\n# docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES\n90a4f5809293        haiyue/nodejs:v1    \"/bin/sh -c 'while tr\"   9 seconds ago       Up 8 seconds                            determined_sammet\n# docker logs 90a4f5809293\nhello world\nhello world\nhello world\n```\n\n### 终止容器\n\n```sh\n# docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES\n90a4f5809293        haiyue/nodejs:v1    \"/bin/sh -c 'while tr\"   2 minutes ago       Up 2 minutes                            determined_sammet\n# docker stop 90a4f5809293\n90a4f5809293\n# docker ps -a\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                        PORTS               NAMES\n90a4f5809293        haiyue/nodejs:v1    \"/bin/sh -c 'while tr\"   3 minutes ago       Exited (137) 37 seconds ago                       determined_sammet\n```\n\n### 进入容器\n\n```sh\n# docker attach 90a4f5809293\nhello world\nhello world\nhello world\n```\n\n### 导出和导入容器\n\n* 导出容器\n\n```sh\n# docker export 90a4f5809293 > determined_sammet.tar\n# ls\ndetermined_sammet.tar\n```\n\n* 导入容器快照(容器快照文件中再导入为镜像)\n\n```sh\n# docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nhaiyue/nodejs       v1                  23c1c51f8641        3 hours ago         162.4 MB\ndocker.io/ubuntu    12.04               e216a057b1cb        12 days ago         103.6 MB\n# cat determined_sammet.tar | docker import - haiyue/nodejs:v2\nsha256:7b78999d774ccb41d474fb2c851323191967593053a26982c11157c7621e9202\n# docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nhaiyue/nodejs       v2                  7b78999d774c        3 seconds ago       142.1 MB\nhaiyue/nodejs       v1                  23c1c51f8641        3 hours ago         162.4 MB\ndocker.io/ubuntu    12.04               e216a057b1cb        12 days ago         103.6 MB\n```\n\n```\n用户既可以使用 docker load 来导入镜像存储文件到本地镜像库，也可以使用 docker import 来导入一个容器快照到本地镜像库。这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。\n```\n\n* 删除\n\n```\n可以使用 docker rm 来删除一个处于终止状态的容器。\n如果要删除一个运行中的容器，可以添加 -f 参数。Docker 会发送 SIGKILL 信号给容器。\n```\n\n<br>","source":"_posts/Docker/docker-hello-world.md","raw":"title: Docker Hello World\ndate: 2016-10-9  \ntags:\n    - original\ncategories:\n    - Docker\n---\n\n## 查看linux版本\n\n```sh\n$ lsb_release -a\nLSB Version:    :core-4.1-amd64:core-4.1-noarch\nDistributor ID: CentOS\nDescription:    CentOS Linux release 7.2.1511 (Core)\nRelease:    7.2.1511\nCodename:   Core\n```\n\n<!-- more -->   \n\n## Docker 环境准备\n\n* CentOS7 系统 CentOS-Extras 库中已带 Docker，可以直接安装\n\n### 安装\n\n```sh\n$ su root\n# yum install docker\n```\n\n### 启动\n\n```sh\n# service docker start\nRedirecting to /bin/systemctl start  docker.service\n```\n\n### 让它随系统启动自动加载\n\n```sh\n# service docker start\nRedirecting to /bin/systemctl start  docker.service\n# chkconfig docker on\n注意：正在将请求转发到“systemctl enable docker.service”。\nCreated symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.\n```\n\n## 镜像\n\n### 获取镜像\n```sh\n# docker pull ubuntu:12.04\nTrying to pull repository docker.io/library/ubuntu ...\n12.04: Pulling from docker.io/library/ubuntu\n36cef014d5d4: Pull complete\n0d99ad4de1d2: Pull complete\n3e32dbf1ab94: Pull complete\n44710c456ffc: Pull complete\n56e70ac3b314: Pull complete\nDigest: sha256:0c25aa67baaff2b895882ce1e7d25efeeb15d0f38df6c099e23f481641cd6cab\nStatus: Downloaded newer image for docker.io/ubuntu:12.04\n```\n\n### 列出本地已有的镜像\n\n```sh\n# docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\ndocker.io/ubuntu    12.04               e216a057b1cb        12 days ago         103.6 MB\n```\n* REPOSITORY: 来自于哪个仓库\n* TAG: 镜像的标记（如果不指定具体的标记，则默认使用 latest 标记信息。）\n* IMAGE ID: 它的 ID 号（唯一）\n* CREATED: 创建时间\n* SIZE: 镜像大小\n\n### 创建镜像\n\n* 修改已有镜像\n\n```sh\n# docker run -t -i docker.io/ubuntu:12.04 /bin/bash\nroot@d7ac9b2f8cd7:/# apt-get update\nroot@d7ac9b2f8cd7:/# apt-get install nodejs\nroot@d7ac9b2f8cd7:/# node -v\nv0.6.12\nroot@d7ac9b2f8cd7:/# exit\nexit\n# docker commit -m \"add node evn\" -a \"haiyue\" d7ac9b2f8cd7 haiyue/nodejs:v1\nsha256:23c1c51f86414ae2ab3bf31f192537e6635c248044b61802c9e553ef4e46fbf9\n# docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nhaiyue/nodejs       v1                  23c1c51f8641        10 seconds ago      162.4 MB\ndocker.io/ubuntu    12.04               e216a057b1cb        12 days ago         103.6 MB\n```\n\n-m 来指定提交的说明信息；-a 可以指定更新的用户信息；之后是用来创建镜像的容器的 ID；最后指定目标镜像的仓库名和 tag 信息。创建成功后会返回这个镜像的 ID 信息。\n\n* 利用 Dockerfile 来创建镜像\n```sh\n# mkdir haiyue\n# cd haiyue/\n# This is a comment\n# vim Dockerfile\nFROM docker.io/ubuntu:12.04\nMAINTAINER haiyue\nRUN apt-get update\nRUN apt-get install nodejs\n# docker build -t=\"haiyue/nodejs:v2\" .\n# docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nhaiyue/nodejs       v2                  5190c35fc391        4 seconds ago       103.6 MB\nhaiyue/nodejs       v1                  23c1c51f8641        2 hours ago         162.4 MB\n```\n\n```\nDockerfile 基本的语法是\n#: 注释\nFROM: 告诉 Docker 使用哪个镜像作为基础\nMAINTAINER: 维护者的信息\nRUN: 指令会在创建中运行\n\nbuild 指令后 -t 标记来添加 tag，指定新的镜像的用户信息。 “.” 是 Dockerfile 所在的路径（当前目录），也可以替换为一个具体的 Dockerfile 的路径。\n\n*注意一个镜像不能超过 127 层\n```\n\n* 上传镜像(推送自己的镜像到仓库, Docker Hub)\n```sh\n# docker push haiyue/nodejs\nThe push refers to a repository [haiyue/nodejs] (len: 1)\nSending image list\nPushing repository haiyue/nodejs (2 tags)\n```\n\n### 存出和载入镜像\n\n* 存出镜像\n\n```sh\n# docker save -o nodejs_v1.tar haiyue/nodejs:v1\n```\n\n* 载入镜像\n\n```sh\n# docker load < nodejs_v1.tar\n```\n\n### 移除\n\n```sh\n# docker rmi haiyue/nodejs:v2\nUntagged: haiyue/nodejs:v2\nDeleted: sha256:5190c35fc391b6e9b3ed228a60a8342887fb555efcbb8a7bc351badfbb306550\nDeleted: sha256:01e2cd409ed3b15a1c34a2cd656772f51e472ec988b2011ec7d60de3a23e3111\nDeleted: sha256:daf78048142d52646c96e8ac025ea5d034270e15cab677838638767b00cb908e\n# docker rmi 23c1c51f8641\nFailed to remove image (23c1c51f8641): Error response from daemon: conflict: unable to delete 23c1c51f8641 (must be forced) - image is being used by stopped container 1586df1c5dc1\n# docker rmi -f 23c1c51f8641\nUntagged: haiyue/nodejs:v1\n```\n\n## 容器\n\n### 启动\n\n* 新建并启动\n```sh\n# docker run haiyue/nodejs:v1 /bin/echo 'Hello world'\nHello world\n# docker run -t -i haiyue/nodejs:v1 /bin/bash\nroot@66230fd659ff:/# node -v\nv0.6.12\nroot@66230fd659ff:/# ls\nbin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  selinux  srv  sys  tmp  usr  var\n```\n\n```\n-t 让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上 \n-i 则让容器的标准输入保持打开。\n\ndocker run 来创建容器时，Docker 在后台运行的标准操作包括：\n检查本地是否存在指定的镜像，不存在就从公有仓库下载\n利用镜像创建并启动一个容器\n分配一个文件系统，并在只读的镜像层外面挂载一层可读写层\n从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去\n从地址池配置一个 ip 地址给容器\n执行用户指定的应用程序\n执行完毕后容器被终止\n```\n\n* 启动已终止容器\n```\n利用 docker start 命令，直接将一个已经终止的容器启动运行。\ndocker restart 命令会将一个运行态的容器终止，然后再重新启动它。\n```\n\n### 守护态运行\n\n```sh\n# docker run -d haiyue/nodejs:v1 /bin/sh -c \"while true; do echo hello world; sleep 1; done\"\n90a4f5809293e21f8eacf1945668b9076e68ed500ac3d3018fc902d947f57248\n# docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES\n90a4f5809293        haiyue/nodejs:v1    \"/bin/sh -c 'while tr\"   9 seconds ago       Up 8 seconds                            determined_sammet\n# docker logs 90a4f5809293\nhello world\nhello world\nhello world\n```\n\n### 终止容器\n\n```sh\n# docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES\n90a4f5809293        haiyue/nodejs:v1    \"/bin/sh -c 'while tr\"   2 minutes ago       Up 2 minutes                            determined_sammet\n# docker stop 90a4f5809293\n90a4f5809293\n# docker ps -a\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                        PORTS               NAMES\n90a4f5809293        haiyue/nodejs:v1    \"/bin/sh -c 'while tr\"   3 minutes ago       Exited (137) 37 seconds ago                       determined_sammet\n```\n\n### 进入容器\n\n```sh\n# docker attach 90a4f5809293\nhello world\nhello world\nhello world\n```\n\n### 导出和导入容器\n\n* 导出容器\n\n```sh\n# docker export 90a4f5809293 > determined_sammet.tar\n# ls\ndetermined_sammet.tar\n```\n\n* 导入容器快照(容器快照文件中再导入为镜像)\n\n```sh\n# docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nhaiyue/nodejs       v1                  23c1c51f8641        3 hours ago         162.4 MB\ndocker.io/ubuntu    12.04               e216a057b1cb        12 days ago         103.6 MB\n# cat determined_sammet.tar | docker import - haiyue/nodejs:v2\nsha256:7b78999d774ccb41d474fb2c851323191967593053a26982c11157c7621e9202\n# docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nhaiyue/nodejs       v2                  7b78999d774c        3 seconds ago       142.1 MB\nhaiyue/nodejs       v1                  23c1c51f8641        3 hours ago         162.4 MB\ndocker.io/ubuntu    12.04               e216a057b1cb        12 days ago         103.6 MB\n```\n\n```\n用户既可以使用 docker load 来导入镜像存储文件到本地镜像库，也可以使用 docker import 来导入一个容器快照到本地镜像库。这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。\n```\n\n* 删除\n\n```\n可以使用 docker rm 来删除一个处于终止状态的容器。\n如果要删除一个运行中的容器，可以添加 -f 参数。Docker 会发送 SIGKILL 信号给容器。\n```\n\n<br>","slug":"Docker/docker-hello-world","published":1,"updated":"2018-04-05T11:32:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfoy71290009acie9e9i0241","content":"<h2 id=\"查看linux版本\"><a href=\"#查看linux版本\" class=\"headerlink\" title=\"查看linux版本\"></a>查看linux版本</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lsb_release -a</span><br><span class=\"line\">LSB Version:    :core-4.1-amd64:core-4.1-noarch</span><br><span class=\"line\">Distributor ID: CentOS</span><br><span class=\"line\">Description:    CentOS Linux release 7.2.1511 (Core)</span><br><span class=\"line\">Release:    7.2.1511</span><br><span class=\"line\">Codename:   Core</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>   \n<h2 id=\"Docker-环境准备\"><a href=\"#Docker-环境准备\" class=\"headerlink\" title=\"Docker 环境准备\"></a>Docker 环境准备</h2><ul>\n<li>CentOS7 系统 CentOS-Extras 库中已带 Docker，可以直接安装</li>\n</ul>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ su root</span><br><span class=\"line\"><span class=\"comment\"># yum install docker</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># service docker start</span></span><br><span class=\"line\">Redirecting to /bin/systemctl start  docker.service</span><br></pre></td></tr></table></figure>\n<h3 id=\"让它随系统启动自动加载\"><a href=\"#让它随系统启动自动加载\" class=\"headerlink\" title=\"让它随系统启动自动加载\"></a>让它随系统启动自动加载</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># service docker start</span></span><br><span class=\"line\">Redirecting to /bin/systemctl start  docker.service</span><br><span class=\"line\"><span class=\"comment\"># chkconfig docker on</span></span><br><span class=\"line\">注意：正在将请求转发到“systemctl <span class=\"built_in\">enable</span> docker.service”。</span><br><span class=\"line\">Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</span><br></pre></td></tr></table></figure>\n<h2 id=\"镜像\"><a href=\"#镜像\" class=\"headerlink\" title=\"镜像\"></a>镜像</h2><h3 id=\"获取镜像\"><a href=\"#获取镜像\" class=\"headerlink\" title=\"获取镜像\"></a>获取镜像</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker pull ubuntu:12.04</span></span><br><span class=\"line\">Trying to pull repository docker.io/library/ubuntu ...</span><br><span class=\"line\">12.04: Pulling from docker.io/library/ubuntu</span><br><span class=\"line\">36cef014d5d4: Pull complete</span><br><span class=\"line\">0d99ad4de1d2: Pull complete</span><br><span class=\"line\">3e32dbf1ab94: Pull complete</span><br><span class=\"line\">44710c456ffc: Pull complete</span><br><span class=\"line\">56e70ac3b314: Pull complete</span><br><span class=\"line\">Digest: sha256:0c25aa67baaff2b895882ce1e7d25efeeb15d0f38df6c099e23f481641cd6cab</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> docker.io/ubuntu:12.04</span><br></pre></td></tr></table></figure>\n<h3 id=\"列出本地已有的镜像\"><a href=\"#列出本地已有的镜像\" class=\"headerlink\" title=\"列出本地已有的镜像\"></a>列出本地已有的镜像</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker images</span></span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">docker.io/ubuntu    12.04               e216a057b1cb        12 days ago         103.6 MB</span><br></pre></td></tr></table></figure>\n<ul>\n<li>REPOSITORY: 来自于哪个仓库</li>\n<li>TAG: 镜像的标记（如果不指定具体的标记，则默认使用 latest 标记信息。）</li>\n<li>IMAGE ID: 它的 ID 号（唯一）</li>\n<li>CREATED: 创建时间</li>\n<li>SIZE: 镜像大小</li>\n</ul>\n<h3 id=\"创建镜像\"><a href=\"#创建镜像\" class=\"headerlink\" title=\"创建镜像\"></a>创建镜像</h3><ul>\n<li>修改已有镜像</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker run -t -i docker.io/ubuntu:12.04 /bin/bash</span></span><br><span class=\"line\">root@d7ac9b2f8cd7:/<span class=\"comment\"># apt-get update</span></span><br><span class=\"line\">root@d7ac9b2f8cd7:/<span class=\"comment\"># apt-get install nodejs</span></span><br><span class=\"line\">root@d7ac9b2f8cd7:/<span class=\"comment\"># node -v</span></span><br><span class=\"line\">v0.6.12</span><br><span class=\"line\">root@d7ac9b2f8cd7:/<span class=\"comment\"># exit</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br><span class=\"line\"><span class=\"comment\"># docker commit -m \"add node evn\" -a \"haiyue\" d7ac9b2f8cd7 haiyue/nodejs:v1</span></span><br><span class=\"line\">sha256:23c1c51f86414ae2ab3bf31f192537e6635c248044b61802c9e553ef4e46fbf9</span><br><span class=\"line\"><span class=\"comment\"># docker images</span></span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">haiyue/nodejs       v1                  23c1c51f8641        10 seconds ago      162.4 MB</span><br><span class=\"line\">docker.io/ubuntu    12.04               e216a057b1cb        12 days ago         103.6 MB</span><br></pre></td></tr></table></figure>\n<p>-m 来指定提交的说明信息；-a 可以指定更新的用户信息；之后是用来创建镜像的容器的 ID；最后指定目标镜像的仓库名和 tag 信息。创建成功后会返回这个镜像的 ID 信息。</p>\n<ul>\n<li>利用 Dockerfile 来创建镜像<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># mkdir haiyue</span></span><br><span class=\"line\"><span class=\"comment\"># cd haiyue/</span></span><br><span class=\"line\"><span class=\"comment\"># This is a comment</span></span><br><span class=\"line\"><span class=\"comment\"># vim Dockerfile</span></span><br><span class=\"line\">FROM docker.io/ubuntu:12.04</span><br><span class=\"line\">MAINTAINER haiyue</span><br><span class=\"line\">RUN apt-get update</span><br><span class=\"line\">RUN apt-get install nodejs</span><br><span class=\"line\"><span class=\"comment\"># docker build -t=\"haiyue/nodejs:v2\" .</span></span><br><span class=\"line\"><span class=\"comment\"># docker images</span></span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">haiyue/nodejs       v2                  5190c35fc391        4 seconds ago       103.6 MB</span><br><span class=\"line\">haiyue/nodejs       v1                  23c1c51f8641        2 hours ago         162.4 MB</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dockerfile 基本的语法是</span><br><span class=\"line\">#: 注释</span><br><span class=\"line\">FROM: 告诉 Docker 使用哪个镜像作为基础</span><br><span class=\"line\">MAINTAINER: 维护者的信息</span><br><span class=\"line\">RUN: 指令会在创建中运行</span><br><span class=\"line\"></span><br><span class=\"line\">build 指令后 -t 标记来添加 tag，指定新的镜像的用户信息。 “.” 是 Dockerfile 所在的路径（当前目录），也可以替换为一个具体的 Dockerfile 的路径。</span><br><span class=\"line\"></span><br><span class=\"line\">*注意一个镜像不能超过 127 层</span><br></pre></td></tr></table></figure>\n<ul>\n<li>上传镜像(推送自己的镜像到仓库, Docker Hub)<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker push haiyue/nodejs</span></span><br><span class=\"line\">The push refers to a repository [haiyue/nodejs] (len: 1)</span><br><span class=\"line\">Sending image list</span><br><span class=\"line\">Pushing repository haiyue/nodejs (2 tags)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"存出和载入镜像\"><a href=\"#存出和载入镜像\" class=\"headerlink\" title=\"存出和载入镜像\"></a>存出和载入镜像</h3><ul>\n<li>存出镜像</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker save -o nodejs_v1.tar haiyue/nodejs:v1</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>载入镜像</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker load &lt; nodejs_v1.tar</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"移除\"><a href=\"#移除\" class=\"headerlink\" title=\"移除\"></a>移除</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker rmi haiyue/nodejs:v2</span></span><br><span class=\"line\">Untagged: haiyue/nodejs:v2</span><br><span class=\"line\">Deleted: sha256:5190c35fc391b6e9b3ed228a60a8342887fb555efcbb8a7bc351badfbb306550</span><br><span class=\"line\">Deleted: sha256:01e2cd409ed3b15a1c34a2cd656772f51e472ec988b2011ec7d60de3a23e3111</span><br><span class=\"line\">Deleted: sha256:daf78048142d52646c96e8ac025ea5d034270e15cab677838638767b00cb908e</span><br><span class=\"line\"><span class=\"comment\"># docker rmi 23c1c51f8641</span></span><br><span class=\"line\">Failed to remove image (23c1c51f8641): Error response from daemon: conflict: unable to delete 23c1c51f8641 (must be forced) - image is being used by stopped container 1586df1c5dc1</span><br><span class=\"line\"><span class=\"comment\"># docker rmi -f 23c1c51f8641</span></span><br><span class=\"line\">Untagged: haiyue/nodejs:v1</span><br></pre></td></tr></table></figure>\n<h2 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h2><h3 id=\"启动-1\"><a href=\"#启动-1\" class=\"headerlink\" title=\"启动\"></a>启动</h3><ul>\n<li>新建并启动<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker run haiyue/nodejs:v1 /bin/echo 'Hello world'</span></span><br><span class=\"line\">Hello world</span><br><span class=\"line\"><span class=\"comment\"># docker run -t -i haiyue/nodejs:v1 /bin/bash</span></span><br><span class=\"line\">root@66230fd659ff:/<span class=\"comment\"># node -v</span></span><br><span class=\"line\">v0.6.12</span><br><span class=\"line\">root@66230fd659ff:/<span class=\"comment\"># ls</span></span><br><span class=\"line\">bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  selinux  srv  sys  tmp  usr  var</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-t 让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上 </span><br><span class=\"line\">-i 则让容器的标准输入保持打开。</span><br><span class=\"line\"></span><br><span class=\"line\">docker run 来创建容器时，Docker 在后台运行的标准操作包括：</span><br><span class=\"line\">检查本地是否存在指定的镜像，不存在就从公有仓库下载</span><br><span class=\"line\">利用镜像创建并启动一个容器</span><br><span class=\"line\">分配一个文件系统，并在只读的镜像层外面挂载一层可读写层</span><br><span class=\"line\">从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去</span><br><span class=\"line\">从地址池配置一个 ip 地址给容器</span><br><span class=\"line\">执行用户指定的应用程序</span><br><span class=\"line\">执行完毕后容器被终止</span><br></pre></td></tr></table></figure>\n<ul>\n<li>启动已终止容器<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">利用 docker start 命令，直接将一个已经终止的容器启动运行。</span><br><span class=\"line\">docker restart 命令会将一个运行态的容器终止，然后再重新启动它。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"守护态运行\"><a href=\"#守护态运行\" class=\"headerlink\" title=\"守护态运行\"></a>守护态运行</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker run -d haiyue/nodejs:v1 /bin/sh -c \"while true; do echo hello world; sleep 1; done\"</span></span><br><span class=\"line\">90a4f5809293e21f8eacf1945668b9076e68ed500ac3d3018fc902d947f57248</span><br><span class=\"line\"><span class=\"comment\"># docker ps</span></span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\">90a4f5809293        haiyue/nodejs:v1    <span class=\"string\">\"/bin/sh -c 'while tr\"</span>   9 seconds ago       Up 8 seconds                            determined_sammet</span><br><span class=\"line\"><span class=\"comment\"># docker logs 90a4f5809293</span></span><br><span class=\"line\">hello world</span><br><span class=\"line\">hello world</span><br><span class=\"line\">hello world</span><br></pre></td></tr></table></figure>\n<h3 id=\"终止容器\"><a href=\"#终止容器\" class=\"headerlink\" title=\"终止容器\"></a>终止容器</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker ps</span></span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\">90a4f5809293        haiyue/nodejs:v1    <span class=\"string\">\"/bin/sh -c 'while tr\"</span>   2 minutes ago       Up 2 minutes                            determined_sammet</span><br><span class=\"line\"><span class=\"comment\"># docker stop 90a4f5809293</span></span><br><span class=\"line\">90a4f5809293</span><br><span class=\"line\"><span class=\"comment\"># docker ps -a</span></span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                        PORTS               NAMES</span><br><span class=\"line\">90a4f5809293        haiyue/nodejs:v1    <span class=\"string\">\"/bin/sh -c 'while tr\"</span>   3 minutes ago       Exited (137) 37 seconds ago                       determined_sammet</span><br></pre></td></tr></table></figure>\n<h3 id=\"进入容器\"><a href=\"#进入容器\" class=\"headerlink\" title=\"进入容器\"></a>进入容器</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker attach 90a4f5809293</span></span><br><span class=\"line\">hello world</span><br><span class=\"line\">hello world</span><br><span class=\"line\">hello world</span><br></pre></td></tr></table></figure>\n<h3 id=\"导出和导入容器\"><a href=\"#导出和导入容器\" class=\"headerlink\" title=\"导出和导入容器\"></a>导出和导入容器</h3><ul>\n<li>导出容器</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker export 90a4f5809293 &gt; determined_sammet.tar</span></span><br><span class=\"line\"><span class=\"comment\"># ls</span></span><br><span class=\"line\">determined_sammet.tar</span><br></pre></td></tr></table></figure>\n<ul>\n<li>导入容器快照(容器快照文件中再导入为镜像)</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker images</span></span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">haiyue/nodejs       v1                  23c1c51f8641        3 hours ago         162.4 MB</span><br><span class=\"line\">docker.io/ubuntu    12.04               e216a057b1cb        12 days ago         103.6 MB</span><br><span class=\"line\"><span class=\"comment\"># cat determined_sammet.tar | docker import - haiyue/nodejs:v2</span></span><br><span class=\"line\">sha256:7b78999d774ccb41d474fb2c851323191967593053a26982c11157c7621e9202</span><br><span class=\"line\"><span class=\"comment\"># docker images</span></span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">haiyue/nodejs       v2                  7b78999d774c        3 seconds ago       142.1 MB</span><br><span class=\"line\">haiyue/nodejs       v1                  23c1c51f8641        3 hours ago         162.4 MB</span><br><span class=\"line\">docker.io/ubuntu    12.04               e216a057b1cb        12 days ago         103.6 MB</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户既可以使用 docker load 来导入镜像存储文件到本地镜像库，也可以使用 docker import 来导入一个容器快照到本地镜像库。这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以使用 docker rm 来删除一个处于终止状态的容器。</span><br><span class=\"line\">如果要删除一个运行中的容器，可以添加 -f 参数。Docker 会发送 SIGKILL 信号给容器。</span><br></pre></td></tr></table></figure>\n<p><br></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"查看linux版本\"><a href=\"#查看linux版本\" class=\"headerlink\" title=\"查看linux版本\"></a>查看linux版本</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ lsb_release -a</span><br><span class=\"line\">LSB Version:    :core-4.1-amd64:core-4.1-noarch</span><br><span class=\"line\">Distributor ID: CentOS</span><br><span class=\"line\">Description:    CentOS Linux release 7.2.1511 (Core)</span><br><span class=\"line\">Release:    7.2.1511</span><br><span class=\"line\">Codename:   Core</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"Docker-环境准备\"><a href=\"#Docker-环境准备\" class=\"headerlink\" title=\"Docker 环境准备\"></a>Docker 环境准备</h2><ul>\n<li>CentOS7 系统 CentOS-Extras 库中已带 Docker，可以直接安装</li>\n</ul>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ su root</span><br><span class=\"line\"><span class=\"comment\"># yum install docker</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># service docker start</span></span><br><span class=\"line\">Redirecting to /bin/systemctl start  docker.service</span><br></pre></td></tr></table></figure>\n<h3 id=\"让它随系统启动自动加载\"><a href=\"#让它随系统启动自动加载\" class=\"headerlink\" title=\"让它随系统启动自动加载\"></a>让它随系统启动自动加载</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># service docker start</span></span><br><span class=\"line\">Redirecting to /bin/systemctl start  docker.service</span><br><span class=\"line\"><span class=\"comment\"># chkconfig docker on</span></span><br><span class=\"line\">注意：正在将请求转发到“systemctl <span class=\"built_in\">enable</span> docker.service”。</span><br><span class=\"line\">Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</span><br></pre></td></tr></table></figure>\n<h2 id=\"镜像\"><a href=\"#镜像\" class=\"headerlink\" title=\"镜像\"></a>镜像</h2><h3 id=\"获取镜像\"><a href=\"#获取镜像\" class=\"headerlink\" title=\"获取镜像\"></a>获取镜像</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker pull ubuntu:12.04</span></span><br><span class=\"line\">Trying to pull repository docker.io/library/ubuntu ...</span><br><span class=\"line\">12.04: Pulling from docker.io/library/ubuntu</span><br><span class=\"line\">36cef014d5d4: Pull complete</span><br><span class=\"line\">0d99ad4de1d2: Pull complete</span><br><span class=\"line\">3e32dbf1ab94: Pull complete</span><br><span class=\"line\">44710c456ffc: Pull complete</span><br><span class=\"line\">56e70ac3b314: Pull complete</span><br><span class=\"line\">Digest: sha256:0c25aa67baaff2b895882ce1e7d25efeeb15d0f38df6c099e23f481641cd6cab</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> docker.io/ubuntu:12.04</span><br></pre></td></tr></table></figure>\n<h3 id=\"列出本地已有的镜像\"><a href=\"#列出本地已有的镜像\" class=\"headerlink\" title=\"列出本地已有的镜像\"></a>列出本地已有的镜像</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker images</span></span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">docker.io/ubuntu    12.04               e216a057b1cb        12 days ago         103.6 MB</span><br></pre></td></tr></table></figure>\n<ul>\n<li>REPOSITORY: 来自于哪个仓库</li>\n<li>TAG: 镜像的标记（如果不指定具体的标记，则默认使用 latest 标记信息。）</li>\n<li>IMAGE ID: 它的 ID 号（唯一）</li>\n<li>CREATED: 创建时间</li>\n<li>SIZE: 镜像大小</li>\n</ul>\n<h3 id=\"创建镜像\"><a href=\"#创建镜像\" class=\"headerlink\" title=\"创建镜像\"></a>创建镜像</h3><ul>\n<li>修改已有镜像</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker run -t -i docker.io/ubuntu:12.04 /bin/bash</span></span><br><span class=\"line\">root@d7ac9b2f8cd7:/<span class=\"comment\"># apt-get update</span></span><br><span class=\"line\">root@d7ac9b2f8cd7:/<span class=\"comment\"># apt-get install nodejs</span></span><br><span class=\"line\">root@d7ac9b2f8cd7:/<span class=\"comment\"># node -v</span></span><br><span class=\"line\">v0.6.12</span><br><span class=\"line\">root@d7ac9b2f8cd7:/<span class=\"comment\"># exit</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br><span class=\"line\"><span class=\"comment\"># docker commit -m \"add node evn\" -a \"haiyue\" d7ac9b2f8cd7 haiyue/nodejs:v1</span></span><br><span class=\"line\">sha256:23c1c51f86414ae2ab3bf31f192537e6635c248044b61802c9e553ef4e46fbf9</span><br><span class=\"line\"><span class=\"comment\"># docker images</span></span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">haiyue/nodejs       v1                  23c1c51f8641        10 seconds ago      162.4 MB</span><br><span class=\"line\">docker.io/ubuntu    12.04               e216a057b1cb        12 days ago         103.6 MB</span><br></pre></td></tr></table></figure>\n<p>-m 来指定提交的说明信息；-a 可以指定更新的用户信息；之后是用来创建镜像的容器的 ID；最后指定目标镜像的仓库名和 tag 信息。创建成功后会返回这个镜像的 ID 信息。</p>\n<ul>\n<li>利用 Dockerfile 来创建镜像<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># mkdir haiyue</span></span><br><span class=\"line\"><span class=\"comment\"># cd haiyue/</span></span><br><span class=\"line\"><span class=\"comment\"># This is a comment</span></span><br><span class=\"line\"><span class=\"comment\"># vim Dockerfile</span></span><br><span class=\"line\">FROM docker.io/ubuntu:12.04</span><br><span class=\"line\">MAINTAINER haiyue</span><br><span class=\"line\">RUN apt-get update</span><br><span class=\"line\">RUN apt-get install nodejs</span><br><span class=\"line\"><span class=\"comment\"># docker build -t=\"haiyue/nodejs:v2\" .</span></span><br><span class=\"line\"><span class=\"comment\"># docker images</span></span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">haiyue/nodejs       v2                  5190c35fc391        4 seconds ago       103.6 MB</span><br><span class=\"line\">haiyue/nodejs       v1                  23c1c51f8641        2 hours ago         162.4 MB</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dockerfile 基本的语法是</span><br><span class=\"line\">#: 注释</span><br><span class=\"line\">FROM: 告诉 Docker 使用哪个镜像作为基础</span><br><span class=\"line\">MAINTAINER: 维护者的信息</span><br><span class=\"line\">RUN: 指令会在创建中运行</span><br><span class=\"line\"></span><br><span class=\"line\">build 指令后 -t 标记来添加 tag，指定新的镜像的用户信息。 “.” 是 Dockerfile 所在的路径（当前目录），也可以替换为一个具体的 Dockerfile 的路径。</span><br><span class=\"line\"></span><br><span class=\"line\">*注意一个镜像不能超过 127 层</span><br></pre></td></tr></table></figure>\n<ul>\n<li>上传镜像(推送自己的镜像到仓库, Docker Hub)<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker push haiyue/nodejs</span></span><br><span class=\"line\">The push refers to a repository [haiyue/nodejs] (len: 1)</span><br><span class=\"line\">Sending image list</span><br><span class=\"line\">Pushing repository haiyue/nodejs (2 tags)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"存出和载入镜像\"><a href=\"#存出和载入镜像\" class=\"headerlink\" title=\"存出和载入镜像\"></a>存出和载入镜像</h3><ul>\n<li>存出镜像</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker save -o nodejs_v1.tar haiyue/nodejs:v1</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>载入镜像</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker load &lt; nodejs_v1.tar</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"移除\"><a href=\"#移除\" class=\"headerlink\" title=\"移除\"></a>移除</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker rmi haiyue/nodejs:v2</span></span><br><span class=\"line\">Untagged: haiyue/nodejs:v2</span><br><span class=\"line\">Deleted: sha256:5190c35fc391b6e9b3ed228a60a8342887fb555efcbb8a7bc351badfbb306550</span><br><span class=\"line\">Deleted: sha256:01e2cd409ed3b15a1c34a2cd656772f51e472ec988b2011ec7d60de3a23e3111</span><br><span class=\"line\">Deleted: sha256:daf78048142d52646c96e8ac025ea5d034270e15cab677838638767b00cb908e</span><br><span class=\"line\"><span class=\"comment\"># docker rmi 23c1c51f8641</span></span><br><span class=\"line\">Failed to remove image (23c1c51f8641): Error response from daemon: conflict: unable to delete 23c1c51f8641 (must be forced) - image is being used by stopped container 1586df1c5dc1</span><br><span class=\"line\"><span class=\"comment\"># docker rmi -f 23c1c51f8641</span></span><br><span class=\"line\">Untagged: haiyue/nodejs:v1</span><br></pre></td></tr></table></figure>\n<h2 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h2><h3 id=\"启动-1\"><a href=\"#启动-1\" class=\"headerlink\" title=\"启动\"></a>启动</h3><ul>\n<li>新建并启动<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker run haiyue/nodejs:v1 /bin/echo 'Hello world'</span></span><br><span class=\"line\">Hello world</span><br><span class=\"line\"><span class=\"comment\"># docker run -t -i haiyue/nodejs:v1 /bin/bash</span></span><br><span class=\"line\">root@66230fd659ff:/<span class=\"comment\"># node -v</span></span><br><span class=\"line\">v0.6.12</span><br><span class=\"line\">root@66230fd659ff:/<span class=\"comment\"># ls</span></span><br><span class=\"line\">bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  selinux  srv  sys  tmp  usr  var</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-t 让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上 </span><br><span class=\"line\">-i 则让容器的标准输入保持打开。</span><br><span class=\"line\"></span><br><span class=\"line\">docker run 来创建容器时，Docker 在后台运行的标准操作包括：</span><br><span class=\"line\">检查本地是否存在指定的镜像，不存在就从公有仓库下载</span><br><span class=\"line\">利用镜像创建并启动一个容器</span><br><span class=\"line\">分配一个文件系统，并在只读的镜像层外面挂载一层可读写层</span><br><span class=\"line\">从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去</span><br><span class=\"line\">从地址池配置一个 ip 地址给容器</span><br><span class=\"line\">执行用户指定的应用程序</span><br><span class=\"line\">执行完毕后容器被终止</span><br></pre></td></tr></table></figure>\n<ul>\n<li>启动已终止容器<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">利用 docker start 命令，直接将一个已经终止的容器启动运行。</span><br><span class=\"line\">docker restart 命令会将一个运行态的容器终止，然后再重新启动它。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"守护态运行\"><a href=\"#守护态运行\" class=\"headerlink\" title=\"守护态运行\"></a>守护态运行</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker run -d haiyue/nodejs:v1 /bin/sh -c \"while true; do echo hello world; sleep 1; done\"</span></span><br><span class=\"line\">90a4f5809293e21f8eacf1945668b9076e68ed500ac3d3018fc902d947f57248</span><br><span class=\"line\"><span class=\"comment\"># docker ps</span></span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\">90a4f5809293        haiyue/nodejs:v1    <span class=\"string\">\"/bin/sh -c 'while tr\"</span>   9 seconds ago       Up 8 seconds                            determined_sammet</span><br><span class=\"line\"><span class=\"comment\"># docker logs 90a4f5809293</span></span><br><span class=\"line\">hello world</span><br><span class=\"line\">hello world</span><br><span class=\"line\">hello world</span><br></pre></td></tr></table></figure>\n<h3 id=\"终止容器\"><a href=\"#终止容器\" class=\"headerlink\" title=\"终止容器\"></a>终止容器</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker ps</span></span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\">90a4f5809293        haiyue/nodejs:v1    <span class=\"string\">\"/bin/sh -c 'while tr\"</span>   2 minutes ago       Up 2 minutes                            determined_sammet</span><br><span class=\"line\"><span class=\"comment\"># docker stop 90a4f5809293</span></span><br><span class=\"line\">90a4f5809293</span><br><span class=\"line\"><span class=\"comment\"># docker ps -a</span></span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                        PORTS               NAMES</span><br><span class=\"line\">90a4f5809293        haiyue/nodejs:v1    <span class=\"string\">\"/bin/sh -c 'while tr\"</span>   3 minutes ago       Exited (137) 37 seconds ago                       determined_sammet</span><br></pre></td></tr></table></figure>\n<h3 id=\"进入容器\"><a href=\"#进入容器\" class=\"headerlink\" title=\"进入容器\"></a>进入容器</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker attach 90a4f5809293</span></span><br><span class=\"line\">hello world</span><br><span class=\"line\">hello world</span><br><span class=\"line\">hello world</span><br></pre></td></tr></table></figure>\n<h3 id=\"导出和导入容器\"><a href=\"#导出和导入容器\" class=\"headerlink\" title=\"导出和导入容器\"></a>导出和导入容器</h3><ul>\n<li>导出容器</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker export 90a4f5809293 &gt; determined_sammet.tar</span></span><br><span class=\"line\"><span class=\"comment\"># ls</span></span><br><span class=\"line\">determined_sammet.tar</span><br></pre></td></tr></table></figure>\n<ul>\n<li>导入容器快照(容器快照文件中再导入为镜像)</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker images</span></span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">haiyue/nodejs       v1                  23c1c51f8641        3 hours ago         162.4 MB</span><br><span class=\"line\">docker.io/ubuntu    12.04               e216a057b1cb        12 days ago         103.6 MB</span><br><span class=\"line\"><span class=\"comment\"># cat determined_sammet.tar | docker import - haiyue/nodejs:v2</span></span><br><span class=\"line\">sha256:7b78999d774ccb41d474fb2c851323191967593053a26982c11157c7621e9202</span><br><span class=\"line\"><span class=\"comment\"># docker images</span></span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">haiyue/nodejs       v2                  7b78999d774c        3 seconds ago       142.1 MB</span><br><span class=\"line\">haiyue/nodejs       v1                  23c1c51f8641        3 hours ago         162.4 MB</span><br><span class=\"line\">docker.io/ubuntu    12.04               e216a057b1cb        12 days ago         103.6 MB</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户既可以使用 docker load 来导入镜像存储文件到本地镜像库，也可以使用 docker import 来导入一个容器快照到本地镜像库。这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以使用 docker rm 来删除一个处于终止状态的容器。</span><br><span class=\"line\">如果要删除一个运行中的容器，可以添加 -f 参数。Docker 会发送 SIGKILL 信号给容器。</span><br></pre></td></tr></table></figure>\n<p><br></p>"},{"title":"深入浅出ES6笔记","date":"2016-02-17T16:00:00.000Z","_content":"\n# ES6 是什么\n\n* 编程语言 JavaScript 是 ECMAScript 的实现和扩展,由 ECMA(一个类似 W3C 的标准组织)参与进行标准化。   \n* ES4 饱受争议,当标准委员会最终停止开发 ES4 时,其成员同意发布一个相对谦和的 ES5 版本,随后继续制定一些更具实质性的新特性。这一明确的协商协议最终命 名为“Harmony”(ES6)。  \n* 2009 年发布的改进版本 ES5,引入了 Object.create()、Object.defineProperty()、getters 和 setters、严格模式以及 JSON 对象。  \n* 如果你想在 web 环境中使用这种新语法,同时需要支持 IE 和 Safari, 你可以使用 Babel 或 Google 的 Traceur 这些编译器来将你的 ES6 代码翻译为 Web 友好 的 ES5 代码。  \n\n<!-- more -->\n\n# 迭代器和 for-of 循环\n## 遍历数组中的元素\n\n* 20 年前 JavaScript 刚萌生时     \n\n        for (var index = 0; index < myArray.length; index++) { \n            console.log(myArray[index]);\n        }\n\n* ES5 正式发布后  \n\n        myArray.forEach(function (value) { \n            console.log(value);\n        });  \n\n    这段代码看起来更加简洁,但这种方法也有一个小缺陷:你不能使用 break 语句中 断循环,也不能使用 return 语句返回到外层函数。  \n\n* for-in 循环(千万别这样做, 是为普通对象设计的) \n\n        for (var index in myArray) {\n            console.log(myArray[index]);\n        }\n\n    在这段代码中,赋给index的值不是实际的数字,而是字符串“0”、“1”、“2”, 此时很可能在无意之间进行字符串算数计算,例如:“2” + 1 == “21”,这给 编码过程带来极大的不便。  \n    作用于数组的 for-in 循环体除了遍历数组元素外,还会遍历自定义属性。举个例子,如果你的数组中有一个可枚举属性 myArray.name,循环将额外执行 一次,遍历到名为“name”的索引。就连数组原型链上的属性都能被访问到。  \n    最让人震惊的是,在某些情况下,这段代码可能按照随机顺序遍历数组元素。  \n    简而言之,for-in 是为普通对象设计的,你可以遍历得到字符串类型的键,因此不适用于数组遍历。\n\n* ES6\n\n        for (var value of myArray) {\n            console.log(value);\n        }\n\n    for-in 循环用来遍历对象属性。  \n    for-of 循环用来遍历数据—例如数组中的值。\n\n## for-of 循环\n\n    for (var value of myArray) {\n      console.log(value);\n    }\n\n这是最简洁、最直接的遍历数组元素的语法  \n这个方法避开了 for-in 循环的所有缺陷  \n与 forEach()不同的是,它可以正确响应 break、continue 和 return 语句  \nfor-of 循环不仅支持数组,还支持大多数类数组对象,例如 DOM NodeList 对象。  \nfor-of 循环也支持字符串遍历,它将字符串视为一系列的 Unicode 字符来进行遍历  \n\n    var str = 'liuhaiming';\n    for(var chr of str) {\n      console.log(chr);\n    }\n\nfor-of 循环也支持Set 对象  \n\n    var uniqueWords = new Set(words);\n    for (var word of uniqueWords) {\n      console.log(word);\n    }\n\nfor-of 循环也支持Map对象  \n\n    for (var [key, value] of phoneBookMap) {\n      console.log(key + \"'s phone number is: \" + value);\n    }\n\nfor-of 循环不支持普通对象,但如果你想迭代一个对象的属性,你可以用 for-in 循 环(这也是它的本职工作)或内建的 Object.keys()方法:\n\n    // 向控制台输出对象的可枚举属性\n    for (var key of Object.keys(someObject)) {\n      console.log(key + \": \" + someObject[key]);\n    }\n\n\n\n<br>","source":"_posts/JavaScript/ES6-in-depth.md","raw":"title: 深入浅出ES6笔记  \ndate: 2016-2-18  \ntags:\n    - es6\n    - note\ncategories:\n    - JavaScript\n---\n\n# ES6 是什么\n\n* 编程语言 JavaScript 是 ECMAScript 的实现和扩展,由 ECMA(一个类似 W3C 的标准组织)参与进行标准化。   \n* ES4 饱受争议,当标准委员会最终停止开发 ES4 时,其成员同意发布一个相对谦和的 ES5 版本,随后继续制定一些更具实质性的新特性。这一明确的协商协议最终命 名为“Harmony”(ES6)。  \n* 2009 年发布的改进版本 ES5,引入了 Object.create()、Object.defineProperty()、getters 和 setters、严格模式以及 JSON 对象。  \n* 如果你想在 web 环境中使用这种新语法,同时需要支持 IE 和 Safari, 你可以使用 Babel 或 Google 的 Traceur 这些编译器来将你的 ES6 代码翻译为 Web 友好 的 ES5 代码。  \n\n<!-- more -->\n\n# 迭代器和 for-of 循环\n## 遍历数组中的元素\n\n* 20 年前 JavaScript 刚萌生时     \n\n        for (var index = 0; index < myArray.length; index++) { \n            console.log(myArray[index]);\n        }\n\n* ES5 正式发布后  \n\n        myArray.forEach(function (value) { \n            console.log(value);\n        });  \n\n    这段代码看起来更加简洁,但这种方法也有一个小缺陷:你不能使用 break 语句中 断循环,也不能使用 return 语句返回到外层函数。  \n\n* for-in 循环(千万别这样做, 是为普通对象设计的) \n\n        for (var index in myArray) {\n            console.log(myArray[index]);\n        }\n\n    在这段代码中,赋给index的值不是实际的数字,而是字符串“0”、“1”、“2”, 此时很可能在无意之间进行字符串算数计算,例如:“2” + 1 == “21”,这给 编码过程带来极大的不便。  \n    作用于数组的 for-in 循环体除了遍历数组元素外,还会遍历自定义属性。举个例子,如果你的数组中有一个可枚举属性 myArray.name,循环将额外执行 一次,遍历到名为“name”的索引。就连数组原型链上的属性都能被访问到。  \n    最让人震惊的是,在某些情况下,这段代码可能按照随机顺序遍历数组元素。  \n    简而言之,for-in 是为普通对象设计的,你可以遍历得到字符串类型的键,因此不适用于数组遍历。\n\n* ES6\n\n        for (var value of myArray) {\n            console.log(value);\n        }\n\n    for-in 循环用来遍历对象属性。  \n    for-of 循环用来遍历数据—例如数组中的值。\n\n## for-of 循环\n\n    for (var value of myArray) {\n      console.log(value);\n    }\n\n这是最简洁、最直接的遍历数组元素的语法  \n这个方法避开了 for-in 循环的所有缺陷  \n与 forEach()不同的是,它可以正确响应 break、continue 和 return 语句  \nfor-of 循环不仅支持数组,还支持大多数类数组对象,例如 DOM NodeList 对象。  \nfor-of 循环也支持字符串遍历,它将字符串视为一系列的 Unicode 字符来进行遍历  \n\n    var str = 'liuhaiming';\n    for(var chr of str) {\n      console.log(chr);\n    }\n\nfor-of 循环也支持Set 对象  \n\n    var uniqueWords = new Set(words);\n    for (var word of uniqueWords) {\n      console.log(word);\n    }\n\nfor-of 循环也支持Map对象  \n\n    for (var [key, value] of phoneBookMap) {\n      console.log(key + \"'s phone number is: \" + value);\n    }\n\nfor-of 循环不支持普通对象,但如果你想迭代一个对象的属性,你可以用 for-in 循 环(这也是它的本职工作)或内建的 Object.keys()方法:\n\n    // 向控制台输出对象的可枚举属性\n    for (var key of Object.keys(someObject)) {\n      console.log(key + \": \" + someObject[key]);\n    }\n\n\n\n<br>","slug":"JavaScript/ES6-in-depth","published":1,"updated":"2018-04-05T11:32:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfoy712c000daciegtmo3cxy","content":"<h1 id=\"ES6-是什么\"><a href=\"#ES6-是什么\" class=\"headerlink\" title=\"ES6 是什么\"></a>ES6 是什么</h1><ul>\n<li>编程语言 JavaScript 是 ECMAScript 的实现和扩展,由 ECMA(一个类似 W3C 的标准组织)参与进行标准化。   </li>\n<li>ES4 饱受争议,当标准委员会最终停止开发 ES4 时,其成员同意发布一个相对谦和的 ES5 版本,随后继续制定一些更具实质性的新特性。这一明确的协商协议最终命 名为“Harmony”(ES6)。  </li>\n<li>2009 年发布的改进版本 ES5,引入了 Object.create()、Object.defineProperty()、getters 和 setters、严格模式以及 JSON 对象。  </li>\n<li>如果你想在 web 环境中使用这种新语法,同时需要支持 IE 和 Safari, 你可以使用 Babel 或 Google 的 Traceur 这些编译器来将你的 ES6 代码翻译为 Web 友好 的 ES5 代码。  </li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"迭代器和-for-of-循环\"><a href=\"#迭代器和-for-of-循环\" class=\"headerlink\" title=\"迭代器和 for-of 循环\"></a>迭代器和 for-of 循环</h1><h2 id=\"遍历数组中的元素\"><a href=\"#遍历数组中的元素\" class=\"headerlink\" title=\"遍历数组中的元素\"></a>遍历数组中的元素</h2><ul>\n<li><p>20 年前 JavaScript 刚萌生时     </p>\n<pre><code>for (var index = 0; index &lt; myArray.length; index++) { \n    console.log(myArray[index]);\n}\n</code></pre></li>\n<li><p>ES5 正式发布后  </p>\n<pre><code>myArray.forEach(function (value) { \n    console.log(value);\n});  \n</code></pre><p>  这段代码看起来更加简洁,但这种方法也有一个小缺陷:你不能使用 break 语句中 断循环,也不能使用 return 语句返回到外层函数。  </p>\n</li>\n<li><p>for-in 循环(千万别这样做, 是为普通对象设计的) </p>\n<pre><code>for (var index in myArray) {\n    console.log(myArray[index]);\n}\n</code></pre><p>  在这段代码中,赋给index的值不是实际的数字,而是字符串“0”、“1”、“2”, 此时很可能在无意之间进行字符串算数计算,例如:“2” + 1 == “21”,这给 编码过程带来极大的不便。<br>  作用于数组的 for-in 循环体除了遍历数组元素外,还会遍历自定义属性。举个例子,如果你的数组中有一个可枚举属性 myArray.name,循环将额外执行 一次,遍历到名为“name”的索引。就连数组原型链上的属性都能被访问到。<br>  最让人震惊的是,在某些情况下,这段代码可能按照随机顺序遍历数组元素。<br>  简而言之,for-in 是为普通对象设计的,你可以遍历得到字符串类型的键,因此不适用于数组遍历。</p>\n</li>\n<li><p>ES6</p>\n<pre><code>for (var value of myArray) {\n    console.log(value);\n}\n</code></pre><p>  for-in 循环用来遍历对象属性。<br>  for-of 循环用来遍历数据—例如数组中的值。</p>\n</li>\n</ul>\n<h2 id=\"for-of-循环\"><a href=\"#for-of-循环\" class=\"headerlink\" title=\"for-of 循环\"></a>for-of 循环</h2><pre><code>for (var value of myArray) {\n  console.log(value);\n}\n</code></pre><p>这是最简洁、最直接的遍历数组元素的语法<br>这个方法避开了 for-in 循环的所有缺陷<br>与 forEach()不同的是,它可以正确响应 break、continue 和 return 语句<br>for-of 循环不仅支持数组,还支持大多数类数组对象,例如 DOM NodeList 对象。<br>for-of 循环也支持字符串遍历,它将字符串视为一系列的 Unicode 字符来进行遍历  </p>\n<pre><code>var str = &apos;liuhaiming&apos;;\nfor(var chr of str) {\n  console.log(chr);\n}\n</code></pre><p>for-of 循环也支持Set 对象  </p>\n<pre><code>var uniqueWords = new Set(words);\nfor (var word of uniqueWords) {\n  console.log(word);\n}\n</code></pre><p>for-of 循环也支持Map对象  </p>\n<pre><code>for (var [key, value] of phoneBookMap) {\n  console.log(key + &quot;&apos;s phone number is: &quot; + value);\n}\n</code></pre><p>for-of 循环不支持普通对象,但如果你想迭代一个对象的属性,你可以用 for-in 循 环(这也是它的本职工作)或内建的 Object.keys()方法:</p>\n<pre><code>// 向控制台输出对象的可枚举属性\nfor (var key of Object.keys(someObject)) {\n  console.log(key + &quot;: &quot; + someObject[key]);\n}\n</code></pre><p><br></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"ES6-是什么\"><a href=\"#ES6-是什么\" class=\"headerlink\" title=\"ES6 是什么\"></a>ES6 是什么</h1><ul>\n<li>编程语言 JavaScript 是 ECMAScript 的实现和扩展,由 ECMA(一个类似 W3C 的标准组织)参与进行标准化。   </li>\n<li>ES4 饱受争议,当标准委员会最终停止开发 ES4 时,其成员同意发布一个相对谦和的 ES5 版本,随后继续制定一些更具实质性的新特性。这一明确的协商协议最终命 名为“Harmony”(ES6)。  </li>\n<li>2009 年发布的改进版本 ES5,引入了 Object.create()、Object.defineProperty()、getters 和 setters、严格模式以及 JSON 对象。  </li>\n<li>如果你想在 web 环境中使用这种新语法,同时需要支持 IE 和 Safari, 你可以使用 Babel 或 Google 的 Traceur 这些编译器来将你的 ES6 代码翻译为 Web 友好 的 ES5 代码。  </li>\n</ul>","more":"<h1 id=\"迭代器和-for-of-循环\"><a href=\"#迭代器和-for-of-循环\" class=\"headerlink\" title=\"迭代器和 for-of 循环\"></a>迭代器和 for-of 循环</h1><h2 id=\"遍历数组中的元素\"><a href=\"#遍历数组中的元素\" class=\"headerlink\" title=\"遍历数组中的元素\"></a>遍历数组中的元素</h2><ul>\n<li><p>20 年前 JavaScript 刚萌生时     </p>\n<pre><code>for (var index = 0; index &lt; myArray.length; index++) { \n    console.log(myArray[index]);\n}\n</code></pre></li>\n<li><p>ES5 正式发布后  </p>\n<pre><code>myArray.forEach(function (value) { \n    console.log(value);\n});  \n</code></pre><p>  这段代码看起来更加简洁,但这种方法也有一个小缺陷:你不能使用 break 语句中 断循环,也不能使用 return 语句返回到外层函数。  </p>\n</li>\n<li><p>for-in 循环(千万别这样做, 是为普通对象设计的) </p>\n<pre><code>for (var index in myArray) {\n    console.log(myArray[index]);\n}\n</code></pre><p>  在这段代码中,赋给index的值不是实际的数字,而是字符串“0”、“1”、“2”, 此时很可能在无意之间进行字符串算数计算,例如:“2” + 1 == “21”,这给 编码过程带来极大的不便。<br>  作用于数组的 for-in 循环体除了遍历数组元素外,还会遍历自定义属性。举个例子,如果你的数组中有一个可枚举属性 myArray.name,循环将额外执行 一次,遍历到名为“name”的索引。就连数组原型链上的属性都能被访问到。<br>  最让人震惊的是,在某些情况下,这段代码可能按照随机顺序遍历数组元素。<br>  简而言之,for-in 是为普通对象设计的,你可以遍历得到字符串类型的键,因此不适用于数组遍历。</p>\n</li>\n<li><p>ES6</p>\n<pre><code>for (var value of myArray) {\n    console.log(value);\n}\n</code></pre><p>  for-in 循环用来遍历对象属性。<br>  for-of 循环用来遍历数据—例如数组中的值。</p>\n</li>\n</ul>\n<h2 id=\"for-of-循环\"><a href=\"#for-of-循环\" class=\"headerlink\" title=\"for-of 循环\"></a>for-of 循环</h2><pre><code>for (var value of myArray) {\n  console.log(value);\n}\n</code></pre><p>这是最简洁、最直接的遍历数组元素的语法<br>这个方法避开了 for-in 循环的所有缺陷<br>与 forEach()不同的是,它可以正确响应 break、continue 和 return 语句<br>for-of 循环不仅支持数组,还支持大多数类数组对象,例如 DOM NodeList 对象。<br>for-of 循环也支持字符串遍历,它将字符串视为一系列的 Unicode 字符来进行遍历  </p>\n<pre><code>var str = &apos;liuhaiming&apos;;\nfor(var chr of str) {\n  console.log(chr);\n}\n</code></pre><p>for-of 循环也支持Set 对象  </p>\n<pre><code>var uniqueWords = new Set(words);\nfor (var word of uniqueWords) {\n  console.log(word);\n}\n</code></pre><p>for-of 循环也支持Map对象  </p>\n<pre><code>for (var [key, value] of phoneBookMap) {\n  console.log(key + &quot;&apos;s phone number is: &quot; + value);\n}\n</code></pre><p>for-of 循环不支持普通对象,但如果你想迭代一个对象的属性,你可以用 for-in 循 环(这也是它的本职工作)或内建的 Object.keys()方法:</p>\n<pre><code>// 向控制台输出对象的可枚举属性\nfor (var key of Object.keys(someObject)) {\n  console.log(key + &quot;: &quot; + someObject[key]);\n}\n</code></pre><p><br></p>"},{"title":"List 进行 remove 操作时抛出 java.lang.UnsupportedOperationException 异常分析","date":"2016-05-12T16:00:00.000Z","_content":"\n今天将一个数组转换成 List 然后进行 remove 操作时却抛出 java.lang.UnsupportedOperationException 异常。\n\n```java\nString pattern = \" ^, v, m, n-music-name, $ \";\nString[] patternSplit = Utils.getStringTrimSplit(pattern, \",\");\n\n// 去除模式中的^和$标识\nList<String> natureList = Arrays.asList(patternSplit);\nif (\"^\".equals(natureList.get(0))) {\n    natureList.remove(0); // throw java.lang.UnsupportedOperationException\n}\nif (\"$\".equals(natureList.get(natureList.size() - 1))) {\n    natureList.remove(natureList.size() - 1); // throw java.lang.UnsupportedOperationException\n}\n\nString[] natureArray = natureList.toArray(new String[natureList.size()]);\nSystem.out.println(natureArray.length);\n```\n\n<!-- more -->\n\n看了下源码才发现使用 Arrays.asList(arr) 转换的 List 并不能进行 add 和 remove 操作。  \nArrays.asList(arr) 返回的类型是 Aarrays$ArrayList 并不是 ArrayList，  \nAarrays$ArrayList 和 ArrayList 都继承 AbstractList，但是 AbstractList 中的 add 方法和 remove 方法都是直接抛出 UnsupportedOperationException，并没有直接实现。  \nArrayList 重写了 add 方法和 remove 方法,能够进行对应的添加和删除操作，Aarrays$ArrayList 却没有去重写，所以此时调用 add 方法和 remove   方法会抛出 UnsupportedOperationException。 \n\n## 解决办法\n```java\n// old\nList<String> natureList = Arrays.asList(patternSplit);\n// new \nList<String> natureList = new ArrayList<>(Arrays.asList(patternSplit));\n```\n\n## 源码  \nArrays.asList(arr) 返回 Aarrays$ArrayList ， Aarrays$ArrayList 继承 AbstractList  \n![](http://7xia33.com1.z0.glb.clouddn.com/UnsupportedOperationException1.jpg)  \nArrayList 继承 AbstractList  \n![](http://7xia33.com1.z0.glb.clouddn.com/UnsupportedOperationException2.jpg)  \nAbstractList 中的 add 方法和 remove 方法都直接抛出 UnsupportedOperationException  \n![](http://7xia33.com1.z0.glb.clouddn.com/UnsupportedOperationException3.jpg)  \nArrayList 重写 add 方法和 remove 方法  \n![](http://7xia33.com1.z0.glb.clouddn.com/UnsupportedOperationException4.jpg)   \n\n\n<br>","source":"_posts/Java/UnsupportedOperationException.md","raw":"title: List 进行 remove 操作时抛出 java.lang.UnsupportedOperationException 异常分析\ndate: 2016-5-13  \ntags:\n    - original\ncategories:\n    - Java\n---\n\n今天将一个数组转换成 List 然后进行 remove 操作时却抛出 java.lang.UnsupportedOperationException 异常。\n\n```java\nString pattern = \" ^, v, m, n-music-name, $ \";\nString[] patternSplit = Utils.getStringTrimSplit(pattern, \",\");\n\n// 去除模式中的^和$标识\nList<String> natureList = Arrays.asList(patternSplit);\nif (\"^\".equals(natureList.get(0))) {\n    natureList.remove(0); // throw java.lang.UnsupportedOperationException\n}\nif (\"$\".equals(natureList.get(natureList.size() - 1))) {\n    natureList.remove(natureList.size() - 1); // throw java.lang.UnsupportedOperationException\n}\n\nString[] natureArray = natureList.toArray(new String[natureList.size()]);\nSystem.out.println(natureArray.length);\n```\n\n<!-- more -->\n\n看了下源码才发现使用 Arrays.asList(arr) 转换的 List 并不能进行 add 和 remove 操作。  \nArrays.asList(arr) 返回的类型是 Aarrays$ArrayList 并不是 ArrayList，  \nAarrays$ArrayList 和 ArrayList 都继承 AbstractList，但是 AbstractList 中的 add 方法和 remove 方法都是直接抛出 UnsupportedOperationException，并没有直接实现。  \nArrayList 重写了 add 方法和 remove 方法,能够进行对应的添加和删除操作，Aarrays$ArrayList 却没有去重写，所以此时调用 add 方法和 remove   方法会抛出 UnsupportedOperationException。 \n\n## 解决办法\n```java\n// old\nList<String> natureList = Arrays.asList(patternSplit);\n// new \nList<String> natureList = new ArrayList<>(Arrays.asList(patternSplit));\n```\n\n## 源码  \nArrays.asList(arr) 返回 Aarrays$ArrayList ， Aarrays$ArrayList 继承 AbstractList  \n![](http://7xia33.com1.z0.glb.clouddn.com/UnsupportedOperationException1.jpg)  \nArrayList 继承 AbstractList  \n![](http://7xia33.com1.z0.glb.clouddn.com/UnsupportedOperationException2.jpg)  \nAbstractList 中的 add 方法和 remove 方法都直接抛出 UnsupportedOperationException  \n![](http://7xia33.com1.z0.glb.clouddn.com/UnsupportedOperationException3.jpg)  \nArrayList 重写 add 方法和 remove 方法  \n![](http://7xia33.com1.z0.glb.clouddn.com/UnsupportedOperationException4.jpg)   \n\n\n<br>","slug":"Java/UnsupportedOperationException","published":1,"updated":"2018-04-05T11:32:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfoy712g000eacieeau1dlo1","content":"<p>今天将一个数组转换成 List 然后进行 remove 操作时却抛出 java.lang.UnsupportedOperationException 异常。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String pattern = <span class=\"string\">\" ^, v, m, n-music-name, $ \"</span>;</span><br><span class=\"line\">String[] patternSplit = Utils.getStringTrimSplit(pattern, <span class=\"string\">\",\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 去除模式中的^和$标识</span></span><br><span class=\"line\">List&lt;String&gt; natureList = Arrays.asList(patternSplit);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">\"^\"</span>.equals(natureList.get(<span class=\"number\">0</span>))) &#123;</span><br><span class=\"line\">    natureList.remove(<span class=\"number\">0</span>); <span class=\"comment\">// throw java.lang.UnsupportedOperationException</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">\"$\"</span>.equals(natureList.get(natureList.size() - <span class=\"number\">1</span>))) &#123;</span><br><span class=\"line\">    natureList.remove(natureList.size() - <span class=\"number\">1</span>); <span class=\"comment\">// throw java.lang.UnsupportedOperationException</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">String[] natureArray = natureList.toArray(<span class=\"keyword\">new</span> String[natureList.size()]);</span><br><span class=\"line\">System.out.println(natureArray.length);</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>看了下源码才发现使用 Arrays.asList(arr) 转换的 List 并不能进行 add 和 remove 操作。<br>Arrays.asList(arr) 返回的类型是 Aarrays$ArrayList 并不是 ArrayList，<br>Aarrays$ArrayList 和 ArrayList 都继承 AbstractList，但是 AbstractList 中的 add 方法和 remove 方法都是直接抛出 UnsupportedOperationException，并没有直接实现。<br>ArrayList 重写了 add 方法和 remove 方法,能够进行对应的添加和删除操作，Aarrays$ArrayList 却没有去重写，所以此时调用 add 方法和 remove   方法会抛出 UnsupportedOperationException。 </p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// old</span></span><br><span class=\"line\">List&lt;String&gt; natureList = Arrays.asList(patternSplit);</span><br><span class=\"line\"><span class=\"comment\">// new </span></span><br><span class=\"line\">List&lt;String&gt; natureList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(Arrays.asList(patternSplit));</span><br></pre></td></tr></table></figure>\n<h2 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h2><p>Arrays.asList(arr) 返回 Aarrays$ArrayList ， Aarrays$ArrayList 继承 AbstractList<br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/UnsupportedOperationException1.jpg\" alt=\"\"><br>ArrayList 继承 AbstractList<br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/UnsupportedOperationException2.jpg\" alt=\"\"><br>AbstractList 中的 add 方法和 remove 方法都直接抛出 UnsupportedOperationException<br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/UnsupportedOperationException3.jpg\" alt=\"\"><br>ArrayList 重写 add 方法和 remove 方法<br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/UnsupportedOperationException4.jpg\" alt=\"\">   </p>\n<p><br></p>\n","site":{"data":{}},"excerpt":"<p>今天将一个数组转换成 List 然后进行 remove 操作时却抛出 java.lang.UnsupportedOperationException 异常。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String pattern = <span class=\"string\">\" ^, v, m, n-music-name, $ \"</span>;</span><br><span class=\"line\">String[] patternSplit = Utils.getStringTrimSplit(pattern, <span class=\"string\">\",\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 去除模式中的^和$标识</span></span><br><span class=\"line\">List&lt;String&gt; natureList = Arrays.asList(patternSplit);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">\"^\"</span>.equals(natureList.get(<span class=\"number\">0</span>))) &#123;</span><br><span class=\"line\">    natureList.remove(<span class=\"number\">0</span>); <span class=\"comment\">// throw java.lang.UnsupportedOperationException</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">\"$\"</span>.equals(natureList.get(natureList.size() - <span class=\"number\">1</span>))) &#123;</span><br><span class=\"line\">    natureList.remove(natureList.size() - <span class=\"number\">1</span>); <span class=\"comment\">// throw java.lang.UnsupportedOperationException</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">String[] natureArray = natureList.toArray(<span class=\"keyword\">new</span> String[natureList.size()]);</span><br><span class=\"line\">System.out.println(natureArray.length);</span><br></pre></td></tr></table></figure>","more":"<p>看了下源码才发现使用 Arrays.asList(arr) 转换的 List 并不能进行 add 和 remove 操作。<br>Arrays.asList(arr) 返回的类型是 Aarrays$ArrayList 并不是 ArrayList，<br>Aarrays$ArrayList 和 ArrayList 都继承 AbstractList，但是 AbstractList 中的 add 方法和 remove 方法都是直接抛出 UnsupportedOperationException，并没有直接实现。<br>ArrayList 重写了 add 方法和 remove 方法,能够进行对应的添加和删除操作，Aarrays$ArrayList 却没有去重写，所以此时调用 add 方法和 remove   方法会抛出 UnsupportedOperationException。 </p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// old</span></span><br><span class=\"line\">List&lt;String&gt; natureList = Arrays.asList(patternSplit);</span><br><span class=\"line\"><span class=\"comment\">// new </span></span><br><span class=\"line\">List&lt;String&gt; natureList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(Arrays.asList(patternSplit));</span><br></pre></td></tr></table></figure>\n<h2 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h2><p>Arrays.asList(arr) 返回 Aarrays$ArrayList ， Aarrays$ArrayList 继承 AbstractList<br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/UnsupportedOperationException1.jpg\" alt=\"\"><br>ArrayList 继承 AbstractList<br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/UnsupportedOperationException2.jpg\" alt=\"\"><br>AbstractList 中的 add 方法和 remove 方法都直接抛出 UnsupportedOperationException<br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/UnsupportedOperationException3.jpg\" alt=\"\"><br>ArrayList 重写 add 方法和 remove 方法<br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/UnsupportedOperationException4.jpg\" alt=\"\">   </p>\n<p><br></p>"},{"title":"理解 volatile","date":"2017-04-04T16:00:00.000Z","_content":"\n### Java内存模型\n\n* Java内存模型规定了所有的变量都存储在主内存中。每条线程中还有自己的工作内存，线程的工作内存中保存了被该线程所使用到的变量（这些变量是从主内存中拷贝而来）。线程对变量的所有操作（读取，赋值）都必须在工作内存中进行。不同线程之间也无法直接访问对方工作内存中的变量，线程间变量值的传递均需要通过主内存来完成。\n* i  = 10; // 该赋值程序执行时线程必须先在自己的工作线程中对变量i所在的缓存行进行赋值操作，然后再写入主存当中。而不是直接将数值10写入主存当中。\n* 基于此种内存模型，便产生了多线程编程中的数据“脏读”等问题（一个线程修改数据没有及时写回主内存，另一个线程读取没修改的主内存数据，最终为主内存赋值时产生错误的结果）。\n\n<!-- more -->\n\n### 原子性\n\n* 原子性是指一个操作或者多个操作，要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。\n* 原子性经典的例子银行账户转账问题：比如从账户A向账户B转1000元，那么必然包括2个操作：从账户A减去1000元，往账户B加上1000元。这2个操作必须要具备原子性才能保证不出现一些意外的问题。\n* 在Java中，对基本数据类型的变量的读取和赋值操作是原子性操作，即这些操作是不可被中断的，要么执行，要么不执行。\n* Java内存模型只保证了基本读取和赋值是原子性操作，如果要实现更大范围操作的原子性，可以通过synchronized和Lock来实现。由于synchronized和Lock能够保证任一时刻只有一个线程执行该代码块，那么自然就不存在原子性问题了，从而保证了原子性。\n\n```java\nx = 10;\t\t// 原子性操作（直接将数值10赋值给x，线程执行这个语句时会直接将数值10写入到工作内存中。）\ny = x;\t\t// 非原子性操作（包含2个操作，它先要去读取x的值，再将x的值写入工作内存。）\nx++;\t\t// 非原子性操作（包括3个操作：读取x的值，进行加1操作，写入新的值。）\nx = x + 1;\t// 非原子性操作（包括3个操作：读取x的值，进行加1操作，写入新的值。）\n```\n\n### 可见性\n\n* 可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。\n* 当一个共享变量被volatile修饰时，它会保证修改的值会立即被更新到主内存，当有其他线程需要读取时，它会去内存中读取新值。而普通的共享变量不能保证可见性，因为普通共享变量被修改之后，什么时候被写入主存是不确定的，当其他线程去读取时，此时内存中可能还是原来的旧值，因此无法保证可见性。\n* 通过synchronized和Lock也能够保证可见性，synchronized和Lock能保证同一时刻只有一个线程获取锁然后执行同步代码，并且在释放锁之前会将对变量的修改刷新到主存当中。因此可以保证可见性。\n\n```java\n// 可见性问题实例\nint i = 0;\n\n//线程1执行的代码\ni = 10;\n\n//线程2执行的代码\nj = i;\t\n\n// 线程2执行时，如果线程1执行了但是没有把结果立即写回到主内存当中，那么线程2读取i加载到工作内存的依然是0，此时线程2没有立即看到线程1修改的值。\n```\n\n### 有序性\n\n* 有序性是指即程序执行的顺序按照代码的先后顺序执行。\n\n```java\n// 有序性实例\nint i = 0;              \nboolean flag = false;\n\ni = 1;                //语句1  \nflag = true;          //语句2\n// 从代码顺序上看，语句1是在语句2前面的，但是此时可能会发生指令重排序（Instruction Reorder），因为语句1和语句2谁先执行对最终的程序结果并没有影响，JVM在真正执行这段代码的时候不会保证语句1一定会在语句2的前面。\n```\n\n* 指令重排序：一般来说，处理器为了提高程序运行效率，可能会对输入代码进行优化，它不保证程序中各个语句的执行先后顺序同代码中的顺序一致，但是它会保证程序最终执行结果和代码顺序执行的结果是一致的。\n* 处理器在进行重排序时是会考虑指令之间的数据依赖性，如果一个指令Instruction 2必须用到Instruction 1的结果，那么处理器会保证Instruction 1会在Instruction 2之前执行。\n* 要想并发程序正确地执行，必须要保证原子性、可见性以及有序性。只要有一个没有被保证，就有可能会导致程序运行不正确。\n\n```java\n// 指令重排序实例\n//线程1:\ncontext = loadContext();   //语句1\ninited = true;             //语句2\n\n //线程2:\nwhile(!inited ){\n   sleep()\n}\ndoSomethingwithconfig(context);\n\n// 由于语句1和语句2没有数据依赖性，因此可能会被重排序。假如发生了重排序，在线程1执行过程中先执行语句2，而此是线程2会以为初始化工作已经完成，那么就会跳出while循环，去执行doSomethingwithconfig(context)方法，而此时context并没有被初始化，就会导致程序出错。\n```\n\n* 在Java内存模型中，允许编译器和处理器对指令进行重排序，但是重排序过程不会影响到单线程程序的执行，却会影响到多线程并发执行的正确性。\n* 在Java里面，可以通过volatile关键字来保证一定的“有序性”。另外可以通过synchronized和Lock来保证有序性，很显然，synchronized和Lock保证每个时刻是有一个线程执行同步代码，相当于是让线程顺序执行同步代码，自然就保证了有序性。\n\n### 理解volatile\n\n* 一旦一个共享变量（类的成员变量、类的静态成员变量）被volatile修饰之后，那么就保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的。\n* volatile关键字能禁止指令重排序，所以volatile能在一定程度上保证有序性。\n* volatile不能确保原子性\n\n### volatile的实现原理\n\n* 《深入理解Java虚拟机》中写道：“观察加入volatile关键字和没有加入volatile关键字时所生成的汇编代码发现，加入volatile关键字时，会多出一个lock前缀指令”\n* 如果对声明了volatile的变量进行了写操作，JVM就会向处理器发送一条Lock前缀的指令，将这个变量所在的缓存行的数据写回到系统内存。在多处理器下，为了保证各个处理器的缓存是一致的，就会实现缓存一致性协议，每个处理器通过嗅探在总线上传播的数据来检查自己缓存的值是不是过期了，当处理器发现自己缓存行对应的内存地址被修改了，就会将当前处理器的缓存行设置为无效状态，重新从系统内存中把数据读到处理器缓存里。\n* Lock前缀指令实际上相当于一个内存屏障（也成内存栅栏），它确保指令重排序时不会把其后面的指令排到内存屏障之前的位置，也不会把前面的指令排到内存屏障的后面；即在执行到内存屏障这句指令时，在它前面的操作已经全部完成。\n\n### volatile的应用场景\n\n* synchronized关键字是防止多个线程同时执行一段代码，那么就会很影响程序执行效率，而volatile关键字在某些情况下性能要优于synchronized，但是要注意volatile关键字是无法替代synchronized关键字的，因为volatile关键字无法保证操作的原子性。\n\n```java\n// 状态标记量，根据状态标记，终止线程。\nvolatile boolean flag = false;\n//线程1\nwhile(!flag){\n    doSomething();\n}\n//线程2\npublic void setFlag() {\n    flag = true;\n}\n\n// 单例模式中的double check，主要在于instance = new Singleton()这句，这并非是一个原子操作。\nclass Singleton{\n    private volatile static Singleton instance = null;\n    private Singleton() {\n\n    }\n    public static Singleton getInstance() {\n        if(instance==null) {\n            synchronized (Singleton.class) {\n                if(instance==null)\n                    instance = new Singleton();\n            }\n        }\n        return instance;\n    }\n}\n```\n\n### 参考文章\n\n* [你真的了解volatile关键字吗？](http://www.jianshu.com/p/7798161d7472)\n\n<br>","source":"_posts/Java/volatile.md","raw":"title: 理解 volatile\ndate: 2017-4-5\ntags:\n    - note\ncategories:\n    - Java\n---\n\n### Java内存模型\n\n* Java内存模型规定了所有的变量都存储在主内存中。每条线程中还有自己的工作内存，线程的工作内存中保存了被该线程所使用到的变量（这些变量是从主内存中拷贝而来）。线程对变量的所有操作（读取，赋值）都必须在工作内存中进行。不同线程之间也无法直接访问对方工作内存中的变量，线程间变量值的传递均需要通过主内存来完成。\n* i  = 10; // 该赋值程序执行时线程必须先在自己的工作线程中对变量i所在的缓存行进行赋值操作，然后再写入主存当中。而不是直接将数值10写入主存当中。\n* 基于此种内存模型，便产生了多线程编程中的数据“脏读”等问题（一个线程修改数据没有及时写回主内存，另一个线程读取没修改的主内存数据，最终为主内存赋值时产生错误的结果）。\n\n<!-- more -->\n\n### 原子性\n\n* 原子性是指一个操作或者多个操作，要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。\n* 原子性经典的例子银行账户转账问题：比如从账户A向账户B转1000元，那么必然包括2个操作：从账户A减去1000元，往账户B加上1000元。这2个操作必须要具备原子性才能保证不出现一些意外的问题。\n* 在Java中，对基本数据类型的变量的读取和赋值操作是原子性操作，即这些操作是不可被中断的，要么执行，要么不执行。\n* Java内存模型只保证了基本读取和赋值是原子性操作，如果要实现更大范围操作的原子性，可以通过synchronized和Lock来实现。由于synchronized和Lock能够保证任一时刻只有一个线程执行该代码块，那么自然就不存在原子性问题了，从而保证了原子性。\n\n```java\nx = 10;\t\t// 原子性操作（直接将数值10赋值给x，线程执行这个语句时会直接将数值10写入到工作内存中。）\ny = x;\t\t// 非原子性操作（包含2个操作，它先要去读取x的值，再将x的值写入工作内存。）\nx++;\t\t// 非原子性操作（包括3个操作：读取x的值，进行加1操作，写入新的值。）\nx = x + 1;\t// 非原子性操作（包括3个操作：读取x的值，进行加1操作，写入新的值。）\n```\n\n### 可见性\n\n* 可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。\n* 当一个共享变量被volatile修饰时，它会保证修改的值会立即被更新到主内存，当有其他线程需要读取时，它会去内存中读取新值。而普通的共享变量不能保证可见性，因为普通共享变量被修改之后，什么时候被写入主存是不确定的，当其他线程去读取时，此时内存中可能还是原来的旧值，因此无法保证可见性。\n* 通过synchronized和Lock也能够保证可见性，synchronized和Lock能保证同一时刻只有一个线程获取锁然后执行同步代码，并且在释放锁之前会将对变量的修改刷新到主存当中。因此可以保证可见性。\n\n```java\n// 可见性问题实例\nint i = 0;\n\n//线程1执行的代码\ni = 10;\n\n//线程2执行的代码\nj = i;\t\n\n// 线程2执行时，如果线程1执行了但是没有把结果立即写回到主内存当中，那么线程2读取i加载到工作内存的依然是0，此时线程2没有立即看到线程1修改的值。\n```\n\n### 有序性\n\n* 有序性是指即程序执行的顺序按照代码的先后顺序执行。\n\n```java\n// 有序性实例\nint i = 0;              \nboolean flag = false;\n\ni = 1;                //语句1  \nflag = true;          //语句2\n// 从代码顺序上看，语句1是在语句2前面的，但是此时可能会发生指令重排序（Instruction Reorder），因为语句1和语句2谁先执行对最终的程序结果并没有影响，JVM在真正执行这段代码的时候不会保证语句1一定会在语句2的前面。\n```\n\n* 指令重排序：一般来说，处理器为了提高程序运行效率，可能会对输入代码进行优化，它不保证程序中各个语句的执行先后顺序同代码中的顺序一致，但是它会保证程序最终执行结果和代码顺序执行的结果是一致的。\n* 处理器在进行重排序时是会考虑指令之间的数据依赖性，如果一个指令Instruction 2必须用到Instruction 1的结果，那么处理器会保证Instruction 1会在Instruction 2之前执行。\n* 要想并发程序正确地执行，必须要保证原子性、可见性以及有序性。只要有一个没有被保证，就有可能会导致程序运行不正确。\n\n```java\n// 指令重排序实例\n//线程1:\ncontext = loadContext();   //语句1\ninited = true;             //语句2\n\n //线程2:\nwhile(!inited ){\n   sleep()\n}\ndoSomethingwithconfig(context);\n\n// 由于语句1和语句2没有数据依赖性，因此可能会被重排序。假如发生了重排序，在线程1执行过程中先执行语句2，而此是线程2会以为初始化工作已经完成，那么就会跳出while循环，去执行doSomethingwithconfig(context)方法，而此时context并没有被初始化，就会导致程序出错。\n```\n\n* 在Java内存模型中，允许编译器和处理器对指令进行重排序，但是重排序过程不会影响到单线程程序的执行，却会影响到多线程并发执行的正确性。\n* 在Java里面，可以通过volatile关键字来保证一定的“有序性”。另外可以通过synchronized和Lock来保证有序性，很显然，synchronized和Lock保证每个时刻是有一个线程执行同步代码，相当于是让线程顺序执行同步代码，自然就保证了有序性。\n\n### 理解volatile\n\n* 一旦一个共享变量（类的成员变量、类的静态成员变量）被volatile修饰之后，那么就保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的。\n* volatile关键字能禁止指令重排序，所以volatile能在一定程度上保证有序性。\n* volatile不能确保原子性\n\n### volatile的实现原理\n\n* 《深入理解Java虚拟机》中写道：“观察加入volatile关键字和没有加入volatile关键字时所生成的汇编代码发现，加入volatile关键字时，会多出一个lock前缀指令”\n* 如果对声明了volatile的变量进行了写操作，JVM就会向处理器发送一条Lock前缀的指令，将这个变量所在的缓存行的数据写回到系统内存。在多处理器下，为了保证各个处理器的缓存是一致的，就会实现缓存一致性协议，每个处理器通过嗅探在总线上传播的数据来检查自己缓存的值是不是过期了，当处理器发现自己缓存行对应的内存地址被修改了，就会将当前处理器的缓存行设置为无效状态，重新从系统内存中把数据读到处理器缓存里。\n* Lock前缀指令实际上相当于一个内存屏障（也成内存栅栏），它确保指令重排序时不会把其后面的指令排到内存屏障之前的位置，也不会把前面的指令排到内存屏障的后面；即在执行到内存屏障这句指令时，在它前面的操作已经全部完成。\n\n### volatile的应用场景\n\n* synchronized关键字是防止多个线程同时执行一段代码，那么就会很影响程序执行效率，而volatile关键字在某些情况下性能要优于synchronized，但是要注意volatile关键字是无法替代synchronized关键字的，因为volatile关键字无法保证操作的原子性。\n\n```java\n// 状态标记量，根据状态标记，终止线程。\nvolatile boolean flag = false;\n//线程1\nwhile(!flag){\n    doSomething();\n}\n//线程2\npublic void setFlag() {\n    flag = true;\n}\n\n// 单例模式中的double check，主要在于instance = new Singleton()这句，这并非是一个原子操作。\nclass Singleton{\n    private volatile static Singleton instance = null;\n    private Singleton() {\n\n    }\n    public static Singleton getInstance() {\n        if(instance==null) {\n            synchronized (Singleton.class) {\n                if(instance==null)\n                    instance = new Singleton();\n            }\n        }\n        return instance;\n    }\n}\n```\n\n### 参考文章\n\n* [你真的了解volatile关键字吗？](http://www.jianshu.com/p/7798161d7472)\n\n<br>","slug":"Java/volatile","published":1,"updated":"2018-04-05T11:32:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfoy712j000jacie81uihgfm","content":"<h3 id=\"Java内存模型\"><a href=\"#Java内存模型\" class=\"headerlink\" title=\"Java内存模型\"></a>Java内存模型</h3><ul>\n<li>Java内存模型规定了所有的变量都存储在主内存中。每条线程中还有自己的工作内存，线程的工作内存中保存了被该线程所使用到的变量（这些变量是从主内存中拷贝而来）。线程对变量的所有操作（读取，赋值）都必须在工作内存中进行。不同线程之间也无法直接访问对方工作内存中的变量，线程间变量值的传递均需要通过主内存来完成。</li>\n<li>i  = 10; // 该赋值程序执行时线程必须先在自己的工作线程中对变量i所在的缓存行进行赋值操作，然后再写入主存当中。而不是直接将数值10写入主存当中。</li>\n<li>基于此种内存模型，便产生了多线程编程中的数据“脏读”等问题（一个线程修改数据没有及时写回主内存，另一个线程读取没修改的主内存数据，最终为主内存赋值时产生错误的结果）。</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"原子性\"><a href=\"#原子性\" class=\"headerlink\" title=\"原子性\"></a>原子性</h3><ul>\n<li>原子性是指一个操作或者多个操作，要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。</li>\n<li>原子性经典的例子银行账户转账问题：比如从账户A向账户B转1000元，那么必然包括2个操作：从账户A减去1000元，往账户B加上1000元。这2个操作必须要具备原子性才能保证不出现一些意外的问题。</li>\n<li>在Java中，对基本数据类型的变量的读取和赋值操作是原子性操作，即这些操作是不可被中断的，要么执行，要么不执行。</li>\n<li>Java内存模型只保证了基本读取和赋值是原子性操作，如果要实现更大范围操作的原子性，可以通过synchronized和Lock来实现。由于synchronized和Lock能够保证任一时刻只有一个线程执行该代码块，那么自然就不存在原子性问题了，从而保证了原子性。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">10</span>;\t\t<span class=\"comment\">// 原子性操作（直接将数值10赋值给x，线程执行这个语句时会直接将数值10写入到工作内存中。）</span></span><br><span class=\"line\">y = x;\t\t<span class=\"comment\">// 非原子性操作（包含2个操作，它先要去读取x的值，再将x的值写入工作内存。）</span></span><br><span class=\"line\">x++;\t\t<span class=\"comment\">// 非原子性操作（包括3个操作：读取x的值，进行加1操作，写入新的值。）</span></span><br><span class=\"line\">x = x + <span class=\"number\">1</span>;\t<span class=\"comment\">// 非原子性操作（包括3个操作：读取x的值，进行加1操作，写入新的值。）</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"可见性\"><a href=\"#可见性\" class=\"headerlink\" title=\"可见性\"></a>可见性</h3><ul>\n<li>可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。</li>\n<li>当一个共享变量被volatile修饰时，它会保证修改的值会立即被更新到主内存，当有其他线程需要读取时，它会去内存中读取新值。而普通的共享变量不能保证可见性，因为普通共享变量被修改之后，什么时候被写入主存是不确定的，当其他线程去读取时，此时内存中可能还是原来的旧值，因此无法保证可见性。</li>\n<li>通过synchronized和Lock也能够保证可见性，synchronized和Lock能保证同一时刻只有一个线程获取锁然后执行同步代码，并且在释放锁之前会将对变量的修改刷新到主存当中。因此可以保证可见性。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 可见性问题实例</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//线程1执行的代码</span></span><br><span class=\"line\">i = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//线程2执行的代码</span></span><br><span class=\"line\">j = i;\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 线程2执行时，如果线程1执行了但是没有把结果立即写回到主内存当中，那么线程2读取i加载到工作内存的依然是0，此时线程2没有立即看到线程1修改的值。</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"有序性\"><a href=\"#有序性\" class=\"headerlink\" title=\"有序性\"></a>有序性</h3><ul>\n<li>有序性是指即程序执行的顺序按照代码的先后顺序执行。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 有序性实例</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;              </span><br><span class=\"line\"><span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">i = <span class=\"number\">1</span>;                <span class=\"comment\">//语句1  </span></span><br><span class=\"line\">flag = <span class=\"keyword\">true</span>;          <span class=\"comment\">//语句2</span></span><br><span class=\"line\"><span class=\"comment\">// 从代码顺序上看，语句1是在语句2前面的，但是此时可能会发生指令重排序（Instruction Reorder），因为语句1和语句2谁先执行对最终的程序结果并没有影响，JVM在真正执行这段代码的时候不会保证语句1一定会在语句2的前面。</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>指令重排序：一般来说，处理器为了提高程序运行效率，可能会对输入代码进行优化，它不保证程序中各个语句的执行先后顺序同代码中的顺序一致，但是它会保证程序最终执行结果和代码顺序执行的结果是一致的。</li>\n<li>处理器在进行重排序时是会考虑指令之间的数据依赖性，如果一个指令Instruction 2必须用到Instruction 1的结果，那么处理器会保证Instruction 1会在Instruction 2之前执行。</li>\n<li>要想并发程序正确地执行，必须要保证原子性、可见性以及有序性。只要有一个没有被保证，就有可能会导致程序运行不正确。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 指令重排序实例</span></span><br><span class=\"line\"><span class=\"comment\">//线程1:</span></span><br><span class=\"line\">context = loadContext();   <span class=\"comment\">//语句1</span></span><br><span class=\"line\">inited = <span class=\"keyword\">true</span>;             <span class=\"comment\">//语句2</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//线程2:</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(!inited )&#123;</span><br><span class=\"line\">   sleep()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">doSomethingwithconfig(context);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 由于语句1和语句2没有数据依赖性，因此可能会被重排序。假如发生了重排序，在线程1执行过程中先执行语句2，而此是线程2会以为初始化工作已经完成，那么就会跳出while循环，去执行doSomethingwithconfig(context)方法，而此时context并没有被初始化，就会导致程序出错。</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>在Java内存模型中，允许编译器和处理器对指令进行重排序，但是重排序过程不会影响到单线程程序的执行，却会影响到多线程并发执行的正确性。</li>\n<li>在Java里面，可以通过volatile关键字来保证一定的“有序性”。另外可以通过synchronized和Lock来保证有序性，很显然，synchronized和Lock保证每个时刻是有一个线程执行同步代码，相当于是让线程顺序执行同步代码，自然就保证了有序性。</li>\n</ul>\n<h3 id=\"理解volatile\"><a href=\"#理解volatile\" class=\"headerlink\" title=\"理解volatile\"></a>理解volatile</h3><ul>\n<li>一旦一个共享变量（类的成员变量、类的静态成员变量）被volatile修饰之后，那么就保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的。</li>\n<li>volatile关键字能禁止指令重排序，所以volatile能在一定程度上保证有序性。</li>\n<li>volatile不能确保原子性</li>\n</ul>\n<h3 id=\"volatile的实现原理\"><a href=\"#volatile的实现原理\" class=\"headerlink\" title=\"volatile的实现原理\"></a>volatile的实现原理</h3><ul>\n<li>《深入理解Java虚拟机》中写道：“观察加入volatile关键字和没有加入volatile关键字时所生成的汇编代码发现，加入volatile关键字时，会多出一个lock前缀指令”</li>\n<li>如果对声明了volatile的变量进行了写操作，JVM就会向处理器发送一条Lock前缀的指令，将这个变量所在的缓存行的数据写回到系统内存。在多处理器下，为了保证各个处理器的缓存是一致的，就会实现缓存一致性协议，每个处理器通过嗅探在总线上传播的数据来检查自己缓存的值是不是过期了，当处理器发现自己缓存行对应的内存地址被修改了，就会将当前处理器的缓存行设置为无效状态，重新从系统内存中把数据读到处理器缓存里。</li>\n<li>Lock前缀指令实际上相当于一个内存屏障（也成内存栅栏），它确保指令重排序时不会把其后面的指令排到内存屏障之前的位置，也不会把前面的指令排到内存屏障的后面；即在执行到内存屏障这句指令时，在它前面的操作已经全部完成。</li>\n</ul>\n<h3 id=\"volatile的应用场景\"><a href=\"#volatile的应用场景\" class=\"headerlink\" title=\"volatile的应用场景\"></a>volatile的应用场景</h3><ul>\n<li>synchronized关键字是防止多个线程同时执行一段代码，那么就会很影响程序执行效率，而volatile关键字在某些情况下性能要优于synchronized，但是要注意volatile关键字是无法替代synchronized关键字的，因为volatile关键字无法保证操作的原子性。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 状态标记量，根据状态标记，终止线程。</span></span><br><span class=\"line\"><span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"><span class=\"comment\">//线程1</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(!flag)&#123;</span><br><span class=\"line\">    doSomething();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//线程2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setFlag</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 单例模式中的double check，主要在于instance = new Singleton()这句，这并非是一个原子操作。</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(instance==<span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (Singleton.class) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(instance==<span class=\"keyword\">null</span>)</span><br><span class=\"line\">                    instance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><ul>\n<li><a href=\"http://www.jianshu.com/p/7798161d7472\" target=\"_blank\" rel=\"noopener\">你真的了解volatile关键字吗？</a></li>\n</ul>\n<p><br></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"Java内存模型\"><a href=\"#Java内存模型\" class=\"headerlink\" title=\"Java内存模型\"></a>Java内存模型</h3><ul>\n<li>Java内存模型规定了所有的变量都存储在主内存中。每条线程中还有自己的工作内存，线程的工作内存中保存了被该线程所使用到的变量（这些变量是从主内存中拷贝而来）。线程对变量的所有操作（读取，赋值）都必须在工作内存中进行。不同线程之间也无法直接访问对方工作内存中的变量，线程间变量值的传递均需要通过主内存来完成。</li>\n<li>i  = 10; // 该赋值程序执行时线程必须先在自己的工作线程中对变量i所在的缓存行进行赋值操作，然后再写入主存当中。而不是直接将数值10写入主存当中。</li>\n<li>基于此种内存模型，便产生了多线程编程中的数据“脏读”等问题（一个线程修改数据没有及时写回主内存，另一个线程读取没修改的主内存数据，最终为主内存赋值时产生错误的结果）。</li>\n</ul>","more":"<h3 id=\"原子性\"><a href=\"#原子性\" class=\"headerlink\" title=\"原子性\"></a>原子性</h3><ul>\n<li>原子性是指一个操作或者多个操作，要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。</li>\n<li>原子性经典的例子银行账户转账问题：比如从账户A向账户B转1000元，那么必然包括2个操作：从账户A减去1000元，往账户B加上1000元。这2个操作必须要具备原子性才能保证不出现一些意外的问题。</li>\n<li>在Java中，对基本数据类型的变量的读取和赋值操作是原子性操作，即这些操作是不可被中断的，要么执行，要么不执行。</li>\n<li>Java内存模型只保证了基本读取和赋值是原子性操作，如果要实现更大范围操作的原子性，可以通过synchronized和Lock来实现。由于synchronized和Lock能够保证任一时刻只有一个线程执行该代码块，那么自然就不存在原子性问题了，从而保证了原子性。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">10</span>;\t\t<span class=\"comment\">// 原子性操作（直接将数值10赋值给x，线程执行这个语句时会直接将数值10写入到工作内存中。）</span></span><br><span class=\"line\">y = x;\t\t<span class=\"comment\">// 非原子性操作（包含2个操作，它先要去读取x的值，再将x的值写入工作内存。）</span></span><br><span class=\"line\">x++;\t\t<span class=\"comment\">// 非原子性操作（包括3个操作：读取x的值，进行加1操作，写入新的值。）</span></span><br><span class=\"line\">x = x + <span class=\"number\">1</span>;\t<span class=\"comment\">// 非原子性操作（包括3个操作：读取x的值，进行加1操作，写入新的值。）</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"可见性\"><a href=\"#可见性\" class=\"headerlink\" title=\"可见性\"></a>可见性</h3><ul>\n<li>可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。</li>\n<li>当一个共享变量被volatile修饰时，它会保证修改的值会立即被更新到主内存，当有其他线程需要读取时，它会去内存中读取新值。而普通的共享变量不能保证可见性，因为普通共享变量被修改之后，什么时候被写入主存是不确定的，当其他线程去读取时，此时内存中可能还是原来的旧值，因此无法保证可见性。</li>\n<li>通过synchronized和Lock也能够保证可见性，synchronized和Lock能保证同一时刻只有一个线程获取锁然后执行同步代码，并且在释放锁之前会将对变量的修改刷新到主存当中。因此可以保证可见性。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 可见性问题实例</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//线程1执行的代码</span></span><br><span class=\"line\">i = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//线程2执行的代码</span></span><br><span class=\"line\">j = i;\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 线程2执行时，如果线程1执行了但是没有把结果立即写回到主内存当中，那么线程2读取i加载到工作内存的依然是0，此时线程2没有立即看到线程1修改的值。</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"有序性\"><a href=\"#有序性\" class=\"headerlink\" title=\"有序性\"></a>有序性</h3><ul>\n<li>有序性是指即程序执行的顺序按照代码的先后顺序执行。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 有序性实例</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;              </span><br><span class=\"line\"><span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">i = <span class=\"number\">1</span>;                <span class=\"comment\">//语句1  </span></span><br><span class=\"line\">flag = <span class=\"keyword\">true</span>;          <span class=\"comment\">//语句2</span></span><br><span class=\"line\"><span class=\"comment\">// 从代码顺序上看，语句1是在语句2前面的，但是此时可能会发生指令重排序（Instruction Reorder），因为语句1和语句2谁先执行对最终的程序结果并没有影响，JVM在真正执行这段代码的时候不会保证语句1一定会在语句2的前面。</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>指令重排序：一般来说，处理器为了提高程序运行效率，可能会对输入代码进行优化，它不保证程序中各个语句的执行先后顺序同代码中的顺序一致，但是它会保证程序最终执行结果和代码顺序执行的结果是一致的。</li>\n<li>处理器在进行重排序时是会考虑指令之间的数据依赖性，如果一个指令Instruction 2必须用到Instruction 1的结果，那么处理器会保证Instruction 1会在Instruction 2之前执行。</li>\n<li>要想并发程序正确地执行，必须要保证原子性、可见性以及有序性。只要有一个没有被保证，就有可能会导致程序运行不正确。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 指令重排序实例</span></span><br><span class=\"line\"><span class=\"comment\">//线程1:</span></span><br><span class=\"line\">context = loadContext();   <span class=\"comment\">//语句1</span></span><br><span class=\"line\">inited = <span class=\"keyword\">true</span>;             <span class=\"comment\">//语句2</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//线程2:</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(!inited )&#123;</span><br><span class=\"line\">   sleep()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">doSomethingwithconfig(context);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 由于语句1和语句2没有数据依赖性，因此可能会被重排序。假如发生了重排序，在线程1执行过程中先执行语句2，而此是线程2会以为初始化工作已经完成，那么就会跳出while循环，去执行doSomethingwithconfig(context)方法，而此时context并没有被初始化，就会导致程序出错。</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>在Java内存模型中，允许编译器和处理器对指令进行重排序，但是重排序过程不会影响到单线程程序的执行，却会影响到多线程并发执行的正确性。</li>\n<li>在Java里面，可以通过volatile关键字来保证一定的“有序性”。另外可以通过synchronized和Lock来保证有序性，很显然，synchronized和Lock保证每个时刻是有一个线程执行同步代码，相当于是让线程顺序执行同步代码，自然就保证了有序性。</li>\n</ul>\n<h3 id=\"理解volatile\"><a href=\"#理解volatile\" class=\"headerlink\" title=\"理解volatile\"></a>理解volatile</h3><ul>\n<li>一旦一个共享变量（类的成员变量、类的静态成员变量）被volatile修饰之后，那么就保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的。</li>\n<li>volatile关键字能禁止指令重排序，所以volatile能在一定程度上保证有序性。</li>\n<li>volatile不能确保原子性</li>\n</ul>\n<h3 id=\"volatile的实现原理\"><a href=\"#volatile的实现原理\" class=\"headerlink\" title=\"volatile的实现原理\"></a>volatile的实现原理</h3><ul>\n<li>《深入理解Java虚拟机》中写道：“观察加入volatile关键字和没有加入volatile关键字时所生成的汇编代码发现，加入volatile关键字时，会多出一个lock前缀指令”</li>\n<li>如果对声明了volatile的变量进行了写操作，JVM就会向处理器发送一条Lock前缀的指令，将这个变量所在的缓存行的数据写回到系统内存。在多处理器下，为了保证各个处理器的缓存是一致的，就会实现缓存一致性协议，每个处理器通过嗅探在总线上传播的数据来检查自己缓存的值是不是过期了，当处理器发现自己缓存行对应的内存地址被修改了，就会将当前处理器的缓存行设置为无效状态，重新从系统内存中把数据读到处理器缓存里。</li>\n<li>Lock前缀指令实际上相当于一个内存屏障（也成内存栅栏），它确保指令重排序时不会把其后面的指令排到内存屏障之前的位置，也不会把前面的指令排到内存屏障的后面；即在执行到内存屏障这句指令时，在它前面的操作已经全部完成。</li>\n</ul>\n<h3 id=\"volatile的应用场景\"><a href=\"#volatile的应用场景\" class=\"headerlink\" title=\"volatile的应用场景\"></a>volatile的应用场景</h3><ul>\n<li>synchronized关键字是防止多个线程同时执行一段代码，那么就会很影响程序执行效率，而volatile关键字在某些情况下性能要优于synchronized，但是要注意volatile关键字是无法替代synchronized关键字的，因为volatile关键字无法保证操作的原子性。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 状态标记量，根据状态标记，终止线程。</span></span><br><span class=\"line\"><span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"><span class=\"comment\">//线程1</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(!flag)&#123;</span><br><span class=\"line\">    doSomething();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//线程2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setFlag</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 单例模式中的double check，主要在于instance = new Singleton()这句，这并非是一个原子操作。</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> Singleton instance = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(instance==<span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (Singleton.class) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(instance==<span class=\"keyword\">null</span>)</span><br><span class=\"line\">                    instance = <span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><ul>\n<li><a href=\"http://www.jianshu.com/p/7798161d7472\" target=\"_blank\" rel=\"noopener\">你真的了解volatile关键字吗？</a></li>\n</ul>\n<p><br></p>"},{"title":"深入理解 Java 虚拟机笔记","date":"2016-12-05T16:00:00.000Z","_content":"\nJava 虚拟机屏蔽了与具体操作系统平台相关的信息,使得 Java 语言编译程序只需生成在 Java 虚拟机上运行的目标代码(字节码),就可以在多种平台上不加修改地运行。Java 虚拟机在执行字节码时,实际上最终还是把字节码解释成具体平台上的机器指令执行。\n\n<!-- more -->\n\n## Java 的优点\n\n* 是一门结构严谨、面向对象的编程语言。\n* 摆脱了硬件平台的束缚，实现了“一次编写，到处运行”的理想。\n* 提供了一种相对安全的内存管理和访问机制，避免了绝大部分的内存泄漏和指针越界问题。\n* 实现了热点代码检测和运行时编译及优化，使得 Java 应用能随着运行时间的增加而获得更高的性能。\n* 有一套完善的应用程序接口和无数的来自商业机构和开源社区的第三方类库来帮助实现各种各样的功能。\n\n## Java 平台的逻辑结构\n\n![Java 平台的逻辑结构](http://wiki.jikexueyuan.com/project/java-vm/images/jvmstructure.gif)\n\n## JVM\n\n* JVM 是一种基于下层的操作系统和硬件平台并利用软件方法来实现的抽象的计算机，可以在上面执行 Java 的字节码程序。简单的说，JVM 就是 Java 的虚拟机,有了 JVM 才能运行 Java 程序。\n* Java 编译器只需面向 JVM，生成 JVM 能理解的代码或字节码文件。Java 源文件经编译器，编译成字节码程序，通过 JVM 将每一条指令翻译成不同平台机器码，通过特定平台运行。\n  ![JVM 自身的物理结构](http://wiki.jikexueyuan.com/project/java-vm/images/jvm.gif)\n\n## class 文件的组成\n* 结构信息。包括 class 文件格式版本号及各部分的数量与大小的信息。\n* 元数据。对应于 Java 源码中声明与常量的信息。包含类/继承的超类/实现的接口的声明信息、域与方法声明信息和常量池。\n* 方法信息。对应 Java 源码中语句和表达式对应的信息。包含字节码、异常处理器表、求值栈与局部变量区大小、求值栈的类型记录、调试符号信息。\n\n## 类的层次关系和加载顺序\n\n![类的层次关系和加载顺序](http://wiki.jikexueyuan.com/project/java-vm/images/jvmclass.gif)\n\n## 类执行机制\n\n* JVM 是基于栈的体系结构来执行 class 字节码的。线程创建后，都会产生程序计数器（PC）和栈（Stack），程序计数器存放下一条要执行的指令在方法内的偏移量，栈中存放一个个栈帧，每个栈帧对应着每个方法的每次调用，而栈帧又是有局部变量区和操作数栈两部分组成，局部变量区用于存放方法中的局部变量和参数，操作数栈中用于存放方法执行过程中产生的中间结果。\n\n\n## 内存区域\n\n* Java 虚拟机在执行 Java 程序的过程中会把他所管理的内存划分为若干个不同的数据区域。\n* Java 虚拟机规范将 JVM 所管理的内存分为以下几个运行时数据区：程序计数器、Java 虚拟机栈、本地方法栈、Java 堆、方法区。\n  ![内存区域图](http://wiki.jikexueyuan.com/project/java-vm/images/jvmdata.png)\n\n## 程序计数器\n\n* 一块较小的内存空间，它是当前线程所执行的字节码的行号指示器，字节码解释器工作时通过改变该计数器的值来选择下一条需要执行的字节码指令，分支、跳转、循环等基础功能都要依赖它来实现。\n* 每条线程都有一个独立的的程序计数器，各线程间的计数器互不影响，因此该区域是线程私有的。\n* 当线程在执行一个 Java 方法时，该计数器记录的是正在执行的虚拟机字节码指令的地址，当线程在执行的是 Native 方法（调用本地操作系统方法）时，该计数器的值为空。\n* 该内存区域是唯一一个在 Java 虚拟机规范中么有规定任何 OOM（内存溢出：OutOfMemoryError）情况的区域。\n\n## Java 虚拟机栈\n\n* 该区域也是线程私有的，它的生命周期也与线程相同。\n* 虚拟机栈描述的是 Java 方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧，栈它是用于支持续虚拟机进行方法调用和方法执行的数据结构。\n* 对于执行引擎来讲，活动线程中，只有栈顶的栈帧是有效的，称为当前栈帧，这个栈帧所关联的方法称为当前方法，执行引擎所运行的所有字节码指令都只针对当前栈帧进行操作。\n* 栈帧用于存储局部变量表、操作数栈、动态链接、方法返回地址和一些额外的附加信息。\n* 在编译程序代码时，栈帧中需要多大的局部变量表、多深的操作数栈都已经完全确定了，并且写入了方法表的 Code 属性之中。因此，一个栈帧需要分配多少内存，不会受到程序运行期变量数据的影响，而仅仅取决于具体的虚拟机实现。\n\n## Java 虚拟机栈的异常\n\n* 在 Java 虚拟机规范中，对这个区域规定了两种异常情况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常。如果虚拟机在动态扩展栈时无法申请到足够的内存空间，则抛出OutOfMemoryError异常。\n* 这两种情况存在着一些互相重叠的地方：当栈空间无法继续分配时，到底是内存太小，还是已使用的栈空间太大，其本质上只是对同一件事情的两种描述而已。在单线程的操作中，无论是由于栈帧太大，还是虚拟机栈空间太小，当栈空间无法分配时，虚拟机抛出的都是 StackOverflowError 异常，而不会得到 OutOfMemoryError 异常。而在多线程环境下，则会抛出 OutOfMemoryError 异常。\n\n\n### 局部变量表\n\n* 局部变量表是一组变量值存储空间，用于存放方法参数和方法内部定义的局部变量，其中存放的数据的类型是编译期可知的各种基本数据类型、对象引用（reference）和 returnAddress 类型（它指向了一条字节码指令的地址）。局部变量表所需的内存空间在编译期间完成分配，即在 Java 程序被编译成 Class 文件时，就确定了所需分配的最大局部变量表的容量。当进入一个方法时，这个方法需要在栈中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。\n* 局部变量表的容量以变量槽（Slot）为最小单位。在虚拟机规范中并没有明确指明一个 Slot 应占用的内存空间大小（允许其随着处理器、操作系统或虚拟机的不同而发生变化），一个 Slot 可以存放一个32位以内的数据类型：boolean、byte、char、short、int、float、reference 和 returnAddresss。reference 是对象的引用类型，returnAddress 是为字节指令服务的，它执行了一条字节码指令的地址。对于 64 位的数据类型（long和double），虚拟机会以高位在前的方式为其分配两个连续的 Slot 空间。\n* 虚拟机通过索引定位的方式使用局部变量表，索引值的范围是从 0 开始到局部变量表最大的 Slot 数量，对于 32 位数据类型的变量，索引 n 代表第 n 个 Slot，对于 64 位的，索引 n 代表第 n 和第 n+1 两个 Slot。\n* 在方法执行时，虚拟机是使用局部变量表来完成参数值到参数变量列表的传递过程的，如果是实例方法（非static），则局部变量表中的第 0 位索引的 Slot 默认是用于传递方法所属对象实例的引用，在方法中可以通过关键字“this”来访问这个隐含的参数。其余参数则按照参数表的顺序来排列，占用从1开始的局部变量 Slot，参数表分配完毕后，再根据方法体内部定义的变量顺序和作用域分配其余的 Slot。\n* 局部变量表中的 Slot 是可重用的，方法体中定义的变量，作用域并不一定会覆盖整个方法体，如果当前字节码PC计数器的值已经超过了某个变量的作用域，那么这个变量对应的 Slot 就可以交给其他变量使用。这样的设计不仅仅是为了节省空间，在某些情况下 Slot 的复用会直接影响到系统的而垃圾收集行为。\n\n### 操作数栈\n\n* 操作数栈又常被称为操作栈，操作数栈的最大深度也是在编译的时候就确定了。32 位数据类型所占的栈容量为 1,64 位数据类型所占的栈容量为 2。当一个方法开始执行时，它的操作栈是空的，在方法的执行过程中，会有各种字节码指令（比如：加操作、赋值元算等）向操作栈中写入和提取内容，也就是入栈和出栈操作。\n* Java 虚拟机的解释执行引擎称为“基于栈的执行引擎”，其中所指的“栈”就是操作数栈。因此我们也称 Java 虚拟机是基于栈的，这点不同于 Android 虚拟机，Android 虚拟机是基于寄存器的。\n* 基于栈的指令集最主要的优点是可移植性强，主要的缺点是执行速度相对会慢些；而由于寄存器由硬件直接提供，所以基于寄存器指令集最主要的优点是执行速度快，主要的缺点是可移植性差。\n\n### 动态连接\n\n* 每个栈帧都包含一个指向运行时常量池（在方法区中，后面介绍）中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态连接。Class 文件的常量池中存在有大量的符号引用，字节码中的方法调用指令就以常量池中指向方法的符号引用为参数。这些符号引用，一部分会在类加载阶段或第一次使用的时候转化为直接引用（如 final、static 域等），称为静态解析，另一部分将在每一次的运行期间转化为直接引用，这部分称为动态连接。\n\n### 方法返回地址\n\n* 当一个方法被执行后，有两种方式退出该方法：执行引擎遇到了任意一个方法返回的字节码指令或遇到了异常，并且该异常没有在方法体内得到处理。无论采用何种退出方式，在方法退出之后，都需要返回到方法被调用的位置，程序才能继续执行。方法返回时可能需要在栈帧中保存一些信息，用来帮助恢复它的上层方法的执行状态。一般来说，方法正常退出时，调用者的 PC 计数器的值就可以作为返回地址，栈帧中很可能保存了这个计数器值，而方法异常退出时，返回地址是要通过异常处理器来确定的，栈帧中一般不会保存这部分信息。\n* 方法退出的过程实际上等同于把当前栈帧出站，因此退出时可能执行的操作有：恢复上层方法的局部变量表和操作数栈，如果有返回值，则把它压入调用者栈帧的操作数栈中，调整 PC 计数器的值以指向方法调用指令后面的一条指令。\n\n## 本地方法栈\n\n* 该区域与虚拟机栈所发挥的作用非常相似，只是虚拟机栈为虚拟机执行 Java 方法服务，而本地方法栈则为使用到的本地操作系统（Native）方法服务。\n\n## Java 堆\n\n* Java Heap 是 Java 虚拟机所管理的内存中最大的一块，它是所有线程共享的一块内存区域。几乎所有的对象实例和数组都在这类分配内存。Java Heap 是垃圾收集器管理的主要区域，因此很多时候也被称为“GC堆”。\n* 根据 Java 虚拟机规范的规定，Java 堆可以处在物理上不连续的内存空间中，只要逻辑上是连续的即可。如果在堆中没有内存可分配时，并且堆也无法扩展时，将会抛出 OutOfMemoryError 异常。\n\n## 方法区\n\n* 方法区也是各个线程共享的内存区域，它用于存储已经被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。\n* 方法区域又被称为“永久代”，但这仅仅对于 Sun HotSpot 来讲，JRockit 和 IBM J9 虚拟机中并不存在永久代的概念。\n* Java 虚拟机规范把方法区描述为 Java 堆的一个逻辑部分，而且它和 Java Heap 一样不需要连续的内存，可以选择固定大小或可扩展，另外，虚拟机规范允许该区域可以选择不实现垃圾回收。相对而言，垃圾收集行为在这个区域比较少出现。该区域的内存回收目标主要针是对废弃常量的和无用类的回收。\n* 运行时常量池是方法区的一部分，Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池（Class文件常量池），用于存放编译器生成的各种字面量和符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。\n* 运行时常量池相对于 Class 文件常量池的另一个重要特征是具备动态性，Java 语言并不要求常量一定只能在编译期产生，也就是并非预置入 Class 文件中的常量池的内容才能进入方法区的运行时常量池，运行期间也可能将新的常量放入池中，这种特性被开发人员利用比较多的是 String 类的 intern（）方法。\n\n## 直接内存\n\n* 直接内存并不是虚拟机运行时数据区的一部分，也不是 Java 虚拟机规范中定义的内存区域，它直接从操作系统中分配，因此不受 Java 堆大小的限制，但是会受到本机总内存的大小及处理器寻址空间的限制，因此它也可能导致 OutOfMemoryError 异常出现。\n* 在 JDK1.4 中新引入了 NIO 机制，它是一种基于通道与缓冲区的新 I/O 方式，可以直接从操作系统中分配直接内存，即在堆外分配内存，这样能在一些场景中提高性能，因为避免了在 Java 堆和 Native 堆中来回复制数据。\n* 根据 Java 虚拟机规范的规定，当方法区无法满足内存分配需求时，将抛出 OutOfMemoryError 异常。\n\n## 内存溢出\n\n* 在多线程情况下，给每个线程的栈分配的内存越大，反而越容易产生内存溢出异常。操作系统为每个进程分配的内存是有限制的，虚拟机提供了参数来控制 Java 堆和方法区这两部分内存的最大值，忽略掉程序计数器消耗的内存（很小），以及进程本身消耗的内存，剩下的内存便给了虚拟机栈和本地方法栈，每个线程分配到的栈容量越大，可以建立的线程数量自然就越少。因此，如果是建立过多的线程导致的内存溢出，在不能减少线程数的情况下，就只能通过减少最大堆和每个线程的栈容量来换取更多的线程。\n* 内存泄露是指分配出去的内存没有被回收回来，由于失去了对该内存区域的控制，因而造成了资源的浪费。Java 中一般不会产生内存泄露，因为有垃圾回收器自动回收垃圾，但这也不绝对，当我们 new 了对象，并保存了其引用，但是后面一直没用它，而垃圾回收器又不会去回收它，这边会造成内存泄露，\n* 内存溢出是指程序所需要的内存超出了系统所能分配的内存（包括动态扩展）的上限。\n\n## 对象实例化分析\n\n``` java\nObject obj = new Object();\n```\n* 假设该语句出现在方法体中，obj 会作为引用类型（reference）的数据保存在 Java 栈的本地变量表中，而会在 Java 堆中保存该引用的实例化对象，Java 堆中还包含能查找到此对象类型数据的地址信息（如对象类型、父类、实现的接口、方法等），这些类型数据则保存在方法区中。\n* 由于 reference 类型在 Java 虚拟机规范里面只规定了一个指向对象的引用，并没有定义这个引用应该通过哪种方式去定位，以及访问到 Java 堆中的对象的具体位置，因此不同虚拟机实现的对象访问方式会有所不同，主流的访问方式有两种：使用句柄池和直接使用指针。这两种对象的访问方式各有优势，使用句柄访问方式的最大好处就是 reference 中存放的是稳定的句柄地址，在对象被移动（垃圾收集时移动对象是非常普遍的行为）时只会改变句柄中的实例数据指针，而 reference 本身不需要修改。使用直接指针访问方式的最大好处是速度快，它节省了一次指针定位的时间开销。目前 Java 默认使用的 HotSpot 虚拟机采用的便是是第二种方式进行对象访问的。\n  ![句柄池访问](http://wiki.jikexueyuan.com/project/java-vm/images/javastack.png)\n  ![直接指针访问](http://wiki.jikexueyuan.com/project/java-vm/images/javastack1.png)\n\n## 类文件结构\n\n* Class 文件是一组以8位字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑地排列在 Class 文件中，中间没有添加任何分隔符，这使得整个 Class 文件中存储的内容几乎全部都是程序运行的必要数据。\n* 根据 Java 虚拟机规范的规定，Class 文件格式采用一种类似于 C 语言结构体的伪结构来存储，这种伪结构中只有两种数据类型：无符号数和表。无符号数属于基本数据类型，以 u1、u2、u4、u8 来分别代表 1、2、4、8 个字节的无符号数。表是由多个无符号数或其他表作为数据项构成的符合数据类型，所有的表都习惯性地以“_info”结尾。\n\n## magic 与 version\n\n* 每个 Class 文件的头 4 个字节称为魔数（magic），它的唯一作用是判断该文件是否为一个能被虚拟机接受的 Class 文件。它的值固定为 0xCAFEBABE。紧接着 magic 的 4 个字节存储的是 Class 文件的次版本号和主版本号，高版本的 JDK 能向下兼容低版本的 Class 文件，但不能运行更高版本的 Class 文件。\n\n## 类初始化\n\n* 遇到 new、getstatic、putstatic、invokestatic 这四条字节码指令时，如果类还没有进行过初始化，则需要先触发其初始化。生成这四条指令最常见的 Java 代码场景是：使用 new 关键字实例化对象时、读取或设置一个类的静态字段（static）时（被 static 修饰又被 final 修饰的，已在编译期把结果放入常量池的静态字段除外）、以及调用一个类的静态方法时。\n* 使用 Java.lang.refect 包的方法对类进行反射调用时，如果类还没有进行过初始化，则需要先触发其初始化。\n* 当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。\n* 当虚拟机启动时，用户需要指定一个要执行的主类，虚拟机会先执行该主类。\n* 通过子类引用父类中的静态字段，这时对子类的引用为被动引用，因此不会初始化子类，只会初始化父类：\n* 常量在编译阶段会存入调用它的类的常量池中，本质上没有直接引用到定义该常量的类，因此不会触发定义常量的类的初始化\n* 通过数组定义来引用类，不会触发类的初始化但是会触发了另一个名为“LLConst”的类的初始化，它是一个由虚拟机自动生成的、直接继承于java.lang.Object 的子类，创建动作由字节码指令 newarray 触发，很明显，这是一个对数组引用类型的初初始化，而该数组中的元素仅仅包含一个对 Const 类的引用，并没有对其进行初始化。如果我们加入对 con 数组中各个 Const 类元素的实例化代码，便会触发 Const 类的初始化\n* 接口也有初始化过程，在接口中不能使用“static{}”语句块，但编译器仍然会为接口生成类构造器，用于初始化接口中定义的成员变量（实际上是 static final 修饰的全局常量）。二者在初始化时最主要的区别是：当一个类在初始化时，要求其父类全部已经初始化过了，但是一个接口在初始化时，并不要求其父接口全部都完成了初始化，只有在真正使用到父接口的时候（如引用接口中定义的常量），才会初始化该父接口。这点也与类初始化的情况很不同，调用类中的 static final 常量时并不会 触发该类的初始化，但是调用接口中的 static final 常量时便会触发该接口的初始化。\n\n\n## 类加载机制 ？？？\n\n\n## 多态性实现机制——静态分派与动态分派 ？？？\n\n\n## Java 语法糖\n* 语法糖（Syntactic Sugar），也称糖衣语法，是由英国计算机学家 Peter.J.Landin 发明的一个术语，指在计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。\n* Java 中最常用的语法糖主要有泛型、变长参数、条件编译、自动拆装箱、内部类等。虚拟机并不支持这些语法，它们在编译阶段就被还原回了简单的基础语法结构，这个过程成为解语法糖。\n\n* 泛型是 JDK1.5 之后引入的一项新特性，Java 语言在还没有出现泛型时，只能通过 Object 是所有类型的父类和类型强制转换这两个特点的配合来实现泛型的功能，这样实现的泛型功能要在程序运行期才能知道 Object 真正的对象类型，在 javac 编译期，编译器无法检查这个 Object 的强制转型是否成功，这便将一些风险转接到了程序运行期中。Java 语言在 JDK1.5 之后引入的泛型实际上只在程序源码中存在，在编译后的字节码文件中，就已经被替换为了原来的原生类型，并且在相应的地方插入了强制转型代码，所以泛型技术实际上是 Java 语言的一颗语法糖，Java 语言中的泛型实现方法称为类型擦除，基于这种方法实现的泛型被称为伪泛型。\n\n\n## javac 编译\n\n* javac 编译器称为前端编译器，将*.java文件编译成为*.class文件。相对应的还有后端编译器，它在程序运行期间将字节码转变成机器码（现在的 Java 程序在运行时基本都是解释执行加编译执行），如 HotSpot 虚拟机自带的 JIT（Just In Time Compiler）编译器（分 Client 端和 Server 端）。\n\n### 词法、语法分析\n\n* 词法分析是将源代码的字符流转变为标记（Token）集合。单个字符是程序编写过程中的的最小元素，而标记则是编译过程的最小元素，关键字、变量名、字面量、运算符等都可以成为标记，比如整型标志 int 由三个字符构成，但是它只是一个标记，不可拆分。\n* 语法分析是根据Token序列来构造抽象语法树的过程。抽象语法树是一种用来描述程序代码语法结构的树形表示方式，语法树的每一个节点都代表着程序代码中的一个语法结构，如 bao、类型、修饰符、运算符等。经过这个步骤后，编译器就基本不会再对源码文件进行操作了，后续的操作都建立在抽象语法树之上。\n\n### 填充符号表\n\n* 完成了语法分析和词法分析之后，下一步就是填充符号表的过程。符号表是由一组符号地址和符号信息构成的表格。符号表中所登记的信息在编译的不同阶段都要用到，在语义分析中，符号表所登记的内容将用于语义检查和产生中间代码，在目标代码生成阶段，党对符号名进行地址分配时，符号表是地址分配的依据。\n\n### 语义分析\n\n* 语法树能表示一个结构正确的源程序的抽象，但无法保证源程序是符合逻辑的。而语义分析的主要任务是读结构上正确的源程序进行上下文有关性质的审查。语义分析过程分为标注检查和数据及控制流分析两个步骤：\n* 标注检查步骤检查的内容包括诸如变量使用前是否已被声明、变量和赋值之间的数据类型是否匹配等。\n* 数据及控制流分析是对程序上下文逻辑更进一步的验证，它可以检查出诸如程序局部变量在使用前是否有赋值、方法的每条路径是否都有返回值、是否所有的受查异常都被正确处理了等问题。\n\n### 字节码生成\n\n* 字节码生成是 javac 编译过程的最后一个阶段。字节码生成阶段不仅仅是把前面各个步骤所生成的信息转化成字节码写到磁盘中，编译器还进行了少量的代码添加和转换工作。 实例构造器()方法和类构造器()方法就是在这个阶段添加到语法树之中的（这里的实例构造器并不是指默认的构造函数，而是指我们自己重载的构造函数，如果用户代码中没有提供任何构造函数，那编译器会自动添加一个没有参数、访问权限与当前类一致的默认构造函数，这个工作在填充符号表阶段就已经完成了）。\n\n## JIT 编译\n\n* Java 程序最初是仅仅通过解释器解释执行的，即对字节码逐条解释执行，这种方式的执行速度相对会比较慢，尤其当某个方法或代码块运行的特别频繁时，这种方式的执行效率就显得很低。于是后来在虚拟机中引入了 JIT 编译器（即时编译器），当虚拟机发现某个方法或代码块运行特别频繁时，就会把这些代码认定为“Hot Spot Code”（热点代码），为了提高热点代码的执行效率，在运行时，虚拟机将会把这些代码编译成与本地平台相关的机器码，并进行各层次的优化，完成这项任务的正是 JIT 编译器。\n* HotSpot 虚拟机中内置了两个JIT编译器：Client Complier 和 Server Complier，分别用在客户端和服务端，目前主流的 HotSpot 虚拟机中默认是采用解释器与其中一个编译器直接配合的方式工作。\n\n### 运行过程中会被即时编译器编译的“热点代码”有两类：\n\n* 被多次调用的方法。\n* 被多次调用的循环体。\n\n### 目前主要的热点判定方式\n\n* 基于采样的热点探测：采用这种方法的虚拟机会周期性地检查各个线程的栈顶，如果发现某些方法经常出现在栈顶，那这段方法代码就是“热点代码”。这种探测方法的好处是实现简单高效，还可以很容易地获取方法调用关系，缺点是很难精确地确认一个方法的热度，容易因为受到线程阻塞或别的外界因素的影响而扰乱热点探测。\n* 基于计数器的热点探测：采用这种方法的虚拟机会为每个方法，甚至是代码块建立计数器，统计方法的执行次数，如果执行次数超过一定的阀值，就认为它是“热点方法”。这种统计方法实现复杂一些，需要为每个方法建立并维护计数器，而且不能直接获取到方法的调用关系，但是它的统计结果相对更加精确严谨。\n\n### 在 HotSpot 虚拟机的热点判定方式\n\n* 在 HotSpot 虚拟机中使用的是基于计数器的热点探测方法，因此它为每个方法准备了两个计数器：方法调用计数器和回边计数器。\n* 方法调用计数器用来统计方法调用的次数，在默认设置下，方法调用计数器统计的并不是方法被调用的绝对次数，而是一个相对的执行频率，即一段时间内方法被调用的次数。\n* 回边计数器用于统计一个方法中循环体代码执行的次数（准确地说，应该是回边的次数，因为并非所有的循环都是回边），在字节码中遇到控制流向后跳转的指令就称为“回边”。\n* 在确定虚拟机运行参数的前提下，这两个计数器都有一个确定的阀值，当计数器的值超过了阀值，就会触发JIT编译。触发了 JIT 编译后，在默认设置下，执行引擎并不会同步等待编译请求完成，而是继续进入解释器按照解释方式执行字节码，直到提交的请求被编译器编译完成为止（编译工作在后台线程中进行）。当编译工作完成后，下一次调用该方法或代码时，就会使用已编译的版本。\n\n## 对象引用\n\nJava 中的垃圾回收一般是在 Java 堆中进行，因为堆中几乎存放了 Java 中所有的对象实例。在 JDK1.2 之前，Java 中的引用定义很很纯粹：如果 reference 类型的数据中存储的数值代表的是另外一块内存的起始地址，就称这块数据代表着一个引用。但在 JDK1.2 之后，Java 对引用的概念进行了扩充，将其分为强引用（Strong Reference）、软引用（Soft Reference）、弱引用（Weak Reference）、虚引用（Phantom Reference）四种，引用强度依次减弱。\n* 强引用：如“Object obj = new Object（）”，这类引用是 Java 程序中最普遍的。只要强引用还存在，垃圾收集器就永远不会回收掉被引用的对象。\n* 软引用：它用来描述一些可能还有用，但并非必须的对象。在系统内存不够用时，这类引用关联的对象将被垃圾收集器回收。JDK1.2 之后提供了 SoftReference 类来实现软引用。\n* 弱引用：它也是用来描述非需对象的，但它的强度比软引用更弱些，被弱引用关联的对象只能生存岛下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在 JDK1.2 之后，提供了 WeakReference 类来实现弱引用。\n* 虚引用：最弱的一种引用关系，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的是希望能在这个对象被收集器回收时收到一个系统通知。JDK1.2 之后提供了 PhantomReference 类来实现虚引用。\n\n## 垃圾对象的判定\n\n### 引用计数算法\n\n* 给对象添加一个引用计数器，每当有一个地方引用它时，计数器值就加 1，当引用失效时，计数器值就减1，任何时刻计数器都为 0 的对象就是不可能再被使用的。\n* 引用计数算法的实现简单，判定效率也很高，在大部分情况下它都是一个不错的选择，当 Java 语言并没有选择这种算法来进行垃圾回收，主要原因是它很难解决对象之间的相互循环引用问题。\n\n### 根搜索算法\n\n* 这种算法的基本思路是通过一系列名为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链，当一个对象到 GC Roots 没有任何引用链相连时，就证明此对象是不可用的。Java 和 C# 中都是采用根搜索算法来判定对象是否存活的。\n* 在根搜索算法中，要真正宣告一个对象死亡，至少要经历两次标记过程：如果对象在进行根搜索后发现没有与 GC Roots 相连接的引用链，那它会被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行 finalize()方法。当对象没有覆盖 finalize()方法，或 finalize()方法已经被虚拟机调用过，虚拟机将这两种情况都视为没有必要执行。如果该对象被判定为有必要执行 finalize()方法，那么这个对象将会被放置在一个名为 F-Queue 队列中，并在稍后由一条由虚拟机自动建立的、低优先级的 Finalizer 线程去执行 finalize()方法。finalize()方法是对象逃脱死亡命运的最后一次机会（因为一个对象的 finalize()方法最多只会被系统自动调用一次），稍后 GC 将对 F-Queue 中的对象进行第二次小规模的标记，如果要在 finalize()方法中成功拯救自己，只要在 finalize()方法中让该对象重引用链上的任何一个对象建立关联即可。而如果对象这时还没有关联到任何链上的引用，那它就会被回收掉。\n\n## 垃圾收集算法\n\n### 标记—清除算法\n\n* 标记—清除算法是最基础的收集算法，它分为“标记”和“清除”两个阶段：首先标记出所需回收的对象，在标记完成后统一回收掉所有被标记的对象，它的标记过程其实就是前面的根搜索算法中判定垃圾对象的标记过程。（会造成大量的内存碎片）\n\n### 标记—整理算法\n\n* 复制算法比较适合于新生代，在老年代中，对象存活率比较高，如果执行较多的复制操作，效率将会变低，所以老年代一般会选用其他算法，如标记—整理算法。该算法标记的过程与标记—清除算法中的标记过程一样，但对标记后出的垃圾对象的处理情况有所不同，它不是直接对可回收对象进行清理，而是让所有的对象都向一端移动，然后直接清理掉端边界以外的内存。（不会产生内存碎片，成本相对较高）\n\n### 分代收集\n\n* 当前商业虚拟机的垃圾收集 都采用分代收集，它根据对象的存活周期的不同将内存划分为几块，一般是把 Java 堆分为新生代和老年代。在新生代中，每次垃圾收集时都会发现有大量对象死去，只有少量存活，因此可选用复制算法来完成收集，而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用标记—清除算法或标记—整理算法来进行回收。\n\n## 垃圾收集器\n\n### 内存的分配策\n\n* 对象优先在 Eden 分配。\n* 大对象直接进入老年代。\n* 长期存活的对象将进入老年代。\n\n### 垃圾回收策略\n\n* 新生代 GC（Minor GC）：发生在新生代的垃圾收集动作，因为 Java 对象大多都具有朝生夕灭的特性，因此Minor GC 非常频繁，一般回收速度也比较快。\n* 老年代 GC（Major GC/Full GC）：发生在老年代的 GC，出现了 Major GC，经常会伴随至少一次 Minor GC。由于老年代中的对象生命周期比较长，因此 Major GC 并不频繁，一般都是等待老年代满了后才进行 Full GC，而且其速度一般会比 Minor GC 慢 10 倍以上。另外，如果分配了 Direct Memory，在老年代中进行 Full GC时，会顺便清理掉 Direct Memory 中的废弃对象。\n\n## 性能调优\n\n* 我们可以通过给 Java 虚拟机分配超大堆（前提是物理机的内存足够大）来提升服务器的响应速度，但分配超大堆的前提是有把握把应用程序的 Full GC 频率控制得足够低，因为一次 Full GC 的时间造成比较长时间的停顿。控制 Full GC 频率的关键是保证应用中绝大多数对象的生存周期不应太长，尤其不能产生批量的、生命周期长的大对象，这样才能保证老年代的稳定。\n* Direct Memory 在堆内存外分配，而且二者均受限于物理机内存，且成负相关关系，因此分配超大堆时，如果用到了 NIO 机制分配使用了很多的 Direct Memory，则有可能导致 Direct Memory 的 OutOfMemoryError 异常，这时可以通过 -XX:MaxDirectMemorySize 参数调整 Direct Memory 的大小。\n\n<br>","source":"_posts/Java/jvm.md","raw":"title: 深入理解 Java 虚拟机笔记\ndate: 2016-12-6\ntags:\n    - note\n    - jvm\ncategories:\n    - Java\n---\n\nJava 虚拟机屏蔽了与具体操作系统平台相关的信息,使得 Java 语言编译程序只需生成在 Java 虚拟机上运行的目标代码(字节码),就可以在多种平台上不加修改地运行。Java 虚拟机在执行字节码时,实际上最终还是把字节码解释成具体平台上的机器指令执行。\n\n<!-- more -->\n\n## Java 的优点\n\n* 是一门结构严谨、面向对象的编程语言。\n* 摆脱了硬件平台的束缚，实现了“一次编写，到处运行”的理想。\n* 提供了一种相对安全的内存管理和访问机制，避免了绝大部分的内存泄漏和指针越界问题。\n* 实现了热点代码检测和运行时编译及优化，使得 Java 应用能随着运行时间的增加而获得更高的性能。\n* 有一套完善的应用程序接口和无数的来自商业机构和开源社区的第三方类库来帮助实现各种各样的功能。\n\n## Java 平台的逻辑结构\n\n![Java 平台的逻辑结构](http://wiki.jikexueyuan.com/project/java-vm/images/jvmstructure.gif)\n\n## JVM\n\n* JVM 是一种基于下层的操作系统和硬件平台并利用软件方法来实现的抽象的计算机，可以在上面执行 Java 的字节码程序。简单的说，JVM 就是 Java 的虚拟机,有了 JVM 才能运行 Java 程序。\n* Java 编译器只需面向 JVM，生成 JVM 能理解的代码或字节码文件。Java 源文件经编译器，编译成字节码程序，通过 JVM 将每一条指令翻译成不同平台机器码，通过特定平台运行。\n  ![JVM 自身的物理结构](http://wiki.jikexueyuan.com/project/java-vm/images/jvm.gif)\n\n## class 文件的组成\n* 结构信息。包括 class 文件格式版本号及各部分的数量与大小的信息。\n* 元数据。对应于 Java 源码中声明与常量的信息。包含类/继承的超类/实现的接口的声明信息、域与方法声明信息和常量池。\n* 方法信息。对应 Java 源码中语句和表达式对应的信息。包含字节码、异常处理器表、求值栈与局部变量区大小、求值栈的类型记录、调试符号信息。\n\n## 类的层次关系和加载顺序\n\n![类的层次关系和加载顺序](http://wiki.jikexueyuan.com/project/java-vm/images/jvmclass.gif)\n\n## 类执行机制\n\n* JVM 是基于栈的体系结构来执行 class 字节码的。线程创建后，都会产生程序计数器（PC）和栈（Stack），程序计数器存放下一条要执行的指令在方法内的偏移量，栈中存放一个个栈帧，每个栈帧对应着每个方法的每次调用，而栈帧又是有局部变量区和操作数栈两部分组成，局部变量区用于存放方法中的局部变量和参数，操作数栈中用于存放方法执行过程中产生的中间结果。\n\n\n## 内存区域\n\n* Java 虚拟机在执行 Java 程序的过程中会把他所管理的内存划分为若干个不同的数据区域。\n* Java 虚拟机规范将 JVM 所管理的内存分为以下几个运行时数据区：程序计数器、Java 虚拟机栈、本地方法栈、Java 堆、方法区。\n  ![内存区域图](http://wiki.jikexueyuan.com/project/java-vm/images/jvmdata.png)\n\n## 程序计数器\n\n* 一块较小的内存空间，它是当前线程所执行的字节码的行号指示器，字节码解释器工作时通过改变该计数器的值来选择下一条需要执行的字节码指令，分支、跳转、循环等基础功能都要依赖它来实现。\n* 每条线程都有一个独立的的程序计数器，各线程间的计数器互不影响，因此该区域是线程私有的。\n* 当线程在执行一个 Java 方法时，该计数器记录的是正在执行的虚拟机字节码指令的地址，当线程在执行的是 Native 方法（调用本地操作系统方法）时，该计数器的值为空。\n* 该内存区域是唯一一个在 Java 虚拟机规范中么有规定任何 OOM（内存溢出：OutOfMemoryError）情况的区域。\n\n## Java 虚拟机栈\n\n* 该区域也是线程私有的，它的生命周期也与线程相同。\n* 虚拟机栈描述的是 Java 方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧，栈它是用于支持续虚拟机进行方法调用和方法执行的数据结构。\n* 对于执行引擎来讲，活动线程中，只有栈顶的栈帧是有效的，称为当前栈帧，这个栈帧所关联的方法称为当前方法，执行引擎所运行的所有字节码指令都只针对当前栈帧进行操作。\n* 栈帧用于存储局部变量表、操作数栈、动态链接、方法返回地址和一些额外的附加信息。\n* 在编译程序代码时，栈帧中需要多大的局部变量表、多深的操作数栈都已经完全确定了，并且写入了方法表的 Code 属性之中。因此，一个栈帧需要分配多少内存，不会受到程序运行期变量数据的影响，而仅仅取决于具体的虚拟机实现。\n\n## Java 虚拟机栈的异常\n\n* 在 Java 虚拟机规范中，对这个区域规定了两种异常情况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常。如果虚拟机在动态扩展栈时无法申请到足够的内存空间，则抛出OutOfMemoryError异常。\n* 这两种情况存在着一些互相重叠的地方：当栈空间无法继续分配时，到底是内存太小，还是已使用的栈空间太大，其本质上只是对同一件事情的两种描述而已。在单线程的操作中，无论是由于栈帧太大，还是虚拟机栈空间太小，当栈空间无法分配时，虚拟机抛出的都是 StackOverflowError 异常，而不会得到 OutOfMemoryError 异常。而在多线程环境下，则会抛出 OutOfMemoryError 异常。\n\n\n### 局部变量表\n\n* 局部变量表是一组变量值存储空间，用于存放方法参数和方法内部定义的局部变量，其中存放的数据的类型是编译期可知的各种基本数据类型、对象引用（reference）和 returnAddress 类型（它指向了一条字节码指令的地址）。局部变量表所需的内存空间在编译期间完成分配，即在 Java 程序被编译成 Class 文件时，就确定了所需分配的最大局部变量表的容量。当进入一个方法时，这个方法需要在栈中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。\n* 局部变量表的容量以变量槽（Slot）为最小单位。在虚拟机规范中并没有明确指明一个 Slot 应占用的内存空间大小（允许其随着处理器、操作系统或虚拟机的不同而发生变化），一个 Slot 可以存放一个32位以内的数据类型：boolean、byte、char、short、int、float、reference 和 returnAddresss。reference 是对象的引用类型，returnAddress 是为字节指令服务的，它执行了一条字节码指令的地址。对于 64 位的数据类型（long和double），虚拟机会以高位在前的方式为其分配两个连续的 Slot 空间。\n* 虚拟机通过索引定位的方式使用局部变量表，索引值的范围是从 0 开始到局部变量表最大的 Slot 数量，对于 32 位数据类型的变量，索引 n 代表第 n 个 Slot，对于 64 位的，索引 n 代表第 n 和第 n+1 两个 Slot。\n* 在方法执行时，虚拟机是使用局部变量表来完成参数值到参数变量列表的传递过程的，如果是实例方法（非static），则局部变量表中的第 0 位索引的 Slot 默认是用于传递方法所属对象实例的引用，在方法中可以通过关键字“this”来访问这个隐含的参数。其余参数则按照参数表的顺序来排列，占用从1开始的局部变量 Slot，参数表分配完毕后，再根据方法体内部定义的变量顺序和作用域分配其余的 Slot。\n* 局部变量表中的 Slot 是可重用的，方法体中定义的变量，作用域并不一定会覆盖整个方法体，如果当前字节码PC计数器的值已经超过了某个变量的作用域，那么这个变量对应的 Slot 就可以交给其他变量使用。这样的设计不仅仅是为了节省空间，在某些情况下 Slot 的复用会直接影响到系统的而垃圾收集行为。\n\n### 操作数栈\n\n* 操作数栈又常被称为操作栈，操作数栈的最大深度也是在编译的时候就确定了。32 位数据类型所占的栈容量为 1,64 位数据类型所占的栈容量为 2。当一个方法开始执行时，它的操作栈是空的，在方法的执行过程中，会有各种字节码指令（比如：加操作、赋值元算等）向操作栈中写入和提取内容，也就是入栈和出栈操作。\n* Java 虚拟机的解释执行引擎称为“基于栈的执行引擎”，其中所指的“栈”就是操作数栈。因此我们也称 Java 虚拟机是基于栈的，这点不同于 Android 虚拟机，Android 虚拟机是基于寄存器的。\n* 基于栈的指令集最主要的优点是可移植性强，主要的缺点是执行速度相对会慢些；而由于寄存器由硬件直接提供，所以基于寄存器指令集最主要的优点是执行速度快，主要的缺点是可移植性差。\n\n### 动态连接\n\n* 每个栈帧都包含一个指向运行时常量池（在方法区中，后面介绍）中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态连接。Class 文件的常量池中存在有大量的符号引用，字节码中的方法调用指令就以常量池中指向方法的符号引用为参数。这些符号引用，一部分会在类加载阶段或第一次使用的时候转化为直接引用（如 final、static 域等），称为静态解析，另一部分将在每一次的运行期间转化为直接引用，这部分称为动态连接。\n\n### 方法返回地址\n\n* 当一个方法被执行后，有两种方式退出该方法：执行引擎遇到了任意一个方法返回的字节码指令或遇到了异常，并且该异常没有在方法体内得到处理。无论采用何种退出方式，在方法退出之后，都需要返回到方法被调用的位置，程序才能继续执行。方法返回时可能需要在栈帧中保存一些信息，用来帮助恢复它的上层方法的执行状态。一般来说，方法正常退出时，调用者的 PC 计数器的值就可以作为返回地址，栈帧中很可能保存了这个计数器值，而方法异常退出时，返回地址是要通过异常处理器来确定的，栈帧中一般不会保存这部分信息。\n* 方法退出的过程实际上等同于把当前栈帧出站，因此退出时可能执行的操作有：恢复上层方法的局部变量表和操作数栈，如果有返回值，则把它压入调用者栈帧的操作数栈中，调整 PC 计数器的值以指向方法调用指令后面的一条指令。\n\n## 本地方法栈\n\n* 该区域与虚拟机栈所发挥的作用非常相似，只是虚拟机栈为虚拟机执行 Java 方法服务，而本地方法栈则为使用到的本地操作系统（Native）方法服务。\n\n## Java 堆\n\n* Java Heap 是 Java 虚拟机所管理的内存中最大的一块，它是所有线程共享的一块内存区域。几乎所有的对象实例和数组都在这类分配内存。Java Heap 是垃圾收集器管理的主要区域，因此很多时候也被称为“GC堆”。\n* 根据 Java 虚拟机规范的规定，Java 堆可以处在物理上不连续的内存空间中，只要逻辑上是连续的即可。如果在堆中没有内存可分配时，并且堆也无法扩展时，将会抛出 OutOfMemoryError 异常。\n\n## 方法区\n\n* 方法区也是各个线程共享的内存区域，它用于存储已经被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。\n* 方法区域又被称为“永久代”，但这仅仅对于 Sun HotSpot 来讲，JRockit 和 IBM J9 虚拟机中并不存在永久代的概念。\n* Java 虚拟机规范把方法区描述为 Java 堆的一个逻辑部分，而且它和 Java Heap 一样不需要连续的内存，可以选择固定大小或可扩展，另外，虚拟机规范允许该区域可以选择不实现垃圾回收。相对而言，垃圾收集行为在这个区域比较少出现。该区域的内存回收目标主要针是对废弃常量的和无用类的回收。\n* 运行时常量池是方法区的一部分，Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池（Class文件常量池），用于存放编译器生成的各种字面量和符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。\n* 运行时常量池相对于 Class 文件常量池的另一个重要特征是具备动态性，Java 语言并不要求常量一定只能在编译期产生，也就是并非预置入 Class 文件中的常量池的内容才能进入方法区的运行时常量池，运行期间也可能将新的常量放入池中，这种特性被开发人员利用比较多的是 String 类的 intern（）方法。\n\n## 直接内存\n\n* 直接内存并不是虚拟机运行时数据区的一部分，也不是 Java 虚拟机规范中定义的内存区域，它直接从操作系统中分配，因此不受 Java 堆大小的限制，但是会受到本机总内存的大小及处理器寻址空间的限制，因此它也可能导致 OutOfMemoryError 异常出现。\n* 在 JDK1.4 中新引入了 NIO 机制，它是一种基于通道与缓冲区的新 I/O 方式，可以直接从操作系统中分配直接内存，即在堆外分配内存，这样能在一些场景中提高性能，因为避免了在 Java 堆和 Native 堆中来回复制数据。\n* 根据 Java 虚拟机规范的规定，当方法区无法满足内存分配需求时，将抛出 OutOfMemoryError 异常。\n\n## 内存溢出\n\n* 在多线程情况下，给每个线程的栈分配的内存越大，反而越容易产生内存溢出异常。操作系统为每个进程分配的内存是有限制的，虚拟机提供了参数来控制 Java 堆和方法区这两部分内存的最大值，忽略掉程序计数器消耗的内存（很小），以及进程本身消耗的内存，剩下的内存便给了虚拟机栈和本地方法栈，每个线程分配到的栈容量越大，可以建立的线程数量自然就越少。因此，如果是建立过多的线程导致的内存溢出，在不能减少线程数的情况下，就只能通过减少最大堆和每个线程的栈容量来换取更多的线程。\n* 内存泄露是指分配出去的内存没有被回收回来，由于失去了对该内存区域的控制，因而造成了资源的浪费。Java 中一般不会产生内存泄露，因为有垃圾回收器自动回收垃圾，但这也不绝对，当我们 new 了对象，并保存了其引用，但是后面一直没用它，而垃圾回收器又不会去回收它，这边会造成内存泄露，\n* 内存溢出是指程序所需要的内存超出了系统所能分配的内存（包括动态扩展）的上限。\n\n## 对象实例化分析\n\n``` java\nObject obj = new Object();\n```\n* 假设该语句出现在方法体中，obj 会作为引用类型（reference）的数据保存在 Java 栈的本地变量表中，而会在 Java 堆中保存该引用的实例化对象，Java 堆中还包含能查找到此对象类型数据的地址信息（如对象类型、父类、实现的接口、方法等），这些类型数据则保存在方法区中。\n* 由于 reference 类型在 Java 虚拟机规范里面只规定了一个指向对象的引用，并没有定义这个引用应该通过哪种方式去定位，以及访问到 Java 堆中的对象的具体位置，因此不同虚拟机实现的对象访问方式会有所不同，主流的访问方式有两种：使用句柄池和直接使用指针。这两种对象的访问方式各有优势，使用句柄访问方式的最大好处就是 reference 中存放的是稳定的句柄地址，在对象被移动（垃圾收集时移动对象是非常普遍的行为）时只会改变句柄中的实例数据指针，而 reference 本身不需要修改。使用直接指针访问方式的最大好处是速度快，它节省了一次指针定位的时间开销。目前 Java 默认使用的 HotSpot 虚拟机采用的便是是第二种方式进行对象访问的。\n  ![句柄池访问](http://wiki.jikexueyuan.com/project/java-vm/images/javastack.png)\n  ![直接指针访问](http://wiki.jikexueyuan.com/project/java-vm/images/javastack1.png)\n\n## 类文件结构\n\n* Class 文件是一组以8位字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑地排列在 Class 文件中，中间没有添加任何分隔符，这使得整个 Class 文件中存储的内容几乎全部都是程序运行的必要数据。\n* 根据 Java 虚拟机规范的规定，Class 文件格式采用一种类似于 C 语言结构体的伪结构来存储，这种伪结构中只有两种数据类型：无符号数和表。无符号数属于基本数据类型，以 u1、u2、u4、u8 来分别代表 1、2、4、8 个字节的无符号数。表是由多个无符号数或其他表作为数据项构成的符合数据类型，所有的表都习惯性地以“_info”结尾。\n\n## magic 与 version\n\n* 每个 Class 文件的头 4 个字节称为魔数（magic），它的唯一作用是判断该文件是否为一个能被虚拟机接受的 Class 文件。它的值固定为 0xCAFEBABE。紧接着 magic 的 4 个字节存储的是 Class 文件的次版本号和主版本号，高版本的 JDK 能向下兼容低版本的 Class 文件，但不能运行更高版本的 Class 文件。\n\n## 类初始化\n\n* 遇到 new、getstatic、putstatic、invokestatic 这四条字节码指令时，如果类还没有进行过初始化，则需要先触发其初始化。生成这四条指令最常见的 Java 代码场景是：使用 new 关键字实例化对象时、读取或设置一个类的静态字段（static）时（被 static 修饰又被 final 修饰的，已在编译期把结果放入常量池的静态字段除外）、以及调用一个类的静态方法时。\n* 使用 Java.lang.refect 包的方法对类进行反射调用时，如果类还没有进行过初始化，则需要先触发其初始化。\n* 当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。\n* 当虚拟机启动时，用户需要指定一个要执行的主类，虚拟机会先执行该主类。\n* 通过子类引用父类中的静态字段，这时对子类的引用为被动引用，因此不会初始化子类，只会初始化父类：\n* 常量在编译阶段会存入调用它的类的常量池中，本质上没有直接引用到定义该常量的类，因此不会触发定义常量的类的初始化\n* 通过数组定义来引用类，不会触发类的初始化但是会触发了另一个名为“LLConst”的类的初始化，它是一个由虚拟机自动生成的、直接继承于java.lang.Object 的子类，创建动作由字节码指令 newarray 触发，很明显，这是一个对数组引用类型的初初始化，而该数组中的元素仅仅包含一个对 Const 类的引用，并没有对其进行初始化。如果我们加入对 con 数组中各个 Const 类元素的实例化代码，便会触发 Const 类的初始化\n* 接口也有初始化过程，在接口中不能使用“static{}”语句块，但编译器仍然会为接口生成类构造器，用于初始化接口中定义的成员变量（实际上是 static final 修饰的全局常量）。二者在初始化时最主要的区别是：当一个类在初始化时，要求其父类全部已经初始化过了，但是一个接口在初始化时，并不要求其父接口全部都完成了初始化，只有在真正使用到父接口的时候（如引用接口中定义的常量），才会初始化该父接口。这点也与类初始化的情况很不同，调用类中的 static final 常量时并不会 触发该类的初始化，但是调用接口中的 static final 常量时便会触发该接口的初始化。\n\n\n## 类加载机制 ？？？\n\n\n## 多态性实现机制——静态分派与动态分派 ？？？\n\n\n## Java 语法糖\n* 语法糖（Syntactic Sugar），也称糖衣语法，是由英国计算机学家 Peter.J.Landin 发明的一个术语，指在计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。\n* Java 中最常用的语法糖主要有泛型、变长参数、条件编译、自动拆装箱、内部类等。虚拟机并不支持这些语法，它们在编译阶段就被还原回了简单的基础语法结构，这个过程成为解语法糖。\n\n* 泛型是 JDK1.5 之后引入的一项新特性，Java 语言在还没有出现泛型时，只能通过 Object 是所有类型的父类和类型强制转换这两个特点的配合来实现泛型的功能，这样实现的泛型功能要在程序运行期才能知道 Object 真正的对象类型，在 javac 编译期，编译器无法检查这个 Object 的强制转型是否成功，这便将一些风险转接到了程序运行期中。Java 语言在 JDK1.5 之后引入的泛型实际上只在程序源码中存在，在编译后的字节码文件中，就已经被替换为了原来的原生类型，并且在相应的地方插入了强制转型代码，所以泛型技术实际上是 Java 语言的一颗语法糖，Java 语言中的泛型实现方法称为类型擦除，基于这种方法实现的泛型被称为伪泛型。\n\n\n## javac 编译\n\n* javac 编译器称为前端编译器，将*.java文件编译成为*.class文件。相对应的还有后端编译器，它在程序运行期间将字节码转变成机器码（现在的 Java 程序在运行时基本都是解释执行加编译执行），如 HotSpot 虚拟机自带的 JIT（Just In Time Compiler）编译器（分 Client 端和 Server 端）。\n\n### 词法、语法分析\n\n* 词法分析是将源代码的字符流转变为标记（Token）集合。单个字符是程序编写过程中的的最小元素，而标记则是编译过程的最小元素，关键字、变量名、字面量、运算符等都可以成为标记，比如整型标志 int 由三个字符构成，但是它只是一个标记，不可拆分。\n* 语法分析是根据Token序列来构造抽象语法树的过程。抽象语法树是一种用来描述程序代码语法结构的树形表示方式，语法树的每一个节点都代表着程序代码中的一个语法结构，如 bao、类型、修饰符、运算符等。经过这个步骤后，编译器就基本不会再对源码文件进行操作了，后续的操作都建立在抽象语法树之上。\n\n### 填充符号表\n\n* 完成了语法分析和词法分析之后，下一步就是填充符号表的过程。符号表是由一组符号地址和符号信息构成的表格。符号表中所登记的信息在编译的不同阶段都要用到，在语义分析中，符号表所登记的内容将用于语义检查和产生中间代码，在目标代码生成阶段，党对符号名进行地址分配时，符号表是地址分配的依据。\n\n### 语义分析\n\n* 语法树能表示一个结构正确的源程序的抽象，但无法保证源程序是符合逻辑的。而语义分析的主要任务是读结构上正确的源程序进行上下文有关性质的审查。语义分析过程分为标注检查和数据及控制流分析两个步骤：\n* 标注检查步骤检查的内容包括诸如变量使用前是否已被声明、变量和赋值之间的数据类型是否匹配等。\n* 数据及控制流分析是对程序上下文逻辑更进一步的验证，它可以检查出诸如程序局部变量在使用前是否有赋值、方法的每条路径是否都有返回值、是否所有的受查异常都被正确处理了等问题。\n\n### 字节码生成\n\n* 字节码生成是 javac 编译过程的最后一个阶段。字节码生成阶段不仅仅是把前面各个步骤所生成的信息转化成字节码写到磁盘中，编译器还进行了少量的代码添加和转换工作。 实例构造器()方法和类构造器()方法就是在这个阶段添加到语法树之中的（这里的实例构造器并不是指默认的构造函数，而是指我们自己重载的构造函数，如果用户代码中没有提供任何构造函数，那编译器会自动添加一个没有参数、访问权限与当前类一致的默认构造函数，这个工作在填充符号表阶段就已经完成了）。\n\n## JIT 编译\n\n* Java 程序最初是仅仅通过解释器解释执行的，即对字节码逐条解释执行，这种方式的执行速度相对会比较慢，尤其当某个方法或代码块运行的特别频繁时，这种方式的执行效率就显得很低。于是后来在虚拟机中引入了 JIT 编译器（即时编译器），当虚拟机发现某个方法或代码块运行特别频繁时，就会把这些代码认定为“Hot Spot Code”（热点代码），为了提高热点代码的执行效率，在运行时，虚拟机将会把这些代码编译成与本地平台相关的机器码，并进行各层次的优化，完成这项任务的正是 JIT 编译器。\n* HotSpot 虚拟机中内置了两个JIT编译器：Client Complier 和 Server Complier，分别用在客户端和服务端，目前主流的 HotSpot 虚拟机中默认是采用解释器与其中一个编译器直接配合的方式工作。\n\n### 运行过程中会被即时编译器编译的“热点代码”有两类：\n\n* 被多次调用的方法。\n* 被多次调用的循环体。\n\n### 目前主要的热点判定方式\n\n* 基于采样的热点探测：采用这种方法的虚拟机会周期性地检查各个线程的栈顶，如果发现某些方法经常出现在栈顶，那这段方法代码就是“热点代码”。这种探测方法的好处是实现简单高效，还可以很容易地获取方法调用关系，缺点是很难精确地确认一个方法的热度，容易因为受到线程阻塞或别的外界因素的影响而扰乱热点探测。\n* 基于计数器的热点探测：采用这种方法的虚拟机会为每个方法，甚至是代码块建立计数器，统计方法的执行次数，如果执行次数超过一定的阀值，就认为它是“热点方法”。这种统计方法实现复杂一些，需要为每个方法建立并维护计数器，而且不能直接获取到方法的调用关系，但是它的统计结果相对更加精确严谨。\n\n### 在 HotSpot 虚拟机的热点判定方式\n\n* 在 HotSpot 虚拟机中使用的是基于计数器的热点探测方法，因此它为每个方法准备了两个计数器：方法调用计数器和回边计数器。\n* 方法调用计数器用来统计方法调用的次数，在默认设置下，方法调用计数器统计的并不是方法被调用的绝对次数，而是一个相对的执行频率，即一段时间内方法被调用的次数。\n* 回边计数器用于统计一个方法中循环体代码执行的次数（准确地说，应该是回边的次数，因为并非所有的循环都是回边），在字节码中遇到控制流向后跳转的指令就称为“回边”。\n* 在确定虚拟机运行参数的前提下，这两个计数器都有一个确定的阀值，当计数器的值超过了阀值，就会触发JIT编译。触发了 JIT 编译后，在默认设置下，执行引擎并不会同步等待编译请求完成，而是继续进入解释器按照解释方式执行字节码，直到提交的请求被编译器编译完成为止（编译工作在后台线程中进行）。当编译工作完成后，下一次调用该方法或代码时，就会使用已编译的版本。\n\n## 对象引用\n\nJava 中的垃圾回收一般是在 Java 堆中进行，因为堆中几乎存放了 Java 中所有的对象实例。在 JDK1.2 之前，Java 中的引用定义很很纯粹：如果 reference 类型的数据中存储的数值代表的是另外一块内存的起始地址，就称这块数据代表着一个引用。但在 JDK1.2 之后，Java 对引用的概念进行了扩充，将其分为强引用（Strong Reference）、软引用（Soft Reference）、弱引用（Weak Reference）、虚引用（Phantom Reference）四种，引用强度依次减弱。\n* 强引用：如“Object obj = new Object（）”，这类引用是 Java 程序中最普遍的。只要强引用还存在，垃圾收集器就永远不会回收掉被引用的对象。\n* 软引用：它用来描述一些可能还有用，但并非必须的对象。在系统内存不够用时，这类引用关联的对象将被垃圾收集器回收。JDK1.2 之后提供了 SoftReference 类来实现软引用。\n* 弱引用：它也是用来描述非需对象的，但它的强度比软引用更弱些，被弱引用关联的对象只能生存岛下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在 JDK1.2 之后，提供了 WeakReference 类来实现弱引用。\n* 虚引用：最弱的一种引用关系，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的是希望能在这个对象被收集器回收时收到一个系统通知。JDK1.2 之后提供了 PhantomReference 类来实现虚引用。\n\n## 垃圾对象的判定\n\n### 引用计数算法\n\n* 给对象添加一个引用计数器，每当有一个地方引用它时，计数器值就加 1，当引用失效时，计数器值就减1，任何时刻计数器都为 0 的对象就是不可能再被使用的。\n* 引用计数算法的实现简单，判定效率也很高，在大部分情况下它都是一个不错的选择，当 Java 语言并没有选择这种算法来进行垃圾回收，主要原因是它很难解决对象之间的相互循环引用问题。\n\n### 根搜索算法\n\n* 这种算法的基本思路是通过一系列名为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链，当一个对象到 GC Roots 没有任何引用链相连时，就证明此对象是不可用的。Java 和 C# 中都是采用根搜索算法来判定对象是否存活的。\n* 在根搜索算法中，要真正宣告一个对象死亡，至少要经历两次标记过程：如果对象在进行根搜索后发现没有与 GC Roots 相连接的引用链，那它会被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行 finalize()方法。当对象没有覆盖 finalize()方法，或 finalize()方法已经被虚拟机调用过，虚拟机将这两种情况都视为没有必要执行。如果该对象被判定为有必要执行 finalize()方法，那么这个对象将会被放置在一个名为 F-Queue 队列中，并在稍后由一条由虚拟机自动建立的、低优先级的 Finalizer 线程去执行 finalize()方法。finalize()方法是对象逃脱死亡命运的最后一次机会（因为一个对象的 finalize()方法最多只会被系统自动调用一次），稍后 GC 将对 F-Queue 中的对象进行第二次小规模的标记，如果要在 finalize()方法中成功拯救自己，只要在 finalize()方法中让该对象重引用链上的任何一个对象建立关联即可。而如果对象这时还没有关联到任何链上的引用，那它就会被回收掉。\n\n## 垃圾收集算法\n\n### 标记—清除算法\n\n* 标记—清除算法是最基础的收集算法，它分为“标记”和“清除”两个阶段：首先标记出所需回收的对象，在标记完成后统一回收掉所有被标记的对象，它的标记过程其实就是前面的根搜索算法中判定垃圾对象的标记过程。（会造成大量的内存碎片）\n\n### 标记—整理算法\n\n* 复制算法比较适合于新生代，在老年代中，对象存活率比较高，如果执行较多的复制操作，效率将会变低，所以老年代一般会选用其他算法，如标记—整理算法。该算法标记的过程与标记—清除算法中的标记过程一样，但对标记后出的垃圾对象的处理情况有所不同，它不是直接对可回收对象进行清理，而是让所有的对象都向一端移动，然后直接清理掉端边界以外的内存。（不会产生内存碎片，成本相对较高）\n\n### 分代收集\n\n* 当前商业虚拟机的垃圾收集 都采用分代收集，它根据对象的存活周期的不同将内存划分为几块，一般是把 Java 堆分为新生代和老年代。在新生代中，每次垃圾收集时都会发现有大量对象死去，只有少量存活，因此可选用复制算法来完成收集，而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用标记—清除算法或标记—整理算法来进行回收。\n\n## 垃圾收集器\n\n### 内存的分配策\n\n* 对象优先在 Eden 分配。\n* 大对象直接进入老年代。\n* 长期存活的对象将进入老年代。\n\n### 垃圾回收策略\n\n* 新生代 GC（Minor GC）：发生在新生代的垃圾收集动作，因为 Java 对象大多都具有朝生夕灭的特性，因此Minor GC 非常频繁，一般回收速度也比较快。\n* 老年代 GC（Major GC/Full GC）：发生在老年代的 GC，出现了 Major GC，经常会伴随至少一次 Minor GC。由于老年代中的对象生命周期比较长，因此 Major GC 并不频繁，一般都是等待老年代满了后才进行 Full GC，而且其速度一般会比 Minor GC 慢 10 倍以上。另外，如果分配了 Direct Memory，在老年代中进行 Full GC时，会顺便清理掉 Direct Memory 中的废弃对象。\n\n## 性能调优\n\n* 我们可以通过给 Java 虚拟机分配超大堆（前提是物理机的内存足够大）来提升服务器的响应速度，但分配超大堆的前提是有把握把应用程序的 Full GC 频率控制得足够低，因为一次 Full GC 的时间造成比较长时间的停顿。控制 Full GC 频率的关键是保证应用中绝大多数对象的生存周期不应太长，尤其不能产生批量的、生命周期长的大对象，这样才能保证老年代的稳定。\n* Direct Memory 在堆内存外分配，而且二者均受限于物理机内存，且成负相关关系，因此分配超大堆时，如果用到了 NIO 机制分配使用了很多的 Direct Memory，则有可能导致 Direct Memory 的 OutOfMemoryError 异常，这时可以通过 -XX:MaxDirectMemorySize 参数调整 Direct Memory 的大小。\n\n<br>","slug":"Java/jvm","published":1,"updated":"2018-04-05T11:32:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfoy712k000kacie2wxmhtt6","content":"<p>Java 虚拟机屏蔽了与具体操作系统平台相关的信息,使得 Java 语言编译程序只需生成在 Java 虚拟机上运行的目标代码(字节码),就可以在多种平台上不加修改地运行。Java 虚拟机在执行字节码时,实际上最终还是把字节码解释成具体平台上的机器指令执行。</p>\n<a id=\"more\"></a>\n<h2 id=\"Java-的优点\"><a href=\"#Java-的优点\" class=\"headerlink\" title=\"Java 的优点\"></a>Java 的优点</h2><ul>\n<li>是一门结构严谨、面向对象的编程语言。</li>\n<li>摆脱了硬件平台的束缚，实现了“一次编写，到处运行”的理想。</li>\n<li>提供了一种相对安全的内存管理和访问机制，避免了绝大部分的内存泄漏和指针越界问题。</li>\n<li>实现了热点代码检测和运行时编译及优化，使得 Java 应用能随着运行时间的增加而获得更高的性能。</li>\n<li>有一套完善的应用程序接口和无数的来自商业机构和开源社区的第三方类库来帮助实现各种各样的功能。</li>\n</ul>\n<h2 id=\"Java-平台的逻辑结构\"><a href=\"#Java-平台的逻辑结构\" class=\"headerlink\" title=\"Java 平台的逻辑结构\"></a>Java 平台的逻辑结构</h2><p><img src=\"http://wiki.jikexueyuan.com/project/java-vm/images/jvmstructure.gif\" alt=\"Java 平台的逻辑结构\"></p>\n<h2 id=\"JVM\"><a href=\"#JVM\" class=\"headerlink\" title=\"JVM\"></a>JVM</h2><ul>\n<li>JVM 是一种基于下层的操作系统和硬件平台并利用软件方法来实现的抽象的计算机，可以在上面执行 Java 的字节码程序。简单的说，JVM 就是 Java 的虚拟机,有了 JVM 才能运行 Java 程序。</li>\n<li>Java 编译器只需面向 JVM，生成 JVM 能理解的代码或字节码文件。Java 源文件经编译器，编译成字节码程序，通过 JVM 将每一条指令翻译成不同平台机器码，通过特定平台运行。<br><img src=\"http://wiki.jikexueyuan.com/project/java-vm/images/jvm.gif\" alt=\"JVM 自身的物理结构\"></li>\n</ul>\n<h2 id=\"class-文件的组成\"><a href=\"#class-文件的组成\" class=\"headerlink\" title=\"class 文件的组成\"></a>class 文件的组成</h2><ul>\n<li>结构信息。包括 class 文件格式版本号及各部分的数量与大小的信息。</li>\n<li>元数据。对应于 Java 源码中声明与常量的信息。包含类/继承的超类/实现的接口的声明信息、域与方法声明信息和常量池。</li>\n<li>方法信息。对应 Java 源码中语句和表达式对应的信息。包含字节码、异常处理器表、求值栈与局部变量区大小、求值栈的类型记录、调试符号信息。</li>\n</ul>\n<h2 id=\"类的层次关系和加载顺序\"><a href=\"#类的层次关系和加载顺序\" class=\"headerlink\" title=\"类的层次关系和加载顺序\"></a>类的层次关系和加载顺序</h2><p><img src=\"http://wiki.jikexueyuan.com/project/java-vm/images/jvmclass.gif\" alt=\"类的层次关系和加载顺序\"></p>\n<h2 id=\"类执行机制\"><a href=\"#类执行机制\" class=\"headerlink\" title=\"类执行机制\"></a>类执行机制</h2><ul>\n<li>JVM 是基于栈的体系结构来执行 class 字节码的。线程创建后，都会产生程序计数器（PC）和栈（Stack），程序计数器存放下一条要执行的指令在方法内的偏移量，栈中存放一个个栈帧，每个栈帧对应着每个方法的每次调用，而栈帧又是有局部变量区和操作数栈两部分组成，局部变量区用于存放方法中的局部变量和参数，操作数栈中用于存放方法执行过程中产生的中间结果。</li>\n</ul>\n<h2 id=\"内存区域\"><a href=\"#内存区域\" class=\"headerlink\" title=\"内存区域\"></a>内存区域</h2><ul>\n<li>Java 虚拟机在执行 Java 程序的过程中会把他所管理的内存划分为若干个不同的数据区域。</li>\n<li>Java 虚拟机规范将 JVM 所管理的内存分为以下几个运行时数据区：程序计数器、Java 虚拟机栈、本地方法栈、Java 堆、方法区。<br><img src=\"http://wiki.jikexueyuan.com/project/java-vm/images/jvmdata.png\" alt=\"内存区域图\"></li>\n</ul>\n<h2 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h2><ul>\n<li>一块较小的内存空间，它是当前线程所执行的字节码的行号指示器，字节码解释器工作时通过改变该计数器的值来选择下一条需要执行的字节码指令，分支、跳转、循环等基础功能都要依赖它来实现。</li>\n<li>每条线程都有一个独立的的程序计数器，各线程间的计数器互不影响，因此该区域是线程私有的。</li>\n<li>当线程在执行一个 Java 方法时，该计数器记录的是正在执行的虚拟机字节码指令的地址，当线程在执行的是 Native 方法（调用本地操作系统方法）时，该计数器的值为空。</li>\n<li>该内存区域是唯一一个在 Java 虚拟机规范中么有规定任何 OOM（内存溢出：OutOfMemoryError）情况的区域。</li>\n</ul>\n<h2 id=\"Java-虚拟机栈\"><a href=\"#Java-虚拟机栈\" class=\"headerlink\" title=\"Java 虚拟机栈\"></a>Java 虚拟机栈</h2><ul>\n<li>该区域也是线程私有的，它的生命周期也与线程相同。</li>\n<li>虚拟机栈描述的是 Java 方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧，栈它是用于支持续虚拟机进行方法调用和方法执行的数据结构。</li>\n<li>对于执行引擎来讲，活动线程中，只有栈顶的栈帧是有效的，称为当前栈帧，这个栈帧所关联的方法称为当前方法，执行引擎所运行的所有字节码指令都只针对当前栈帧进行操作。</li>\n<li>栈帧用于存储局部变量表、操作数栈、动态链接、方法返回地址和一些额外的附加信息。</li>\n<li>在编译程序代码时，栈帧中需要多大的局部变量表、多深的操作数栈都已经完全确定了，并且写入了方法表的 Code 属性之中。因此，一个栈帧需要分配多少内存，不会受到程序运行期变量数据的影响，而仅仅取决于具体的虚拟机实现。</li>\n</ul>\n<h2 id=\"Java-虚拟机栈的异常\"><a href=\"#Java-虚拟机栈的异常\" class=\"headerlink\" title=\"Java 虚拟机栈的异常\"></a>Java 虚拟机栈的异常</h2><ul>\n<li>在 Java 虚拟机规范中，对这个区域规定了两种异常情况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常。如果虚拟机在动态扩展栈时无法申请到足够的内存空间，则抛出OutOfMemoryError异常。</li>\n<li>这两种情况存在着一些互相重叠的地方：当栈空间无法继续分配时，到底是内存太小，还是已使用的栈空间太大，其本质上只是对同一件事情的两种描述而已。在单线程的操作中，无论是由于栈帧太大，还是虚拟机栈空间太小，当栈空间无法分配时，虚拟机抛出的都是 StackOverflowError 异常，而不会得到 OutOfMemoryError 异常。而在多线程环境下，则会抛出 OutOfMemoryError 异常。</li>\n</ul>\n<h3 id=\"局部变量表\"><a href=\"#局部变量表\" class=\"headerlink\" title=\"局部变量表\"></a>局部变量表</h3><ul>\n<li>局部变量表是一组变量值存储空间，用于存放方法参数和方法内部定义的局部变量，其中存放的数据的类型是编译期可知的各种基本数据类型、对象引用（reference）和 returnAddress 类型（它指向了一条字节码指令的地址）。局部变量表所需的内存空间在编译期间完成分配，即在 Java 程序被编译成 Class 文件时，就确定了所需分配的最大局部变量表的容量。当进入一个方法时，这个方法需要在栈中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。</li>\n<li>局部变量表的容量以变量槽（Slot）为最小单位。在虚拟机规范中并没有明确指明一个 Slot 应占用的内存空间大小（允许其随着处理器、操作系统或虚拟机的不同而发生变化），一个 Slot 可以存放一个32位以内的数据类型：boolean、byte、char、short、int、float、reference 和 returnAddresss。reference 是对象的引用类型，returnAddress 是为字节指令服务的，它执行了一条字节码指令的地址。对于 64 位的数据类型（long和double），虚拟机会以高位在前的方式为其分配两个连续的 Slot 空间。</li>\n<li>虚拟机通过索引定位的方式使用局部变量表，索引值的范围是从 0 开始到局部变量表最大的 Slot 数量，对于 32 位数据类型的变量，索引 n 代表第 n 个 Slot，对于 64 位的，索引 n 代表第 n 和第 n+1 两个 Slot。</li>\n<li>在方法执行时，虚拟机是使用局部变量表来完成参数值到参数变量列表的传递过程的，如果是实例方法（非static），则局部变量表中的第 0 位索引的 Slot 默认是用于传递方法所属对象实例的引用，在方法中可以通过关键字“this”来访问这个隐含的参数。其余参数则按照参数表的顺序来排列，占用从1开始的局部变量 Slot，参数表分配完毕后，再根据方法体内部定义的变量顺序和作用域分配其余的 Slot。</li>\n<li>局部变量表中的 Slot 是可重用的，方法体中定义的变量，作用域并不一定会覆盖整个方法体，如果当前字节码PC计数器的值已经超过了某个变量的作用域，那么这个变量对应的 Slot 就可以交给其他变量使用。这样的设计不仅仅是为了节省空间，在某些情况下 Slot 的复用会直接影响到系统的而垃圾收集行为。</li>\n</ul>\n<h3 id=\"操作数栈\"><a href=\"#操作数栈\" class=\"headerlink\" title=\"操作数栈\"></a>操作数栈</h3><ul>\n<li>操作数栈又常被称为操作栈，操作数栈的最大深度也是在编译的时候就确定了。32 位数据类型所占的栈容量为 1,64 位数据类型所占的栈容量为 2。当一个方法开始执行时，它的操作栈是空的，在方法的执行过程中，会有各种字节码指令（比如：加操作、赋值元算等）向操作栈中写入和提取内容，也就是入栈和出栈操作。</li>\n<li>Java 虚拟机的解释执行引擎称为“基于栈的执行引擎”，其中所指的“栈”就是操作数栈。因此我们也称 Java 虚拟机是基于栈的，这点不同于 Android 虚拟机，Android 虚拟机是基于寄存器的。</li>\n<li>基于栈的指令集最主要的优点是可移植性强，主要的缺点是执行速度相对会慢些；而由于寄存器由硬件直接提供，所以基于寄存器指令集最主要的优点是执行速度快，主要的缺点是可移植性差。</li>\n</ul>\n<h3 id=\"动态连接\"><a href=\"#动态连接\" class=\"headerlink\" title=\"动态连接\"></a>动态连接</h3><ul>\n<li>每个栈帧都包含一个指向运行时常量池（在方法区中，后面介绍）中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态连接。Class 文件的常量池中存在有大量的符号引用，字节码中的方法调用指令就以常量池中指向方法的符号引用为参数。这些符号引用，一部分会在类加载阶段或第一次使用的时候转化为直接引用（如 final、static 域等），称为静态解析，另一部分将在每一次的运行期间转化为直接引用，这部分称为动态连接。</li>\n</ul>\n<h3 id=\"方法返回地址\"><a href=\"#方法返回地址\" class=\"headerlink\" title=\"方法返回地址\"></a>方法返回地址</h3><ul>\n<li>当一个方法被执行后，有两种方式退出该方法：执行引擎遇到了任意一个方法返回的字节码指令或遇到了异常，并且该异常没有在方法体内得到处理。无论采用何种退出方式，在方法退出之后，都需要返回到方法被调用的位置，程序才能继续执行。方法返回时可能需要在栈帧中保存一些信息，用来帮助恢复它的上层方法的执行状态。一般来说，方法正常退出时，调用者的 PC 计数器的值就可以作为返回地址，栈帧中很可能保存了这个计数器值，而方法异常退出时，返回地址是要通过异常处理器来确定的，栈帧中一般不会保存这部分信息。</li>\n<li>方法退出的过程实际上等同于把当前栈帧出站，因此退出时可能执行的操作有：恢复上层方法的局部变量表和操作数栈，如果有返回值，则把它压入调用者栈帧的操作数栈中，调整 PC 计数器的值以指向方法调用指令后面的一条指令。</li>\n</ul>\n<h2 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h2><ul>\n<li>该区域与虚拟机栈所发挥的作用非常相似，只是虚拟机栈为虚拟机执行 Java 方法服务，而本地方法栈则为使用到的本地操作系统（Native）方法服务。</li>\n</ul>\n<h2 id=\"Java-堆\"><a href=\"#Java-堆\" class=\"headerlink\" title=\"Java 堆\"></a>Java 堆</h2><ul>\n<li>Java Heap 是 Java 虚拟机所管理的内存中最大的一块，它是所有线程共享的一块内存区域。几乎所有的对象实例和数组都在这类分配内存。Java Heap 是垃圾收集器管理的主要区域，因此很多时候也被称为“GC堆”。</li>\n<li>根据 Java 虚拟机规范的规定，Java 堆可以处在物理上不连续的内存空间中，只要逻辑上是连续的即可。如果在堆中没有内存可分配时，并且堆也无法扩展时，将会抛出 OutOfMemoryError 异常。</li>\n</ul>\n<h2 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h2><ul>\n<li>方法区也是各个线程共享的内存区域，它用于存储已经被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</li>\n<li>方法区域又被称为“永久代”，但这仅仅对于 Sun HotSpot 来讲，JRockit 和 IBM J9 虚拟机中并不存在永久代的概念。</li>\n<li>Java 虚拟机规范把方法区描述为 Java 堆的一个逻辑部分，而且它和 Java Heap 一样不需要连续的内存，可以选择固定大小或可扩展，另外，虚拟机规范允许该区域可以选择不实现垃圾回收。相对而言，垃圾收集行为在这个区域比较少出现。该区域的内存回收目标主要针是对废弃常量的和无用类的回收。</li>\n<li>运行时常量池是方法区的一部分，Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池（Class文件常量池），用于存放编译器生成的各种字面量和符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。</li>\n<li>运行时常量池相对于 Class 文件常量池的另一个重要特征是具备动态性，Java 语言并不要求常量一定只能在编译期产生，也就是并非预置入 Class 文件中的常量池的内容才能进入方法区的运行时常量池，运行期间也可能将新的常量放入池中，这种特性被开发人员利用比较多的是 String 类的 intern（）方法。</li>\n</ul>\n<h2 id=\"直接内存\"><a href=\"#直接内存\" class=\"headerlink\" title=\"直接内存\"></a>直接内存</h2><ul>\n<li>直接内存并不是虚拟机运行时数据区的一部分，也不是 Java 虚拟机规范中定义的内存区域，它直接从操作系统中分配，因此不受 Java 堆大小的限制，但是会受到本机总内存的大小及处理器寻址空间的限制，因此它也可能导致 OutOfMemoryError 异常出现。</li>\n<li>在 JDK1.4 中新引入了 NIO 机制，它是一种基于通道与缓冲区的新 I/O 方式，可以直接从操作系统中分配直接内存，即在堆外分配内存，这样能在一些场景中提高性能，因为避免了在 Java 堆和 Native 堆中来回复制数据。</li>\n<li>根据 Java 虚拟机规范的规定，当方法区无法满足内存分配需求时，将抛出 OutOfMemoryError 异常。</li>\n</ul>\n<h2 id=\"内存溢出\"><a href=\"#内存溢出\" class=\"headerlink\" title=\"内存溢出\"></a>内存溢出</h2><ul>\n<li>在多线程情况下，给每个线程的栈分配的内存越大，反而越容易产生内存溢出异常。操作系统为每个进程分配的内存是有限制的，虚拟机提供了参数来控制 Java 堆和方法区这两部分内存的最大值，忽略掉程序计数器消耗的内存（很小），以及进程本身消耗的内存，剩下的内存便给了虚拟机栈和本地方法栈，每个线程分配到的栈容量越大，可以建立的线程数量自然就越少。因此，如果是建立过多的线程导致的内存溢出，在不能减少线程数的情况下，就只能通过减少最大堆和每个线程的栈容量来换取更多的线程。</li>\n<li>内存泄露是指分配出去的内存没有被回收回来，由于失去了对该内存区域的控制，因而造成了资源的浪费。Java 中一般不会产生内存泄露，因为有垃圾回收器自动回收垃圾，但这也不绝对，当我们 new 了对象，并保存了其引用，但是后面一直没用它，而垃圾回收器又不会去回收它，这边会造成内存泄露，</li>\n<li>内存溢出是指程序所需要的内存超出了系统所能分配的内存（包括动态扩展）的上限。</li>\n</ul>\n<h2 id=\"对象实例化分析\"><a href=\"#对象实例化分析\" class=\"headerlink\" title=\"对象实例化分析\"></a>对象实例化分析</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object obj = <span class=\"keyword\">new</span> Object();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>假设该语句出现在方法体中，obj 会作为引用类型（reference）的数据保存在 Java 栈的本地变量表中，而会在 Java 堆中保存该引用的实例化对象，Java 堆中还包含能查找到此对象类型数据的地址信息（如对象类型、父类、实现的接口、方法等），这些类型数据则保存在方法区中。</li>\n<li>由于 reference 类型在 Java 虚拟机规范里面只规定了一个指向对象的引用，并没有定义这个引用应该通过哪种方式去定位，以及访问到 Java 堆中的对象的具体位置，因此不同虚拟机实现的对象访问方式会有所不同，主流的访问方式有两种：使用句柄池和直接使用指针。这两种对象的访问方式各有优势，使用句柄访问方式的最大好处就是 reference 中存放的是稳定的句柄地址，在对象被移动（垃圾收集时移动对象是非常普遍的行为）时只会改变句柄中的实例数据指针，而 reference 本身不需要修改。使用直接指针访问方式的最大好处是速度快，它节省了一次指针定位的时间开销。目前 Java 默认使用的 HotSpot 虚拟机采用的便是是第二种方式进行对象访问的。<br><img src=\"http://wiki.jikexueyuan.com/project/java-vm/images/javastack.png\" alt=\"句柄池访问\"><br><img src=\"http://wiki.jikexueyuan.com/project/java-vm/images/javastack1.png\" alt=\"直接指针访问\"></li>\n</ul>\n<h2 id=\"类文件结构\"><a href=\"#类文件结构\" class=\"headerlink\" title=\"类文件结构\"></a>类文件结构</h2><ul>\n<li>Class 文件是一组以8位字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑地排列在 Class 文件中，中间没有添加任何分隔符，这使得整个 Class 文件中存储的内容几乎全部都是程序运行的必要数据。</li>\n<li>根据 Java 虚拟机规范的规定，Class 文件格式采用一种类似于 C 语言结构体的伪结构来存储，这种伪结构中只有两种数据类型：无符号数和表。无符号数属于基本数据类型，以 u1、u2、u4、u8 来分别代表 1、2、4、8 个字节的无符号数。表是由多个无符号数或其他表作为数据项构成的符合数据类型，所有的表都习惯性地以“_info”结尾。</li>\n</ul>\n<h2 id=\"magic-与-version\"><a href=\"#magic-与-version\" class=\"headerlink\" title=\"magic 与 version\"></a>magic 与 version</h2><ul>\n<li>每个 Class 文件的头 4 个字节称为魔数（magic），它的唯一作用是判断该文件是否为一个能被虚拟机接受的 Class 文件。它的值固定为 0xCAFEBABE。紧接着 magic 的 4 个字节存储的是 Class 文件的次版本号和主版本号，高版本的 JDK 能向下兼容低版本的 Class 文件，但不能运行更高版本的 Class 文件。</li>\n</ul>\n<h2 id=\"类初始化\"><a href=\"#类初始化\" class=\"headerlink\" title=\"类初始化\"></a>类初始化</h2><ul>\n<li>遇到 new、getstatic、putstatic、invokestatic 这四条字节码指令时，如果类还没有进行过初始化，则需要先触发其初始化。生成这四条指令最常见的 Java 代码场景是：使用 new 关键字实例化对象时、读取或设置一个类的静态字段（static）时（被 static 修饰又被 final 修饰的，已在编译期把结果放入常量池的静态字段除外）、以及调用一个类的静态方法时。</li>\n<li>使用 Java.lang.refect 包的方法对类进行反射调用时，如果类还没有进行过初始化，则需要先触发其初始化。</li>\n<li>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。</li>\n<li>当虚拟机启动时，用户需要指定一个要执行的主类，虚拟机会先执行该主类。</li>\n<li>通过子类引用父类中的静态字段，这时对子类的引用为被动引用，因此不会初始化子类，只会初始化父类：</li>\n<li>常量在编译阶段会存入调用它的类的常量池中，本质上没有直接引用到定义该常量的类，因此不会触发定义常量的类的初始化</li>\n<li>通过数组定义来引用类，不会触发类的初始化但是会触发了另一个名为“LLConst”的类的初始化，它是一个由虚拟机自动生成的、直接继承于java.lang.Object 的子类，创建动作由字节码指令 newarray 触发，很明显，这是一个对数组引用类型的初初始化，而该数组中的元素仅仅包含一个对 Const 类的引用，并没有对其进行初始化。如果我们加入对 con 数组中各个 Const 类元素的实例化代码，便会触发 Const 类的初始化</li>\n<li>接口也有初始化过程，在接口中不能使用“static{}”语句块，但编译器仍然会为接口生成类构造器，用于初始化接口中定义的成员变量（实际上是 static final 修饰的全局常量）。二者在初始化时最主要的区别是：当一个类在初始化时，要求其父类全部已经初始化过了，但是一个接口在初始化时，并不要求其父接口全部都完成了初始化，只有在真正使用到父接口的时候（如引用接口中定义的常量），才会初始化该父接口。这点也与类初始化的情况很不同，调用类中的 static final 常量时并不会 触发该类的初始化，但是调用接口中的 static final 常量时便会触发该接口的初始化。</li>\n</ul>\n<h2 id=\"类加载机制-？？？\"><a href=\"#类加载机制-？？？\" class=\"headerlink\" title=\"类加载机制 ？？？\"></a>类加载机制 ？？？</h2><h2 id=\"多态性实现机制——静态分派与动态分派-？？？\"><a href=\"#多态性实现机制——静态分派与动态分派-？？？\" class=\"headerlink\" title=\"多态性实现机制——静态分派与动态分派 ？？？\"></a>多态性实现机制——静态分派与动态分派 ？？？</h2><h2 id=\"Java-语法糖\"><a href=\"#Java-语法糖\" class=\"headerlink\" title=\"Java 语法糖\"></a>Java 语法糖</h2><ul>\n<li>语法糖（Syntactic Sugar），也称糖衣语法，是由英国计算机学家 Peter.J.Landin 发明的一个术语，指在计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。</li>\n<li><p>Java 中最常用的语法糖主要有泛型、变长参数、条件编译、自动拆装箱、内部类等。虚拟机并不支持这些语法，它们在编译阶段就被还原回了简单的基础语法结构，这个过程成为解语法糖。</p>\n</li>\n<li><p>泛型是 JDK1.5 之后引入的一项新特性，Java 语言在还没有出现泛型时，只能通过 Object 是所有类型的父类和类型强制转换这两个特点的配合来实现泛型的功能，这样实现的泛型功能要在程序运行期才能知道 Object 真正的对象类型，在 javac 编译期，编译器无法检查这个 Object 的强制转型是否成功，这便将一些风险转接到了程序运行期中。Java 语言在 JDK1.5 之后引入的泛型实际上只在程序源码中存在，在编译后的字节码文件中，就已经被替换为了原来的原生类型，并且在相应的地方插入了强制转型代码，所以泛型技术实际上是 Java 语言的一颗语法糖，Java 语言中的泛型实现方法称为类型擦除，基于这种方法实现的泛型被称为伪泛型。</p>\n</li>\n</ul>\n<h2 id=\"javac-编译\"><a href=\"#javac-编译\" class=\"headerlink\" title=\"javac 编译\"></a>javac 编译</h2><ul>\n<li>javac 编译器称为前端编译器，将<em>.java文件编译成为</em>.class文件。相对应的还有后端编译器，它在程序运行期间将字节码转变成机器码（现在的 Java 程序在运行时基本都是解释执行加编译执行），如 HotSpot 虚拟机自带的 JIT（Just In Time Compiler）编译器（分 Client 端和 Server 端）。</li>\n</ul>\n<h3 id=\"词法、语法分析\"><a href=\"#词法、语法分析\" class=\"headerlink\" title=\"词法、语法分析\"></a>词法、语法分析</h3><ul>\n<li>词法分析是将源代码的字符流转变为标记（Token）集合。单个字符是程序编写过程中的的最小元素，而标记则是编译过程的最小元素，关键字、变量名、字面量、运算符等都可以成为标记，比如整型标志 int 由三个字符构成，但是它只是一个标记，不可拆分。</li>\n<li>语法分析是根据Token序列来构造抽象语法树的过程。抽象语法树是一种用来描述程序代码语法结构的树形表示方式，语法树的每一个节点都代表着程序代码中的一个语法结构，如 bao、类型、修饰符、运算符等。经过这个步骤后，编译器就基本不会再对源码文件进行操作了，后续的操作都建立在抽象语法树之上。</li>\n</ul>\n<h3 id=\"填充符号表\"><a href=\"#填充符号表\" class=\"headerlink\" title=\"填充符号表\"></a>填充符号表</h3><ul>\n<li>完成了语法分析和词法分析之后，下一步就是填充符号表的过程。符号表是由一组符号地址和符号信息构成的表格。符号表中所登记的信息在编译的不同阶段都要用到，在语义分析中，符号表所登记的内容将用于语义检查和产生中间代码，在目标代码生成阶段，党对符号名进行地址分配时，符号表是地址分配的依据。</li>\n</ul>\n<h3 id=\"语义分析\"><a href=\"#语义分析\" class=\"headerlink\" title=\"语义分析\"></a>语义分析</h3><ul>\n<li>语法树能表示一个结构正确的源程序的抽象，但无法保证源程序是符合逻辑的。而语义分析的主要任务是读结构上正确的源程序进行上下文有关性质的审查。语义分析过程分为标注检查和数据及控制流分析两个步骤：</li>\n<li>标注检查步骤检查的内容包括诸如变量使用前是否已被声明、变量和赋值之间的数据类型是否匹配等。</li>\n<li>数据及控制流分析是对程序上下文逻辑更进一步的验证，它可以检查出诸如程序局部变量在使用前是否有赋值、方法的每条路径是否都有返回值、是否所有的受查异常都被正确处理了等问题。</li>\n</ul>\n<h3 id=\"字节码生成\"><a href=\"#字节码生成\" class=\"headerlink\" title=\"字节码生成\"></a>字节码生成</h3><ul>\n<li>字节码生成是 javac 编译过程的最后一个阶段。字节码生成阶段不仅仅是把前面各个步骤所生成的信息转化成字节码写到磁盘中，编译器还进行了少量的代码添加和转换工作。 实例构造器()方法和类构造器()方法就是在这个阶段添加到语法树之中的（这里的实例构造器并不是指默认的构造函数，而是指我们自己重载的构造函数，如果用户代码中没有提供任何构造函数，那编译器会自动添加一个没有参数、访问权限与当前类一致的默认构造函数，这个工作在填充符号表阶段就已经完成了）。</li>\n</ul>\n<h2 id=\"JIT-编译\"><a href=\"#JIT-编译\" class=\"headerlink\" title=\"JIT 编译\"></a>JIT 编译</h2><ul>\n<li>Java 程序最初是仅仅通过解释器解释执行的，即对字节码逐条解释执行，这种方式的执行速度相对会比较慢，尤其当某个方法或代码块运行的特别频繁时，这种方式的执行效率就显得很低。于是后来在虚拟机中引入了 JIT 编译器（即时编译器），当虚拟机发现某个方法或代码块运行特别频繁时，就会把这些代码认定为“Hot Spot Code”（热点代码），为了提高热点代码的执行效率，在运行时，虚拟机将会把这些代码编译成与本地平台相关的机器码，并进行各层次的优化，完成这项任务的正是 JIT 编译器。</li>\n<li>HotSpot 虚拟机中内置了两个JIT编译器：Client Complier 和 Server Complier，分别用在客户端和服务端，目前主流的 HotSpot 虚拟机中默认是采用解释器与其中一个编译器直接配合的方式工作。</li>\n</ul>\n<h3 id=\"运行过程中会被即时编译器编译的“热点代码”有两类：\"><a href=\"#运行过程中会被即时编译器编译的“热点代码”有两类：\" class=\"headerlink\" title=\"运行过程中会被即时编译器编译的“热点代码”有两类：\"></a>运行过程中会被即时编译器编译的“热点代码”有两类：</h3><ul>\n<li>被多次调用的方法。</li>\n<li>被多次调用的循环体。</li>\n</ul>\n<h3 id=\"目前主要的热点判定方式\"><a href=\"#目前主要的热点判定方式\" class=\"headerlink\" title=\"目前主要的热点判定方式\"></a>目前主要的热点判定方式</h3><ul>\n<li>基于采样的热点探测：采用这种方法的虚拟机会周期性地检查各个线程的栈顶，如果发现某些方法经常出现在栈顶，那这段方法代码就是“热点代码”。这种探测方法的好处是实现简单高效，还可以很容易地获取方法调用关系，缺点是很难精确地确认一个方法的热度，容易因为受到线程阻塞或别的外界因素的影响而扰乱热点探测。</li>\n<li>基于计数器的热点探测：采用这种方法的虚拟机会为每个方法，甚至是代码块建立计数器，统计方法的执行次数，如果执行次数超过一定的阀值，就认为它是“热点方法”。这种统计方法实现复杂一些，需要为每个方法建立并维护计数器，而且不能直接获取到方法的调用关系，但是它的统计结果相对更加精确严谨。</li>\n</ul>\n<h3 id=\"在-HotSpot-虚拟机的热点判定方式\"><a href=\"#在-HotSpot-虚拟机的热点判定方式\" class=\"headerlink\" title=\"在 HotSpot 虚拟机的热点判定方式\"></a>在 HotSpot 虚拟机的热点判定方式</h3><ul>\n<li>在 HotSpot 虚拟机中使用的是基于计数器的热点探测方法，因此它为每个方法准备了两个计数器：方法调用计数器和回边计数器。</li>\n<li>方法调用计数器用来统计方法调用的次数，在默认设置下，方法调用计数器统计的并不是方法被调用的绝对次数，而是一个相对的执行频率，即一段时间内方法被调用的次数。</li>\n<li>回边计数器用于统计一个方法中循环体代码执行的次数（准确地说，应该是回边的次数，因为并非所有的循环都是回边），在字节码中遇到控制流向后跳转的指令就称为“回边”。</li>\n<li>在确定虚拟机运行参数的前提下，这两个计数器都有一个确定的阀值，当计数器的值超过了阀值，就会触发JIT编译。触发了 JIT 编译后，在默认设置下，执行引擎并不会同步等待编译请求完成，而是继续进入解释器按照解释方式执行字节码，直到提交的请求被编译器编译完成为止（编译工作在后台线程中进行）。当编译工作完成后，下一次调用该方法或代码时，就会使用已编译的版本。</li>\n</ul>\n<h2 id=\"对象引用\"><a href=\"#对象引用\" class=\"headerlink\" title=\"对象引用\"></a>对象引用</h2><p>Java 中的垃圾回收一般是在 Java 堆中进行，因为堆中几乎存放了 Java 中所有的对象实例。在 JDK1.2 之前，Java 中的引用定义很很纯粹：如果 reference 类型的数据中存储的数值代表的是另外一块内存的起始地址，就称这块数据代表着一个引用。但在 JDK1.2 之后，Java 对引用的概念进行了扩充，将其分为强引用（Strong Reference）、软引用（Soft Reference）、弱引用（Weak Reference）、虚引用（Phantom Reference）四种，引用强度依次减弱。</p>\n<ul>\n<li>强引用：如“Object obj = new Object（）”，这类引用是 Java 程序中最普遍的。只要强引用还存在，垃圾收集器就永远不会回收掉被引用的对象。</li>\n<li>软引用：它用来描述一些可能还有用，但并非必须的对象。在系统内存不够用时，这类引用关联的对象将被垃圾收集器回收。JDK1.2 之后提供了 SoftReference 类来实现软引用。</li>\n<li>弱引用：它也是用来描述非需对象的，但它的强度比软引用更弱些，被弱引用关联的对象只能生存岛下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在 JDK1.2 之后，提供了 WeakReference 类来实现弱引用。</li>\n<li>虚引用：最弱的一种引用关系，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的是希望能在这个对象被收集器回收时收到一个系统通知。JDK1.2 之后提供了 PhantomReference 类来实现虚引用。</li>\n</ul>\n<h2 id=\"垃圾对象的判定\"><a href=\"#垃圾对象的判定\" class=\"headerlink\" title=\"垃圾对象的判定\"></a>垃圾对象的判定</h2><h3 id=\"引用计数算法\"><a href=\"#引用计数算法\" class=\"headerlink\" title=\"引用计数算法\"></a>引用计数算法</h3><ul>\n<li>给对象添加一个引用计数器，每当有一个地方引用它时，计数器值就加 1，当引用失效时，计数器值就减1，任何时刻计数器都为 0 的对象就是不可能再被使用的。</li>\n<li>引用计数算法的实现简单，判定效率也很高，在大部分情况下它都是一个不错的选择，当 Java 语言并没有选择这种算法来进行垃圾回收，主要原因是它很难解决对象之间的相互循环引用问题。</li>\n</ul>\n<h3 id=\"根搜索算法\"><a href=\"#根搜索算法\" class=\"headerlink\" title=\"根搜索算法\"></a>根搜索算法</h3><ul>\n<li>这种算法的基本思路是通过一系列名为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链，当一个对象到 GC Roots 没有任何引用链相连时，就证明此对象是不可用的。Java 和 C# 中都是采用根搜索算法来判定对象是否存活的。</li>\n<li>在根搜索算法中，要真正宣告一个对象死亡，至少要经历两次标记过程：如果对象在进行根搜索后发现没有与 GC Roots 相连接的引用链，那它会被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行 finalize()方法。当对象没有覆盖 finalize()方法，或 finalize()方法已经被虚拟机调用过，虚拟机将这两种情况都视为没有必要执行。如果该对象被判定为有必要执行 finalize()方法，那么这个对象将会被放置在一个名为 F-Queue 队列中，并在稍后由一条由虚拟机自动建立的、低优先级的 Finalizer 线程去执行 finalize()方法。finalize()方法是对象逃脱死亡命运的最后一次机会（因为一个对象的 finalize()方法最多只会被系统自动调用一次），稍后 GC 将对 F-Queue 中的对象进行第二次小规模的标记，如果要在 finalize()方法中成功拯救自己，只要在 finalize()方法中让该对象重引用链上的任何一个对象建立关联即可。而如果对象这时还没有关联到任何链上的引用，那它就会被回收掉。</li>\n</ul>\n<h2 id=\"垃圾收集算法\"><a href=\"#垃圾收集算法\" class=\"headerlink\" title=\"垃圾收集算法\"></a>垃圾收集算法</h2><h3 id=\"标记—清除算法\"><a href=\"#标记—清除算法\" class=\"headerlink\" title=\"标记—清除算法\"></a>标记—清除算法</h3><ul>\n<li>标记—清除算法是最基础的收集算法，它分为“标记”和“清除”两个阶段：首先标记出所需回收的对象，在标记完成后统一回收掉所有被标记的对象，它的标记过程其实就是前面的根搜索算法中判定垃圾对象的标记过程。（会造成大量的内存碎片）</li>\n</ul>\n<h3 id=\"标记—整理算法\"><a href=\"#标记—整理算法\" class=\"headerlink\" title=\"标记—整理算法\"></a>标记—整理算法</h3><ul>\n<li>复制算法比较适合于新生代，在老年代中，对象存活率比较高，如果执行较多的复制操作，效率将会变低，所以老年代一般会选用其他算法，如标记—整理算法。该算法标记的过程与标记—清除算法中的标记过程一样，但对标记后出的垃圾对象的处理情况有所不同，它不是直接对可回收对象进行清理，而是让所有的对象都向一端移动，然后直接清理掉端边界以外的内存。（不会产生内存碎片，成本相对较高）</li>\n</ul>\n<h3 id=\"分代收集\"><a href=\"#分代收集\" class=\"headerlink\" title=\"分代收集\"></a>分代收集</h3><ul>\n<li>当前商业虚拟机的垃圾收集 都采用分代收集，它根据对象的存活周期的不同将内存划分为几块，一般是把 Java 堆分为新生代和老年代。在新生代中，每次垃圾收集时都会发现有大量对象死去，只有少量存活，因此可选用复制算法来完成收集，而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用标记—清除算法或标记—整理算法来进行回收。</li>\n</ul>\n<h2 id=\"垃圾收集器\"><a href=\"#垃圾收集器\" class=\"headerlink\" title=\"垃圾收集器\"></a>垃圾收集器</h2><h3 id=\"内存的分配策\"><a href=\"#内存的分配策\" class=\"headerlink\" title=\"内存的分配策\"></a>内存的分配策</h3><ul>\n<li>对象优先在 Eden 分配。</li>\n<li>大对象直接进入老年代。</li>\n<li>长期存活的对象将进入老年代。</li>\n</ul>\n<h3 id=\"垃圾回收策略\"><a href=\"#垃圾回收策略\" class=\"headerlink\" title=\"垃圾回收策略\"></a>垃圾回收策略</h3><ul>\n<li>新生代 GC（Minor GC）：发生在新生代的垃圾收集动作，因为 Java 对象大多都具有朝生夕灭的特性，因此Minor GC 非常频繁，一般回收速度也比较快。</li>\n<li>老年代 GC（Major GC/Full GC）：发生在老年代的 GC，出现了 Major GC，经常会伴随至少一次 Minor GC。由于老年代中的对象生命周期比较长，因此 Major GC 并不频繁，一般都是等待老年代满了后才进行 Full GC，而且其速度一般会比 Minor GC 慢 10 倍以上。另外，如果分配了 Direct Memory，在老年代中进行 Full GC时，会顺便清理掉 Direct Memory 中的废弃对象。</li>\n</ul>\n<h2 id=\"性能调优\"><a href=\"#性能调优\" class=\"headerlink\" title=\"性能调优\"></a>性能调优</h2><ul>\n<li>我们可以通过给 Java 虚拟机分配超大堆（前提是物理机的内存足够大）来提升服务器的响应速度，但分配超大堆的前提是有把握把应用程序的 Full GC 频率控制得足够低，因为一次 Full GC 的时间造成比较长时间的停顿。控制 Full GC 频率的关键是保证应用中绝大多数对象的生存周期不应太长，尤其不能产生批量的、生命周期长的大对象，这样才能保证老年代的稳定。</li>\n<li>Direct Memory 在堆内存外分配，而且二者均受限于物理机内存，且成负相关关系，因此分配超大堆时，如果用到了 NIO 机制分配使用了很多的 Direct Memory，则有可能导致 Direct Memory 的 OutOfMemoryError 异常，这时可以通过 -XX:MaxDirectMemorySize 参数调整 Direct Memory 的大小。</li>\n</ul>\n<p><br></p>\n","site":{"data":{}},"excerpt":"<p>Java 虚拟机屏蔽了与具体操作系统平台相关的信息,使得 Java 语言编译程序只需生成在 Java 虚拟机上运行的目标代码(字节码),就可以在多种平台上不加修改地运行。Java 虚拟机在执行字节码时,实际上最终还是把字节码解释成具体平台上的机器指令执行。</p>","more":"<h2 id=\"Java-的优点\"><a href=\"#Java-的优点\" class=\"headerlink\" title=\"Java 的优点\"></a>Java 的优点</h2><ul>\n<li>是一门结构严谨、面向对象的编程语言。</li>\n<li>摆脱了硬件平台的束缚，实现了“一次编写，到处运行”的理想。</li>\n<li>提供了一种相对安全的内存管理和访问机制，避免了绝大部分的内存泄漏和指针越界问题。</li>\n<li>实现了热点代码检测和运行时编译及优化，使得 Java 应用能随着运行时间的增加而获得更高的性能。</li>\n<li>有一套完善的应用程序接口和无数的来自商业机构和开源社区的第三方类库来帮助实现各种各样的功能。</li>\n</ul>\n<h2 id=\"Java-平台的逻辑结构\"><a href=\"#Java-平台的逻辑结构\" class=\"headerlink\" title=\"Java 平台的逻辑结构\"></a>Java 平台的逻辑结构</h2><p><img src=\"http://wiki.jikexueyuan.com/project/java-vm/images/jvmstructure.gif\" alt=\"Java 平台的逻辑结构\"></p>\n<h2 id=\"JVM\"><a href=\"#JVM\" class=\"headerlink\" title=\"JVM\"></a>JVM</h2><ul>\n<li>JVM 是一种基于下层的操作系统和硬件平台并利用软件方法来实现的抽象的计算机，可以在上面执行 Java 的字节码程序。简单的说，JVM 就是 Java 的虚拟机,有了 JVM 才能运行 Java 程序。</li>\n<li>Java 编译器只需面向 JVM，生成 JVM 能理解的代码或字节码文件。Java 源文件经编译器，编译成字节码程序，通过 JVM 将每一条指令翻译成不同平台机器码，通过特定平台运行。<br><img src=\"http://wiki.jikexueyuan.com/project/java-vm/images/jvm.gif\" alt=\"JVM 自身的物理结构\"></li>\n</ul>\n<h2 id=\"class-文件的组成\"><a href=\"#class-文件的组成\" class=\"headerlink\" title=\"class 文件的组成\"></a>class 文件的组成</h2><ul>\n<li>结构信息。包括 class 文件格式版本号及各部分的数量与大小的信息。</li>\n<li>元数据。对应于 Java 源码中声明与常量的信息。包含类/继承的超类/实现的接口的声明信息、域与方法声明信息和常量池。</li>\n<li>方法信息。对应 Java 源码中语句和表达式对应的信息。包含字节码、异常处理器表、求值栈与局部变量区大小、求值栈的类型记录、调试符号信息。</li>\n</ul>\n<h2 id=\"类的层次关系和加载顺序\"><a href=\"#类的层次关系和加载顺序\" class=\"headerlink\" title=\"类的层次关系和加载顺序\"></a>类的层次关系和加载顺序</h2><p><img src=\"http://wiki.jikexueyuan.com/project/java-vm/images/jvmclass.gif\" alt=\"类的层次关系和加载顺序\"></p>\n<h2 id=\"类执行机制\"><a href=\"#类执行机制\" class=\"headerlink\" title=\"类执行机制\"></a>类执行机制</h2><ul>\n<li>JVM 是基于栈的体系结构来执行 class 字节码的。线程创建后，都会产生程序计数器（PC）和栈（Stack），程序计数器存放下一条要执行的指令在方法内的偏移量，栈中存放一个个栈帧，每个栈帧对应着每个方法的每次调用，而栈帧又是有局部变量区和操作数栈两部分组成，局部变量区用于存放方法中的局部变量和参数，操作数栈中用于存放方法执行过程中产生的中间结果。</li>\n</ul>\n<h2 id=\"内存区域\"><a href=\"#内存区域\" class=\"headerlink\" title=\"内存区域\"></a>内存区域</h2><ul>\n<li>Java 虚拟机在执行 Java 程序的过程中会把他所管理的内存划分为若干个不同的数据区域。</li>\n<li>Java 虚拟机规范将 JVM 所管理的内存分为以下几个运行时数据区：程序计数器、Java 虚拟机栈、本地方法栈、Java 堆、方法区。<br><img src=\"http://wiki.jikexueyuan.com/project/java-vm/images/jvmdata.png\" alt=\"内存区域图\"></li>\n</ul>\n<h2 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h2><ul>\n<li>一块较小的内存空间，它是当前线程所执行的字节码的行号指示器，字节码解释器工作时通过改变该计数器的值来选择下一条需要执行的字节码指令，分支、跳转、循环等基础功能都要依赖它来实现。</li>\n<li>每条线程都有一个独立的的程序计数器，各线程间的计数器互不影响，因此该区域是线程私有的。</li>\n<li>当线程在执行一个 Java 方法时，该计数器记录的是正在执行的虚拟机字节码指令的地址，当线程在执行的是 Native 方法（调用本地操作系统方法）时，该计数器的值为空。</li>\n<li>该内存区域是唯一一个在 Java 虚拟机规范中么有规定任何 OOM（内存溢出：OutOfMemoryError）情况的区域。</li>\n</ul>\n<h2 id=\"Java-虚拟机栈\"><a href=\"#Java-虚拟机栈\" class=\"headerlink\" title=\"Java 虚拟机栈\"></a>Java 虚拟机栈</h2><ul>\n<li>该区域也是线程私有的，它的生命周期也与线程相同。</li>\n<li>虚拟机栈描述的是 Java 方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧，栈它是用于支持续虚拟机进行方法调用和方法执行的数据结构。</li>\n<li>对于执行引擎来讲，活动线程中，只有栈顶的栈帧是有效的，称为当前栈帧，这个栈帧所关联的方法称为当前方法，执行引擎所运行的所有字节码指令都只针对当前栈帧进行操作。</li>\n<li>栈帧用于存储局部变量表、操作数栈、动态链接、方法返回地址和一些额外的附加信息。</li>\n<li>在编译程序代码时，栈帧中需要多大的局部变量表、多深的操作数栈都已经完全确定了，并且写入了方法表的 Code 属性之中。因此，一个栈帧需要分配多少内存，不会受到程序运行期变量数据的影响，而仅仅取决于具体的虚拟机实现。</li>\n</ul>\n<h2 id=\"Java-虚拟机栈的异常\"><a href=\"#Java-虚拟机栈的异常\" class=\"headerlink\" title=\"Java 虚拟机栈的异常\"></a>Java 虚拟机栈的异常</h2><ul>\n<li>在 Java 虚拟机规范中，对这个区域规定了两种异常情况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常。如果虚拟机在动态扩展栈时无法申请到足够的内存空间，则抛出OutOfMemoryError异常。</li>\n<li>这两种情况存在着一些互相重叠的地方：当栈空间无法继续分配时，到底是内存太小，还是已使用的栈空间太大，其本质上只是对同一件事情的两种描述而已。在单线程的操作中，无论是由于栈帧太大，还是虚拟机栈空间太小，当栈空间无法分配时，虚拟机抛出的都是 StackOverflowError 异常，而不会得到 OutOfMemoryError 异常。而在多线程环境下，则会抛出 OutOfMemoryError 异常。</li>\n</ul>\n<h3 id=\"局部变量表\"><a href=\"#局部变量表\" class=\"headerlink\" title=\"局部变量表\"></a>局部变量表</h3><ul>\n<li>局部变量表是一组变量值存储空间，用于存放方法参数和方法内部定义的局部变量，其中存放的数据的类型是编译期可知的各种基本数据类型、对象引用（reference）和 returnAddress 类型（它指向了一条字节码指令的地址）。局部变量表所需的内存空间在编译期间完成分配，即在 Java 程序被编译成 Class 文件时，就确定了所需分配的最大局部变量表的容量。当进入一个方法时，这个方法需要在栈中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。</li>\n<li>局部变量表的容量以变量槽（Slot）为最小单位。在虚拟机规范中并没有明确指明一个 Slot 应占用的内存空间大小（允许其随着处理器、操作系统或虚拟机的不同而发生变化），一个 Slot 可以存放一个32位以内的数据类型：boolean、byte、char、short、int、float、reference 和 returnAddresss。reference 是对象的引用类型，returnAddress 是为字节指令服务的，它执行了一条字节码指令的地址。对于 64 位的数据类型（long和double），虚拟机会以高位在前的方式为其分配两个连续的 Slot 空间。</li>\n<li>虚拟机通过索引定位的方式使用局部变量表，索引值的范围是从 0 开始到局部变量表最大的 Slot 数量，对于 32 位数据类型的变量，索引 n 代表第 n 个 Slot，对于 64 位的，索引 n 代表第 n 和第 n+1 两个 Slot。</li>\n<li>在方法执行时，虚拟机是使用局部变量表来完成参数值到参数变量列表的传递过程的，如果是实例方法（非static），则局部变量表中的第 0 位索引的 Slot 默认是用于传递方法所属对象实例的引用，在方法中可以通过关键字“this”来访问这个隐含的参数。其余参数则按照参数表的顺序来排列，占用从1开始的局部变量 Slot，参数表分配完毕后，再根据方法体内部定义的变量顺序和作用域分配其余的 Slot。</li>\n<li>局部变量表中的 Slot 是可重用的，方法体中定义的变量，作用域并不一定会覆盖整个方法体，如果当前字节码PC计数器的值已经超过了某个变量的作用域，那么这个变量对应的 Slot 就可以交给其他变量使用。这样的设计不仅仅是为了节省空间，在某些情况下 Slot 的复用会直接影响到系统的而垃圾收集行为。</li>\n</ul>\n<h3 id=\"操作数栈\"><a href=\"#操作数栈\" class=\"headerlink\" title=\"操作数栈\"></a>操作数栈</h3><ul>\n<li>操作数栈又常被称为操作栈，操作数栈的最大深度也是在编译的时候就确定了。32 位数据类型所占的栈容量为 1,64 位数据类型所占的栈容量为 2。当一个方法开始执行时，它的操作栈是空的，在方法的执行过程中，会有各种字节码指令（比如：加操作、赋值元算等）向操作栈中写入和提取内容，也就是入栈和出栈操作。</li>\n<li>Java 虚拟机的解释执行引擎称为“基于栈的执行引擎”，其中所指的“栈”就是操作数栈。因此我们也称 Java 虚拟机是基于栈的，这点不同于 Android 虚拟机，Android 虚拟机是基于寄存器的。</li>\n<li>基于栈的指令集最主要的优点是可移植性强，主要的缺点是执行速度相对会慢些；而由于寄存器由硬件直接提供，所以基于寄存器指令集最主要的优点是执行速度快，主要的缺点是可移植性差。</li>\n</ul>\n<h3 id=\"动态连接\"><a href=\"#动态连接\" class=\"headerlink\" title=\"动态连接\"></a>动态连接</h3><ul>\n<li>每个栈帧都包含一个指向运行时常量池（在方法区中，后面介绍）中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态连接。Class 文件的常量池中存在有大量的符号引用，字节码中的方法调用指令就以常量池中指向方法的符号引用为参数。这些符号引用，一部分会在类加载阶段或第一次使用的时候转化为直接引用（如 final、static 域等），称为静态解析，另一部分将在每一次的运行期间转化为直接引用，这部分称为动态连接。</li>\n</ul>\n<h3 id=\"方法返回地址\"><a href=\"#方法返回地址\" class=\"headerlink\" title=\"方法返回地址\"></a>方法返回地址</h3><ul>\n<li>当一个方法被执行后，有两种方式退出该方法：执行引擎遇到了任意一个方法返回的字节码指令或遇到了异常，并且该异常没有在方法体内得到处理。无论采用何种退出方式，在方法退出之后，都需要返回到方法被调用的位置，程序才能继续执行。方法返回时可能需要在栈帧中保存一些信息，用来帮助恢复它的上层方法的执行状态。一般来说，方法正常退出时，调用者的 PC 计数器的值就可以作为返回地址，栈帧中很可能保存了这个计数器值，而方法异常退出时，返回地址是要通过异常处理器来确定的，栈帧中一般不会保存这部分信息。</li>\n<li>方法退出的过程实际上等同于把当前栈帧出站，因此退出时可能执行的操作有：恢复上层方法的局部变量表和操作数栈，如果有返回值，则把它压入调用者栈帧的操作数栈中，调整 PC 计数器的值以指向方法调用指令后面的一条指令。</li>\n</ul>\n<h2 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h2><ul>\n<li>该区域与虚拟机栈所发挥的作用非常相似，只是虚拟机栈为虚拟机执行 Java 方法服务，而本地方法栈则为使用到的本地操作系统（Native）方法服务。</li>\n</ul>\n<h2 id=\"Java-堆\"><a href=\"#Java-堆\" class=\"headerlink\" title=\"Java 堆\"></a>Java 堆</h2><ul>\n<li>Java Heap 是 Java 虚拟机所管理的内存中最大的一块，它是所有线程共享的一块内存区域。几乎所有的对象实例和数组都在这类分配内存。Java Heap 是垃圾收集器管理的主要区域，因此很多时候也被称为“GC堆”。</li>\n<li>根据 Java 虚拟机规范的规定，Java 堆可以处在物理上不连续的内存空间中，只要逻辑上是连续的即可。如果在堆中没有内存可分配时，并且堆也无法扩展时，将会抛出 OutOfMemoryError 异常。</li>\n</ul>\n<h2 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h2><ul>\n<li>方法区也是各个线程共享的内存区域，它用于存储已经被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</li>\n<li>方法区域又被称为“永久代”，但这仅仅对于 Sun HotSpot 来讲，JRockit 和 IBM J9 虚拟机中并不存在永久代的概念。</li>\n<li>Java 虚拟机规范把方法区描述为 Java 堆的一个逻辑部分，而且它和 Java Heap 一样不需要连续的内存，可以选择固定大小或可扩展，另外，虚拟机规范允许该区域可以选择不实现垃圾回收。相对而言，垃圾收集行为在这个区域比较少出现。该区域的内存回收目标主要针是对废弃常量的和无用类的回收。</li>\n<li>运行时常量池是方法区的一部分，Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池（Class文件常量池），用于存放编译器生成的各种字面量和符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。</li>\n<li>运行时常量池相对于 Class 文件常量池的另一个重要特征是具备动态性，Java 语言并不要求常量一定只能在编译期产生，也就是并非预置入 Class 文件中的常量池的内容才能进入方法区的运行时常量池，运行期间也可能将新的常量放入池中，这种特性被开发人员利用比较多的是 String 类的 intern（）方法。</li>\n</ul>\n<h2 id=\"直接内存\"><a href=\"#直接内存\" class=\"headerlink\" title=\"直接内存\"></a>直接内存</h2><ul>\n<li>直接内存并不是虚拟机运行时数据区的一部分，也不是 Java 虚拟机规范中定义的内存区域，它直接从操作系统中分配，因此不受 Java 堆大小的限制，但是会受到本机总内存的大小及处理器寻址空间的限制，因此它也可能导致 OutOfMemoryError 异常出现。</li>\n<li>在 JDK1.4 中新引入了 NIO 机制，它是一种基于通道与缓冲区的新 I/O 方式，可以直接从操作系统中分配直接内存，即在堆外分配内存，这样能在一些场景中提高性能，因为避免了在 Java 堆和 Native 堆中来回复制数据。</li>\n<li>根据 Java 虚拟机规范的规定，当方法区无法满足内存分配需求时，将抛出 OutOfMemoryError 异常。</li>\n</ul>\n<h2 id=\"内存溢出\"><a href=\"#内存溢出\" class=\"headerlink\" title=\"内存溢出\"></a>内存溢出</h2><ul>\n<li>在多线程情况下，给每个线程的栈分配的内存越大，反而越容易产生内存溢出异常。操作系统为每个进程分配的内存是有限制的，虚拟机提供了参数来控制 Java 堆和方法区这两部分内存的最大值，忽略掉程序计数器消耗的内存（很小），以及进程本身消耗的内存，剩下的内存便给了虚拟机栈和本地方法栈，每个线程分配到的栈容量越大，可以建立的线程数量自然就越少。因此，如果是建立过多的线程导致的内存溢出，在不能减少线程数的情况下，就只能通过减少最大堆和每个线程的栈容量来换取更多的线程。</li>\n<li>内存泄露是指分配出去的内存没有被回收回来，由于失去了对该内存区域的控制，因而造成了资源的浪费。Java 中一般不会产生内存泄露，因为有垃圾回收器自动回收垃圾，但这也不绝对，当我们 new 了对象，并保存了其引用，但是后面一直没用它，而垃圾回收器又不会去回收它，这边会造成内存泄露，</li>\n<li>内存溢出是指程序所需要的内存超出了系统所能分配的内存（包括动态扩展）的上限。</li>\n</ul>\n<h2 id=\"对象实例化分析\"><a href=\"#对象实例化分析\" class=\"headerlink\" title=\"对象实例化分析\"></a>对象实例化分析</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object obj = <span class=\"keyword\">new</span> Object();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>假设该语句出现在方法体中，obj 会作为引用类型（reference）的数据保存在 Java 栈的本地变量表中，而会在 Java 堆中保存该引用的实例化对象，Java 堆中还包含能查找到此对象类型数据的地址信息（如对象类型、父类、实现的接口、方法等），这些类型数据则保存在方法区中。</li>\n<li>由于 reference 类型在 Java 虚拟机规范里面只规定了一个指向对象的引用，并没有定义这个引用应该通过哪种方式去定位，以及访问到 Java 堆中的对象的具体位置，因此不同虚拟机实现的对象访问方式会有所不同，主流的访问方式有两种：使用句柄池和直接使用指针。这两种对象的访问方式各有优势，使用句柄访问方式的最大好处就是 reference 中存放的是稳定的句柄地址，在对象被移动（垃圾收集时移动对象是非常普遍的行为）时只会改变句柄中的实例数据指针，而 reference 本身不需要修改。使用直接指针访问方式的最大好处是速度快，它节省了一次指针定位的时间开销。目前 Java 默认使用的 HotSpot 虚拟机采用的便是是第二种方式进行对象访问的。<br><img src=\"http://wiki.jikexueyuan.com/project/java-vm/images/javastack.png\" alt=\"句柄池访问\"><br><img src=\"http://wiki.jikexueyuan.com/project/java-vm/images/javastack1.png\" alt=\"直接指针访问\"></li>\n</ul>\n<h2 id=\"类文件结构\"><a href=\"#类文件结构\" class=\"headerlink\" title=\"类文件结构\"></a>类文件结构</h2><ul>\n<li>Class 文件是一组以8位字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑地排列在 Class 文件中，中间没有添加任何分隔符，这使得整个 Class 文件中存储的内容几乎全部都是程序运行的必要数据。</li>\n<li>根据 Java 虚拟机规范的规定，Class 文件格式采用一种类似于 C 语言结构体的伪结构来存储，这种伪结构中只有两种数据类型：无符号数和表。无符号数属于基本数据类型，以 u1、u2、u4、u8 来分别代表 1、2、4、8 个字节的无符号数。表是由多个无符号数或其他表作为数据项构成的符合数据类型，所有的表都习惯性地以“_info”结尾。</li>\n</ul>\n<h2 id=\"magic-与-version\"><a href=\"#magic-与-version\" class=\"headerlink\" title=\"magic 与 version\"></a>magic 与 version</h2><ul>\n<li>每个 Class 文件的头 4 个字节称为魔数（magic），它的唯一作用是判断该文件是否为一个能被虚拟机接受的 Class 文件。它的值固定为 0xCAFEBABE。紧接着 magic 的 4 个字节存储的是 Class 文件的次版本号和主版本号，高版本的 JDK 能向下兼容低版本的 Class 文件，但不能运行更高版本的 Class 文件。</li>\n</ul>\n<h2 id=\"类初始化\"><a href=\"#类初始化\" class=\"headerlink\" title=\"类初始化\"></a>类初始化</h2><ul>\n<li>遇到 new、getstatic、putstatic、invokestatic 这四条字节码指令时，如果类还没有进行过初始化，则需要先触发其初始化。生成这四条指令最常见的 Java 代码场景是：使用 new 关键字实例化对象时、读取或设置一个类的静态字段（static）时（被 static 修饰又被 final 修饰的，已在编译期把结果放入常量池的静态字段除外）、以及调用一个类的静态方法时。</li>\n<li>使用 Java.lang.refect 包的方法对类进行反射调用时，如果类还没有进行过初始化，则需要先触发其初始化。</li>\n<li>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。</li>\n<li>当虚拟机启动时，用户需要指定一个要执行的主类，虚拟机会先执行该主类。</li>\n<li>通过子类引用父类中的静态字段，这时对子类的引用为被动引用，因此不会初始化子类，只会初始化父类：</li>\n<li>常量在编译阶段会存入调用它的类的常量池中，本质上没有直接引用到定义该常量的类，因此不会触发定义常量的类的初始化</li>\n<li>通过数组定义来引用类，不会触发类的初始化但是会触发了另一个名为“LLConst”的类的初始化，它是一个由虚拟机自动生成的、直接继承于java.lang.Object 的子类，创建动作由字节码指令 newarray 触发，很明显，这是一个对数组引用类型的初初始化，而该数组中的元素仅仅包含一个对 Const 类的引用，并没有对其进行初始化。如果我们加入对 con 数组中各个 Const 类元素的实例化代码，便会触发 Const 类的初始化</li>\n<li>接口也有初始化过程，在接口中不能使用“static{}”语句块，但编译器仍然会为接口生成类构造器，用于初始化接口中定义的成员变量（实际上是 static final 修饰的全局常量）。二者在初始化时最主要的区别是：当一个类在初始化时，要求其父类全部已经初始化过了，但是一个接口在初始化时，并不要求其父接口全部都完成了初始化，只有在真正使用到父接口的时候（如引用接口中定义的常量），才会初始化该父接口。这点也与类初始化的情况很不同，调用类中的 static final 常量时并不会 触发该类的初始化，但是调用接口中的 static final 常量时便会触发该接口的初始化。</li>\n</ul>\n<h2 id=\"类加载机制-？？？\"><a href=\"#类加载机制-？？？\" class=\"headerlink\" title=\"类加载机制 ？？？\"></a>类加载机制 ？？？</h2><h2 id=\"多态性实现机制——静态分派与动态分派-？？？\"><a href=\"#多态性实现机制——静态分派与动态分派-？？？\" class=\"headerlink\" title=\"多态性实现机制——静态分派与动态分派 ？？？\"></a>多态性实现机制——静态分派与动态分派 ？？？</h2><h2 id=\"Java-语法糖\"><a href=\"#Java-语法糖\" class=\"headerlink\" title=\"Java 语法糖\"></a>Java 语法糖</h2><ul>\n<li>语法糖（Syntactic Sugar），也称糖衣语法，是由英国计算机学家 Peter.J.Landin 发明的一个术语，指在计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。</li>\n<li><p>Java 中最常用的语法糖主要有泛型、变长参数、条件编译、自动拆装箱、内部类等。虚拟机并不支持这些语法，它们在编译阶段就被还原回了简单的基础语法结构，这个过程成为解语法糖。</p>\n</li>\n<li><p>泛型是 JDK1.5 之后引入的一项新特性，Java 语言在还没有出现泛型时，只能通过 Object 是所有类型的父类和类型强制转换这两个特点的配合来实现泛型的功能，这样实现的泛型功能要在程序运行期才能知道 Object 真正的对象类型，在 javac 编译期，编译器无法检查这个 Object 的强制转型是否成功，这便将一些风险转接到了程序运行期中。Java 语言在 JDK1.5 之后引入的泛型实际上只在程序源码中存在，在编译后的字节码文件中，就已经被替换为了原来的原生类型，并且在相应的地方插入了强制转型代码，所以泛型技术实际上是 Java 语言的一颗语法糖，Java 语言中的泛型实现方法称为类型擦除，基于这种方法实现的泛型被称为伪泛型。</p>\n</li>\n</ul>\n<h2 id=\"javac-编译\"><a href=\"#javac-编译\" class=\"headerlink\" title=\"javac 编译\"></a>javac 编译</h2><ul>\n<li>javac 编译器称为前端编译器，将<em>.java文件编译成为</em>.class文件。相对应的还有后端编译器，它在程序运行期间将字节码转变成机器码（现在的 Java 程序在运行时基本都是解释执行加编译执行），如 HotSpot 虚拟机自带的 JIT（Just In Time Compiler）编译器（分 Client 端和 Server 端）。</li>\n</ul>\n<h3 id=\"词法、语法分析\"><a href=\"#词法、语法分析\" class=\"headerlink\" title=\"词法、语法分析\"></a>词法、语法分析</h3><ul>\n<li>词法分析是将源代码的字符流转变为标记（Token）集合。单个字符是程序编写过程中的的最小元素，而标记则是编译过程的最小元素，关键字、变量名、字面量、运算符等都可以成为标记，比如整型标志 int 由三个字符构成，但是它只是一个标记，不可拆分。</li>\n<li>语法分析是根据Token序列来构造抽象语法树的过程。抽象语法树是一种用来描述程序代码语法结构的树形表示方式，语法树的每一个节点都代表着程序代码中的一个语法结构，如 bao、类型、修饰符、运算符等。经过这个步骤后，编译器就基本不会再对源码文件进行操作了，后续的操作都建立在抽象语法树之上。</li>\n</ul>\n<h3 id=\"填充符号表\"><a href=\"#填充符号表\" class=\"headerlink\" title=\"填充符号表\"></a>填充符号表</h3><ul>\n<li>完成了语法分析和词法分析之后，下一步就是填充符号表的过程。符号表是由一组符号地址和符号信息构成的表格。符号表中所登记的信息在编译的不同阶段都要用到，在语义分析中，符号表所登记的内容将用于语义检查和产生中间代码，在目标代码生成阶段，党对符号名进行地址分配时，符号表是地址分配的依据。</li>\n</ul>\n<h3 id=\"语义分析\"><a href=\"#语义分析\" class=\"headerlink\" title=\"语义分析\"></a>语义分析</h3><ul>\n<li>语法树能表示一个结构正确的源程序的抽象，但无法保证源程序是符合逻辑的。而语义分析的主要任务是读结构上正确的源程序进行上下文有关性质的审查。语义分析过程分为标注检查和数据及控制流分析两个步骤：</li>\n<li>标注检查步骤检查的内容包括诸如变量使用前是否已被声明、变量和赋值之间的数据类型是否匹配等。</li>\n<li>数据及控制流分析是对程序上下文逻辑更进一步的验证，它可以检查出诸如程序局部变量在使用前是否有赋值、方法的每条路径是否都有返回值、是否所有的受查异常都被正确处理了等问题。</li>\n</ul>\n<h3 id=\"字节码生成\"><a href=\"#字节码生成\" class=\"headerlink\" title=\"字节码生成\"></a>字节码生成</h3><ul>\n<li>字节码生成是 javac 编译过程的最后一个阶段。字节码生成阶段不仅仅是把前面各个步骤所生成的信息转化成字节码写到磁盘中，编译器还进行了少量的代码添加和转换工作。 实例构造器()方法和类构造器()方法就是在这个阶段添加到语法树之中的（这里的实例构造器并不是指默认的构造函数，而是指我们自己重载的构造函数，如果用户代码中没有提供任何构造函数，那编译器会自动添加一个没有参数、访问权限与当前类一致的默认构造函数，这个工作在填充符号表阶段就已经完成了）。</li>\n</ul>\n<h2 id=\"JIT-编译\"><a href=\"#JIT-编译\" class=\"headerlink\" title=\"JIT 编译\"></a>JIT 编译</h2><ul>\n<li>Java 程序最初是仅仅通过解释器解释执行的，即对字节码逐条解释执行，这种方式的执行速度相对会比较慢，尤其当某个方法或代码块运行的特别频繁时，这种方式的执行效率就显得很低。于是后来在虚拟机中引入了 JIT 编译器（即时编译器），当虚拟机发现某个方法或代码块运行特别频繁时，就会把这些代码认定为“Hot Spot Code”（热点代码），为了提高热点代码的执行效率，在运行时，虚拟机将会把这些代码编译成与本地平台相关的机器码，并进行各层次的优化，完成这项任务的正是 JIT 编译器。</li>\n<li>HotSpot 虚拟机中内置了两个JIT编译器：Client Complier 和 Server Complier，分别用在客户端和服务端，目前主流的 HotSpot 虚拟机中默认是采用解释器与其中一个编译器直接配合的方式工作。</li>\n</ul>\n<h3 id=\"运行过程中会被即时编译器编译的“热点代码”有两类：\"><a href=\"#运行过程中会被即时编译器编译的“热点代码”有两类：\" class=\"headerlink\" title=\"运行过程中会被即时编译器编译的“热点代码”有两类：\"></a>运行过程中会被即时编译器编译的“热点代码”有两类：</h3><ul>\n<li>被多次调用的方法。</li>\n<li>被多次调用的循环体。</li>\n</ul>\n<h3 id=\"目前主要的热点判定方式\"><a href=\"#目前主要的热点判定方式\" class=\"headerlink\" title=\"目前主要的热点判定方式\"></a>目前主要的热点判定方式</h3><ul>\n<li>基于采样的热点探测：采用这种方法的虚拟机会周期性地检查各个线程的栈顶，如果发现某些方法经常出现在栈顶，那这段方法代码就是“热点代码”。这种探测方法的好处是实现简单高效，还可以很容易地获取方法调用关系，缺点是很难精确地确认一个方法的热度，容易因为受到线程阻塞或别的外界因素的影响而扰乱热点探测。</li>\n<li>基于计数器的热点探测：采用这种方法的虚拟机会为每个方法，甚至是代码块建立计数器，统计方法的执行次数，如果执行次数超过一定的阀值，就认为它是“热点方法”。这种统计方法实现复杂一些，需要为每个方法建立并维护计数器，而且不能直接获取到方法的调用关系，但是它的统计结果相对更加精确严谨。</li>\n</ul>\n<h3 id=\"在-HotSpot-虚拟机的热点判定方式\"><a href=\"#在-HotSpot-虚拟机的热点判定方式\" class=\"headerlink\" title=\"在 HotSpot 虚拟机的热点判定方式\"></a>在 HotSpot 虚拟机的热点判定方式</h3><ul>\n<li>在 HotSpot 虚拟机中使用的是基于计数器的热点探测方法，因此它为每个方法准备了两个计数器：方法调用计数器和回边计数器。</li>\n<li>方法调用计数器用来统计方法调用的次数，在默认设置下，方法调用计数器统计的并不是方法被调用的绝对次数，而是一个相对的执行频率，即一段时间内方法被调用的次数。</li>\n<li>回边计数器用于统计一个方法中循环体代码执行的次数（准确地说，应该是回边的次数，因为并非所有的循环都是回边），在字节码中遇到控制流向后跳转的指令就称为“回边”。</li>\n<li>在确定虚拟机运行参数的前提下，这两个计数器都有一个确定的阀值，当计数器的值超过了阀值，就会触发JIT编译。触发了 JIT 编译后，在默认设置下，执行引擎并不会同步等待编译请求完成，而是继续进入解释器按照解释方式执行字节码，直到提交的请求被编译器编译完成为止（编译工作在后台线程中进行）。当编译工作完成后，下一次调用该方法或代码时，就会使用已编译的版本。</li>\n</ul>\n<h2 id=\"对象引用\"><a href=\"#对象引用\" class=\"headerlink\" title=\"对象引用\"></a>对象引用</h2><p>Java 中的垃圾回收一般是在 Java 堆中进行，因为堆中几乎存放了 Java 中所有的对象实例。在 JDK1.2 之前，Java 中的引用定义很很纯粹：如果 reference 类型的数据中存储的数值代表的是另外一块内存的起始地址，就称这块数据代表着一个引用。但在 JDK1.2 之后，Java 对引用的概念进行了扩充，将其分为强引用（Strong Reference）、软引用（Soft Reference）、弱引用（Weak Reference）、虚引用（Phantom Reference）四种，引用强度依次减弱。</p>\n<ul>\n<li>强引用：如“Object obj = new Object（）”，这类引用是 Java 程序中最普遍的。只要强引用还存在，垃圾收集器就永远不会回收掉被引用的对象。</li>\n<li>软引用：它用来描述一些可能还有用，但并非必须的对象。在系统内存不够用时，这类引用关联的对象将被垃圾收集器回收。JDK1.2 之后提供了 SoftReference 类来实现软引用。</li>\n<li>弱引用：它也是用来描述非需对象的，但它的强度比软引用更弱些，被弱引用关联的对象只能生存岛下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在 JDK1.2 之后，提供了 WeakReference 类来实现弱引用。</li>\n<li>虚引用：最弱的一种引用关系，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的是希望能在这个对象被收集器回收时收到一个系统通知。JDK1.2 之后提供了 PhantomReference 类来实现虚引用。</li>\n</ul>\n<h2 id=\"垃圾对象的判定\"><a href=\"#垃圾对象的判定\" class=\"headerlink\" title=\"垃圾对象的判定\"></a>垃圾对象的判定</h2><h3 id=\"引用计数算法\"><a href=\"#引用计数算法\" class=\"headerlink\" title=\"引用计数算法\"></a>引用计数算法</h3><ul>\n<li>给对象添加一个引用计数器，每当有一个地方引用它时，计数器值就加 1，当引用失效时，计数器值就减1，任何时刻计数器都为 0 的对象就是不可能再被使用的。</li>\n<li>引用计数算法的实现简单，判定效率也很高，在大部分情况下它都是一个不错的选择，当 Java 语言并没有选择这种算法来进行垃圾回收，主要原因是它很难解决对象之间的相互循环引用问题。</li>\n</ul>\n<h3 id=\"根搜索算法\"><a href=\"#根搜索算法\" class=\"headerlink\" title=\"根搜索算法\"></a>根搜索算法</h3><ul>\n<li>这种算法的基本思路是通过一系列名为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链，当一个对象到 GC Roots 没有任何引用链相连时，就证明此对象是不可用的。Java 和 C# 中都是采用根搜索算法来判定对象是否存活的。</li>\n<li>在根搜索算法中，要真正宣告一个对象死亡，至少要经历两次标记过程：如果对象在进行根搜索后发现没有与 GC Roots 相连接的引用链，那它会被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行 finalize()方法。当对象没有覆盖 finalize()方法，或 finalize()方法已经被虚拟机调用过，虚拟机将这两种情况都视为没有必要执行。如果该对象被判定为有必要执行 finalize()方法，那么这个对象将会被放置在一个名为 F-Queue 队列中，并在稍后由一条由虚拟机自动建立的、低优先级的 Finalizer 线程去执行 finalize()方法。finalize()方法是对象逃脱死亡命运的最后一次机会（因为一个对象的 finalize()方法最多只会被系统自动调用一次），稍后 GC 将对 F-Queue 中的对象进行第二次小规模的标记，如果要在 finalize()方法中成功拯救自己，只要在 finalize()方法中让该对象重引用链上的任何一个对象建立关联即可。而如果对象这时还没有关联到任何链上的引用，那它就会被回收掉。</li>\n</ul>\n<h2 id=\"垃圾收集算法\"><a href=\"#垃圾收集算法\" class=\"headerlink\" title=\"垃圾收集算法\"></a>垃圾收集算法</h2><h3 id=\"标记—清除算法\"><a href=\"#标记—清除算法\" class=\"headerlink\" title=\"标记—清除算法\"></a>标记—清除算法</h3><ul>\n<li>标记—清除算法是最基础的收集算法，它分为“标记”和“清除”两个阶段：首先标记出所需回收的对象，在标记完成后统一回收掉所有被标记的对象，它的标记过程其实就是前面的根搜索算法中判定垃圾对象的标记过程。（会造成大量的内存碎片）</li>\n</ul>\n<h3 id=\"标记—整理算法\"><a href=\"#标记—整理算法\" class=\"headerlink\" title=\"标记—整理算法\"></a>标记—整理算法</h3><ul>\n<li>复制算法比较适合于新生代，在老年代中，对象存活率比较高，如果执行较多的复制操作，效率将会变低，所以老年代一般会选用其他算法，如标记—整理算法。该算法标记的过程与标记—清除算法中的标记过程一样，但对标记后出的垃圾对象的处理情况有所不同，它不是直接对可回收对象进行清理，而是让所有的对象都向一端移动，然后直接清理掉端边界以外的内存。（不会产生内存碎片，成本相对较高）</li>\n</ul>\n<h3 id=\"分代收集\"><a href=\"#分代收集\" class=\"headerlink\" title=\"分代收集\"></a>分代收集</h3><ul>\n<li>当前商业虚拟机的垃圾收集 都采用分代收集，它根据对象的存活周期的不同将内存划分为几块，一般是把 Java 堆分为新生代和老年代。在新生代中，每次垃圾收集时都会发现有大量对象死去，只有少量存活，因此可选用复制算法来完成收集，而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用标记—清除算法或标记—整理算法来进行回收。</li>\n</ul>\n<h2 id=\"垃圾收集器\"><a href=\"#垃圾收集器\" class=\"headerlink\" title=\"垃圾收集器\"></a>垃圾收集器</h2><h3 id=\"内存的分配策\"><a href=\"#内存的分配策\" class=\"headerlink\" title=\"内存的分配策\"></a>内存的分配策</h3><ul>\n<li>对象优先在 Eden 分配。</li>\n<li>大对象直接进入老年代。</li>\n<li>长期存活的对象将进入老年代。</li>\n</ul>\n<h3 id=\"垃圾回收策略\"><a href=\"#垃圾回收策略\" class=\"headerlink\" title=\"垃圾回收策略\"></a>垃圾回收策略</h3><ul>\n<li>新生代 GC（Minor GC）：发生在新生代的垃圾收集动作，因为 Java 对象大多都具有朝生夕灭的特性，因此Minor GC 非常频繁，一般回收速度也比较快。</li>\n<li>老年代 GC（Major GC/Full GC）：发生在老年代的 GC，出现了 Major GC，经常会伴随至少一次 Minor GC。由于老年代中的对象生命周期比较长，因此 Major GC 并不频繁，一般都是等待老年代满了后才进行 Full GC，而且其速度一般会比 Minor GC 慢 10 倍以上。另外，如果分配了 Direct Memory，在老年代中进行 Full GC时，会顺便清理掉 Direct Memory 中的废弃对象。</li>\n</ul>\n<h2 id=\"性能调优\"><a href=\"#性能调优\" class=\"headerlink\" title=\"性能调优\"></a>性能调优</h2><ul>\n<li>我们可以通过给 Java 虚拟机分配超大堆（前提是物理机的内存足够大）来提升服务器的响应速度，但分配超大堆的前提是有把握把应用程序的 Full GC 频率控制得足够低，因为一次 Full GC 的时间造成比较长时间的停顿。控制 Full GC 频率的关键是保证应用中绝大多数对象的生存周期不应太长，尤其不能产生批量的、生命周期长的大对象，这样才能保证老年代的稳定。</li>\n<li>Direct Memory 在堆内存外分配，而且二者均受限于物理机内存，且成负相关关系，因此分配超大堆时，如果用到了 NIO 机制分配使用了很多的 Direct Memory，则有可能导致 Direct Memory 的 OutOfMemoryError 异常，这时可以通过 -XX:MaxDirectMemorySize 参数调整 Direct Memory 的大小。</li>\n</ul>\n<p><br></p>"},{"title":"ES6-Class基本语法","date":"2016-02-01T16:00:00.000Z","_content":"\n## Class基本语法 \n\nES6的class可以看作只是一个语法糖，它的绝大部分功能，ES5都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。\n​\t\n    // old\n      function Point(x,y){\n      this.x = x;\n      this.y = y;\n    }\n    Point.prototype.toString = function () {\n      return '(' + this.x + ', ' + this.y + ')';\n    }\n    // new\n    class Point {\n      constructor(x, y) {\n        this.x = x;\n        this.y = y;\n      }\n      toString() {\n        return '(' + this.x + ', ' + this.y + ')';\n      }   \n    }\n\n<!-- more --> \n\nPoint类除了构造方法，还定义了一个toString方法。注意，定义“类”的方法的时候，前面不需要加上function这个保留字，直接把函数定义放进去了就可以了。另外，方法之间不需要逗号分隔，加了会报错。  \n构造函数的prototype属性，在ES6的“类”上面继续存在。事实上，类的所有方法都定义在类的prototype属性上面。  \n类的内部所有定义的方法，都是不可枚举的（enumerable）。这一点与ES5的行为不一致。\n\n    class Point {\n      constructor(x, y) {}\n      toString() {}\n    }\n    Object.keys(Point.prototype) // []\n    Object.getOwnPropertyNames(Point.prototype) // [\"constructor\",\"toString\"]\n\nconstructor方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。一个类必须有constructor方法，如果没有显式定义，一个空的constructor方法会被默认添加。  \nconstructor方法默认返回实例对象（即this），完全可以指定返回另外一个对象。\n\n    class Foo {\n      constructor() {\n        return Object.create(null);\n      }\n    }\n    new Foo() instanceof Foo; // false \n\n生成实例对象的写法，与ES5完全一样，也是使用new命令。如果忘记加上new，像函数那样调用Class，将会报错。  \n与ES5一样，实例的属性除非显式定义在其本身（即定义在this对象上），否则都是定义在原型上（即定义在class上）  \n与ES5一样，类的所有实例共享一个原型对象。所以__proto__属性是相等的。  \nname属性总是返回紧跟在class关键字后面的类名。\n\n    class Point {}\n    Point.name // \"Point\"\n\n下面代码使用表达式定义了一个类。需要注意的是，这个类的名字是MyClass而不是Me，Me只在Class的内部代码可用，指代当前类。\n\n    const MyClass = class Me {\n      getClassName() {\n        return Me.name;\n      }\n    };\n\n如果Class内部没用到的话，可以省略Me。  \n采用Class表达式，可以写出立即执行的Class。  \nClass不存在变量提升（hoist），这一点与ES5完全不同。\n\n    new Foo(); // ReferenceError\n    class Foo {}\n\n类和模块的内部，默认就是严格模式，所以不需要使用use strict指定运行模式。  \n考虑到未来所有的代码，其实都是运行在模块之中，所以ES6实际上把整个语言升级到了严格模式。\n\n## Class的继承\n\nClass之间可以通过extends关键字实现继承，这比ES5的通过修改原型链实现继承，要清晰和方便很多。\n\n    class ColorPoint extends Point {}\n\n下面代码中，constructor方法和toString方法之中，都出现了super关键字，它指代父类的实例（即父类的this对象）。\n\n    class ColorPoint extends Point {\n      constructor(x, y, color) {\n        super(x, y); // 调用父类的constructor(x, y)\n        this.color = color;\n      }\n      toString() {\n        return this.color + ' ' + super.toString(); // 调用父类的toString()\n      }\n    }\n\n子类必须在constructor方法中调用super方法，否则新建实例时会报错。这是因为子类没有自己的this对象，而是继承父类的this对象，然后对其进行加工。如果不调用super方法，子类就得不到this对象。  \n子类实例的__proto__属性的__proto__属性，指向父类实例的__proto__属性。也就是说，子类的原型的原型，是父类的原型。\n\n## 原生构造函数的继承\n\n原生构造函数是指语言内置的构造函数，通常用来生成数据结构。\nES6允许继承原生构造函数定义子类，因为ES6是先新建父类的实例对象this，然后再用子类的构造函数修饰this，使得父类的所有行为都可以继承。\n\n    class MyArray extends Array {\n      constructor(...args) {\n        super(...args);\n      }\n    }\n    var arr = new MyArray();\n    arr[0] = 12;\n    arr.length // 1\n    arr.length = 0;\n    arr[0] // undefined\n\n## Class的取值函数（getter）和存值函数（setter）  \n\n与ES5一样，在Class内部可以使用get和set关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。\n\n    class MyClass {\n      constructor() {\n        // ...\n      }\n      get prop() {\n        return 'getter';\n      }\n      set prop(value) {\n        console.log('setter: '+value);\n      }\n    }\n    let inst = new MyClass();\n    inst.prop = 123; // setter: 123\n    inst.prop // 'getter'\n\n## Class的静态方法\n\n类相当于实例的原型，所有在类中定义的方法，都会被实例继承。如果在一个方法前，加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”。\n\n    class Foo {\n      static classMethod() {\n        return 'hello';\n      }\n    }\n    Foo.classMethod() // 'hello'\n    var foo = new Foo();\n    foo.classMethod() // TypeError: undefined is not a function\n\n父类的静态方法，可以被子类继承。  \n静态方法也是可以从super对象上调用的。\n\n## Class的静态属性\n\n静态属性指的是Class本身的属性，即Class.propname，而不是定义在实例对象（this）上的属性。\n\n    class Foo {\n    }\n    Foo.prop = 1;\n    Foo.prop // 1\n\n目前，只有这种写法可行，因为ES6明确规定，Class内部只有静态方法，没有静态属性。\n\n## new.target属性\n\nnew是从构造函数生成实例的命令。ES6为new命令引入了一个new.target属性，（在构造函数中）返回new命令作用于的那个构造函数。如果构造函数不是通过new命令调用的，new.target会返回undefined，因此这个属性可以用来确定构造函数是怎么调用的。\n\n    function Person(name) {\n      if (new.target !== undefined) {\n        this.name = name;\n      } else {\n        throw new Error('必须使用new生成实例');\n      }\n    }\n    // 另一种写法\n    function Person(name) {\n      if (new.target === Person) {\n        this.name = name;\n      } else {\n        throw new Error('必须使用new生成实例');\n      }\n    }\n    var person = new Person('张三'); // 正确\n    var notAPerson = Person.call(person, '张三'); // 报错\n\nClass内部调用new.target，返回当前Class。  \n子类继承父类时，new.target会返回子类。\n\n    class Rectangle {\n      constructor(length, width) {\n        console.log(new.target === Rectangle);\n        // ...\n      }\n    }\n    class Square extends Rectangle {\n      constructor(length) {\n        super(length, length);\n      }\n    }\n    var obj = new Square(3); // 输出 false\n\n利用这个特点，可以写出不能独立使用、必须继承后才能使用的类。\n\n## 类的修饰\n\n修饰器（Decorator）是一个表达式，用来修改类的行为。这是ES7的一个提案，目前Babel转码器已经支持。  \n修饰器对类的行为的改变，是代码编译时发生的，而不是在运行时。这意味着，修饰器能在编译阶段运行代码。  \n​    \n读阮一峰老师《ECMAScript6入门》一书的笔记    \n<br>","source":"_posts/JavaScript/es6-class.md","raw":"title: ES6-Class基本语法\n\ndate: 2016-2-2\n\ntags:\n    - es6\n    - note\n\ncategories:\n    - JavaScript\n---\n\n## Class基本语法 \n\nES6的class可以看作只是一个语法糖，它的绝大部分功能，ES5都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。\n​\t\n    // old\n      function Point(x,y){\n      this.x = x;\n      this.y = y;\n    }\n    Point.prototype.toString = function () {\n      return '(' + this.x + ', ' + this.y + ')';\n    }\n    // new\n    class Point {\n      constructor(x, y) {\n        this.x = x;\n        this.y = y;\n      }\n      toString() {\n        return '(' + this.x + ', ' + this.y + ')';\n      }   \n    }\n\n<!-- more --> \n\nPoint类除了构造方法，还定义了一个toString方法。注意，定义“类”的方法的时候，前面不需要加上function这个保留字，直接把函数定义放进去了就可以了。另外，方法之间不需要逗号分隔，加了会报错。  \n构造函数的prototype属性，在ES6的“类”上面继续存在。事实上，类的所有方法都定义在类的prototype属性上面。  \n类的内部所有定义的方法，都是不可枚举的（enumerable）。这一点与ES5的行为不一致。\n\n    class Point {\n      constructor(x, y) {}\n      toString() {}\n    }\n    Object.keys(Point.prototype) // []\n    Object.getOwnPropertyNames(Point.prototype) // [\"constructor\",\"toString\"]\n\nconstructor方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。一个类必须有constructor方法，如果没有显式定义，一个空的constructor方法会被默认添加。  \nconstructor方法默认返回实例对象（即this），完全可以指定返回另外一个对象。\n\n    class Foo {\n      constructor() {\n        return Object.create(null);\n      }\n    }\n    new Foo() instanceof Foo; // false \n\n生成实例对象的写法，与ES5完全一样，也是使用new命令。如果忘记加上new，像函数那样调用Class，将会报错。  \n与ES5一样，实例的属性除非显式定义在其本身（即定义在this对象上），否则都是定义在原型上（即定义在class上）  \n与ES5一样，类的所有实例共享一个原型对象。所以__proto__属性是相等的。  \nname属性总是返回紧跟在class关键字后面的类名。\n\n    class Point {}\n    Point.name // \"Point\"\n\n下面代码使用表达式定义了一个类。需要注意的是，这个类的名字是MyClass而不是Me，Me只在Class的内部代码可用，指代当前类。\n\n    const MyClass = class Me {\n      getClassName() {\n        return Me.name;\n      }\n    };\n\n如果Class内部没用到的话，可以省略Me。  \n采用Class表达式，可以写出立即执行的Class。  \nClass不存在变量提升（hoist），这一点与ES5完全不同。\n\n    new Foo(); // ReferenceError\n    class Foo {}\n\n类和模块的内部，默认就是严格模式，所以不需要使用use strict指定运行模式。  \n考虑到未来所有的代码，其实都是运行在模块之中，所以ES6实际上把整个语言升级到了严格模式。\n\n## Class的继承\n\nClass之间可以通过extends关键字实现继承，这比ES5的通过修改原型链实现继承，要清晰和方便很多。\n\n    class ColorPoint extends Point {}\n\n下面代码中，constructor方法和toString方法之中，都出现了super关键字，它指代父类的实例（即父类的this对象）。\n\n    class ColorPoint extends Point {\n      constructor(x, y, color) {\n        super(x, y); // 调用父类的constructor(x, y)\n        this.color = color;\n      }\n      toString() {\n        return this.color + ' ' + super.toString(); // 调用父类的toString()\n      }\n    }\n\n子类必须在constructor方法中调用super方法，否则新建实例时会报错。这是因为子类没有自己的this对象，而是继承父类的this对象，然后对其进行加工。如果不调用super方法，子类就得不到this对象。  \n子类实例的__proto__属性的__proto__属性，指向父类实例的__proto__属性。也就是说，子类的原型的原型，是父类的原型。\n\n## 原生构造函数的继承\n\n原生构造函数是指语言内置的构造函数，通常用来生成数据结构。\nES6允许继承原生构造函数定义子类，因为ES6是先新建父类的实例对象this，然后再用子类的构造函数修饰this，使得父类的所有行为都可以继承。\n\n    class MyArray extends Array {\n      constructor(...args) {\n        super(...args);\n      }\n    }\n    var arr = new MyArray();\n    arr[0] = 12;\n    arr.length // 1\n    arr.length = 0;\n    arr[0] // undefined\n\n## Class的取值函数（getter）和存值函数（setter）  \n\n与ES5一样，在Class内部可以使用get和set关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。\n\n    class MyClass {\n      constructor() {\n        // ...\n      }\n      get prop() {\n        return 'getter';\n      }\n      set prop(value) {\n        console.log('setter: '+value);\n      }\n    }\n    let inst = new MyClass();\n    inst.prop = 123; // setter: 123\n    inst.prop // 'getter'\n\n## Class的静态方法\n\n类相当于实例的原型，所有在类中定义的方法，都会被实例继承。如果在一个方法前，加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”。\n\n    class Foo {\n      static classMethod() {\n        return 'hello';\n      }\n    }\n    Foo.classMethod() // 'hello'\n    var foo = new Foo();\n    foo.classMethod() // TypeError: undefined is not a function\n\n父类的静态方法，可以被子类继承。  \n静态方法也是可以从super对象上调用的。\n\n## Class的静态属性\n\n静态属性指的是Class本身的属性，即Class.propname，而不是定义在实例对象（this）上的属性。\n\n    class Foo {\n    }\n    Foo.prop = 1;\n    Foo.prop // 1\n\n目前，只有这种写法可行，因为ES6明确规定，Class内部只有静态方法，没有静态属性。\n\n## new.target属性\n\nnew是从构造函数生成实例的命令。ES6为new命令引入了一个new.target属性，（在构造函数中）返回new命令作用于的那个构造函数。如果构造函数不是通过new命令调用的，new.target会返回undefined，因此这个属性可以用来确定构造函数是怎么调用的。\n\n    function Person(name) {\n      if (new.target !== undefined) {\n        this.name = name;\n      } else {\n        throw new Error('必须使用new生成实例');\n      }\n    }\n    // 另一种写法\n    function Person(name) {\n      if (new.target === Person) {\n        this.name = name;\n      } else {\n        throw new Error('必须使用new生成实例');\n      }\n    }\n    var person = new Person('张三'); // 正确\n    var notAPerson = Person.call(person, '张三'); // 报错\n\nClass内部调用new.target，返回当前Class。  \n子类继承父类时，new.target会返回子类。\n\n    class Rectangle {\n      constructor(length, width) {\n        console.log(new.target === Rectangle);\n        // ...\n      }\n    }\n    class Square extends Rectangle {\n      constructor(length) {\n        super(length, length);\n      }\n    }\n    var obj = new Square(3); // 输出 false\n\n利用这个特点，可以写出不能独立使用、必须继承后才能使用的类。\n\n## 类的修饰\n\n修饰器（Decorator）是一个表达式，用来修改类的行为。这是ES7的一个提案，目前Babel转码器已经支持。  \n修饰器对类的行为的改变，是代码编译时发生的，而不是在运行时。这意味着，修饰器能在编译阶段运行代码。  \n​    \n读阮一峰老师《ECMAScript6入门》一书的笔记    \n<br>","slug":"JavaScript/es6-class","published":1,"updated":"2018-04-05T11:32:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfoy712m000pacieb5vmhwc0","content":"<h2 id=\"Class基本语法\"><a href=\"#Class基本语法\" class=\"headerlink\" title=\"Class基本语法\"></a>Class基本语法</h2><p>ES6的class可以看作只是一个语法糖，它的绝大部分功能，ES5都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。<br>​<br>    // old<br>      function Point(x,y){<br>      this.x = x;<br>      this.y = y;<br>    }<br>    Point.prototype.toString = function () {<br>      return ‘(‘ + this.x + ‘, ‘ + this.y + ‘)’;<br>    }<br>    // new<br>    class Point {<br>      constructor(x, y) {<br>        this.x = x;<br>        this.y = y;<br>      }<br>      toString() {<br>        return ‘(‘ + this.x + ‘, ‘ + this.y + ‘)’;<br>      }<br>    }</p>\n<a id=\"more\"></a> \n<p>Point类除了构造方法，还定义了一个toString方法。注意，定义“类”的方法的时候，前面不需要加上function这个保留字，直接把函数定义放进去了就可以了。另外，方法之间不需要逗号分隔，加了会报错。<br>构造函数的prototype属性，在ES6的“类”上面继续存在。事实上，类的所有方法都定义在类的prototype属性上面。<br>类的内部所有定义的方法，都是不可枚举的（enumerable）。这一点与ES5的行为不一致。</p>\n<pre><code>class Point {\n  constructor(x, y) {}\n  toString() {}\n}\nObject.keys(Point.prototype) // []\nObject.getOwnPropertyNames(Point.prototype) // [&quot;constructor&quot;,&quot;toString&quot;]\n</code></pre><p>constructor方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。一个类必须有constructor方法，如果没有显式定义，一个空的constructor方法会被默认添加。<br>constructor方法默认返回实例对象（即this），完全可以指定返回另外一个对象。</p>\n<pre><code>class Foo {\n  constructor() {\n    return Object.create(null);\n  }\n}\nnew Foo() instanceof Foo; // false \n</code></pre><p>生成实例对象的写法，与ES5完全一样，也是使用new命令。如果忘记加上new，像函数那样调用Class，将会报错。<br>与ES5一样，实例的属性除非显式定义在其本身（即定义在this对象上），否则都是定义在原型上（即定义在class上）<br>与ES5一样，类的所有实例共享一个原型对象。所以<strong>proto</strong>属性是相等的。<br>name属性总是返回紧跟在class关键字后面的类名。</p>\n<pre><code>class Point {}\nPoint.name // &quot;Point&quot;\n</code></pre><p>下面代码使用表达式定义了一个类。需要注意的是，这个类的名字是MyClass而不是Me，Me只在Class的内部代码可用，指代当前类。</p>\n<pre><code>const MyClass = class Me {\n  getClassName() {\n    return Me.name;\n  }\n};\n</code></pre><p>如果Class内部没用到的话，可以省略Me。<br>采用Class表达式，可以写出立即执行的Class。<br>Class不存在变量提升（hoist），这一点与ES5完全不同。</p>\n<pre><code>new Foo(); // ReferenceError\nclass Foo {}\n</code></pre><p>类和模块的内部，默认就是严格模式，所以不需要使用use strict指定运行模式。<br>考虑到未来所有的代码，其实都是运行在模块之中，所以ES6实际上把整个语言升级到了严格模式。</p>\n<h2 id=\"Class的继承\"><a href=\"#Class的继承\" class=\"headerlink\" title=\"Class的继承\"></a>Class的继承</h2><p>Class之间可以通过extends关键字实现继承，这比ES5的通过修改原型链实现继承，要清晰和方便很多。</p>\n<pre><code>class ColorPoint extends Point {}\n</code></pre><p>下面代码中，constructor方法和toString方法之中，都出现了super关键字，它指代父类的实例（即父类的this对象）。</p>\n<pre><code>class ColorPoint extends Point {\n  constructor(x, y, color) {\n    super(x, y); // 调用父类的constructor(x, y)\n    this.color = color;\n  }\n  toString() {\n    return this.color + &apos; &apos; + super.toString(); // 调用父类的toString()\n  }\n}\n</code></pre><p>子类必须在constructor方法中调用super方法，否则新建实例时会报错。这是因为子类没有自己的this对象，而是继承父类的this对象，然后对其进行加工。如果不调用super方法，子类就得不到this对象。<br>子类实例的<strong>proto</strong>属性的<strong>proto</strong>属性，指向父类实例的<strong>proto</strong>属性。也就是说，子类的原型的原型，是父类的原型。</p>\n<h2 id=\"原生构造函数的继承\"><a href=\"#原生构造函数的继承\" class=\"headerlink\" title=\"原生构造函数的继承\"></a>原生构造函数的继承</h2><p>原生构造函数是指语言内置的构造函数，通常用来生成数据结构。<br>ES6允许继承原生构造函数定义子类，因为ES6是先新建父类的实例对象this，然后再用子类的构造函数修饰this，使得父类的所有行为都可以继承。</p>\n<pre><code>class MyArray extends Array {\n  constructor(...args) {\n    super(...args);\n  }\n}\nvar arr = new MyArray();\narr[0] = 12;\narr.length // 1\narr.length = 0;\narr[0] // undefined\n</code></pre><h2 id=\"Class的取值函数（getter）和存值函数（setter）\"><a href=\"#Class的取值函数（getter）和存值函数（setter）\" class=\"headerlink\" title=\"Class的取值函数（getter）和存值函数（setter）\"></a>Class的取值函数（getter）和存值函数（setter）</h2><p>与ES5一样，在Class内部可以使用get和set关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。</p>\n<pre><code>class MyClass {\n  constructor() {\n    // ...\n  }\n  get prop() {\n    return &apos;getter&apos;;\n  }\n  set prop(value) {\n    console.log(&apos;setter: &apos;+value);\n  }\n}\nlet inst = new MyClass();\ninst.prop = 123; // setter: 123\ninst.prop // &apos;getter&apos;\n</code></pre><h2 id=\"Class的静态方法\"><a href=\"#Class的静态方法\" class=\"headerlink\" title=\"Class的静态方法\"></a>Class的静态方法</h2><p>类相当于实例的原型，所有在类中定义的方法，都会被实例继承。如果在一个方法前，加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”。</p>\n<pre><code>class Foo {\n  static classMethod() {\n    return &apos;hello&apos;;\n  }\n}\nFoo.classMethod() // &apos;hello&apos;\nvar foo = new Foo();\nfoo.classMethod() // TypeError: undefined is not a function\n</code></pre><p>父类的静态方法，可以被子类继承。<br>静态方法也是可以从super对象上调用的。</p>\n<h2 id=\"Class的静态属性\"><a href=\"#Class的静态属性\" class=\"headerlink\" title=\"Class的静态属性\"></a>Class的静态属性</h2><p>静态属性指的是Class本身的属性，即Class.propname，而不是定义在实例对象（this）上的属性。</p>\n<pre><code>class Foo {\n}\nFoo.prop = 1;\nFoo.prop // 1\n</code></pre><p>目前，只有这种写法可行，因为ES6明确规定，Class内部只有静态方法，没有静态属性。</p>\n<h2 id=\"new-target属性\"><a href=\"#new-target属性\" class=\"headerlink\" title=\"new.target属性\"></a>new.target属性</h2><p>new是从构造函数生成实例的命令。ES6为new命令引入了一个new.target属性，（在构造函数中）返回new命令作用于的那个构造函数。如果构造函数不是通过new命令调用的，new.target会返回undefined，因此这个属性可以用来确定构造函数是怎么调用的。</p>\n<pre><code>function Person(name) {\n  if (new.target !== undefined) {\n    this.name = name;\n  } else {\n    throw new Error(&apos;必须使用new生成实例&apos;);\n  }\n}\n// 另一种写法\nfunction Person(name) {\n  if (new.target === Person) {\n    this.name = name;\n  } else {\n    throw new Error(&apos;必须使用new生成实例&apos;);\n  }\n}\nvar person = new Person(&apos;张三&apos;); // 正确\nvar notAPerson = Person.call(person, &apos;张三&apos;); // 报错\n</code></pre><p>Class内部调用new.target，返回当前Class。<br>子类继承父类时，new.target会返回子类。</p>\n<pre><code>class Rectangle {\n  constructor(length, width) {\n    console.log(new.target === Rectangle);\n    // ...\n  }\n}\nclass Square extends Rectangle {\n  constructor(length) {\n    super(length, length);\n  }\n}\nvar obj = new Square(3); // 输出 false\n</code></pre><p>利用这个特点，可以写出不能独立使用、必须继承后才能使用的类。</p>\n<h2 id=\"类的修饰\"><a href=\"#类的修饰\" class=\"headerlink\" title=\"类的修饰\"></a>类的修饰</h2><p>修饰器（Decorator）是一个表达式，用来修改类的行为。这是ES7的一个提案，目前Babel转码器已经支持。<br>修饰器对类的行为的改变，是代码编译时发生的，而不是在运行时。这意味着，修饰器能在编译阶段运行代码。<br>​<br>读阮一峰老师《ECMAScript6入门》一书的笔记<br><br></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Class基本语法\"><a href=\"#Class基本语法\" class=\"headerlink\" title=\"Class基本语法\"></a>Class基本语法</h2><p>ES6的class可以看作只是一个语法糖，它的绝大部分功能，ES5都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。<br>​<br>    // old<br>      function Point(x,y){<br>      this.x = x;<br>      this.y = y;<br>    }<br>    Point.prototype.toString = function () {<br>      return ‘(‘ + this.x + ‘, ‘ + this.y + ‘)’;<br>    }<br>    // new<br>    class Point {<br>      constructor(x, y) {<br>        this.x = x;<br>        this.y = y;<br>      }<br>      toString() {<br>        return ‘(‘ + this.x + ‘, ‘ + this.y + ‘)’;<br>      }<br>    }</p>","more":"<p>Point类除了构造方法，还定义了一个toString方法。注意，定义“类”的方法的时候，前面不需要加上function这个保留字，直接把函数定义放进去了就可以了。另外，方法之间不需要逗号分隔，加了会报错。<br>构造函数的prototype属性，在ES6的“类”上面继续存在。事实上，类的所有方法都定义在类的prototype属性上面。<br>类的内部所有定义的方法，都是不可枚举的（enumerable）。这一点与ES5的行为不一致。</p>\n<pre><code>class Point {\n  constructor(x, y) {}\n  toString() {}\n}\nObject.keys(Point.prototype) // []\nObject.getOwnPropertyNames(Point.prototype) // [&quot;constructor&quot;,&quot;toString&quot;]\n</code></pre><p>constructor方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。一个类必须有constructor方法，如果没有显式定义，一个空的constructor方法会被默认添加。<br>constructor方法默认返回实例对象（即this），完全可以指定返回另外一个对象。</p>\n<pre><code>class Foo {\n  constructor() {\n    return Object.create(null);\n  }\n}\nnew Foo() instanceof Foo; // false \n</code></pre><p>生成实例对象的写法，与ES5完全一样，也是使用new命令。如果忘记加上new，像函数那样调用Class，将会报错。<br>与ES5一样，实例的属性除非显式定义在其本身（即定义在this对象上），否则都是定义在原型上（即定义在class上）<br>与ES5一样，类的所有实例共享一个原型对象。所以<strong>proto</strong>属性是相等的。<br>name属性总是返回紧跟在class关键字后面的类名。</p>\n<pre><code>class Point {}\nPoint.name // &quot;Point&quot;\n</code></pre><p>下面代码使用表达式定义了一个类。需要注意的是，这个类的名字是MyClass而不是Me，Me只在Class的内部代码可用，指代当前类。</p>\n<pre><code>const MyClass = class Me {\n  getClassName() {\n    return Me.name;\n  }\n};\n</code></pre><p>如果Class内部没用到的话，可以省略Me。<br>采用Class表达式，可以写出立即执行的Class。<br>Class不存在变量提升（hoist），这一点与ES5完全不同。</p>\n<pre><code>new Foo(); // ReferenceError\nclass Foo {}\n</code></pre><p>类和模块的内部，默认就是严格模式，所以不需要使用use strict指定运行模式。<br>考虑到未来所有的代码，其实都是运行在模块之中，所以ES6实际上把整个语言升级到了严格模式。</p>\n<h2 id=\"Class的继承\"><a href=\"#Class的继承\" class=\"headerlink\" title=\"Class的继承\"></a>Class的继承</h2><p>Class之间可以通过extends关键字实现继承，这比ES5的通过修改原型链实现继承，要清晰和方便很多。</p>\n<pre><code>class ColorPoint extends Point {}\n</code></pre><p>下面代码中，constructor方法和toString方法之中，都出现了super关键字，它指代父类的实例（即父类的this对象）。</p>\n<pre><code>class ColorPoint extends Point {\n  constructor(x, y, color) {\n    super(x, y); // 调用父类的constructor(x, y)\n    this.color = color;\n  }\n  toString() {\n    return this.color + &apos; &apos; + super.toString(); // 调用父类的toString()\n  }\n}\n</code></pre><p>子类必须在constructor方法中调用super方法，否则新建实例时会报错。这是因为子类没有自己的this对象，而是继承父类的this对象，然后对其进行加工。如果不调用super方法，子类就得不到this对象。<br>子类实例的<strong>proto</strong>属性的<strong>proto</strong>属性，指向父类实例的<strong>proto</strong>属性。也就是说，子类的原型的原型，是父类的原型。</p>\n<h2 id=\"原生构造函数的继承\"><a href=\"#原生构造函数的继承\" class=\"headerlink\" title=\"原生构造函数的继承\"></a>原生构造函数的继承</h2><p>原生构造函数是指语言内置的构造函数，通常用来生成数据结构。<br>ES6允许继承原生构造函数定义子类，因为ES6是先新建父类的实例对象this，然后再用子类的构造函数修饰this，使得父类的所有行为都可以继承。</p>\n<pre><code>class MyArray extends Array {\n  constructor(...args) {\n    super(...args);\n  }\n}\nvar arr = new MyArray();\narr[0] = 12;\narr.length // 1\narr.length = 0;\narr[0] // undefined\n</code></pre><h2 id=\"Class的取值函数（getter）和存值函数（setter）\"><a href=\"#Class的取值函数（getter）和存值函数（setter）\" class=\"headerlink\" title=\"Class的取值函数（getter）和存值函数（setter）\"></a>Class的取值函数（getter）和存值函数（setter）</h2><p>与ES5一样，在Class内部可以使用get和set关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。</p>\n<pre><code>class MyClass {\n  constructor() {\n    // ...\n  }\n  get prop() {\n    return &apos;getter&apos;;\n  }\n  set prop(value) {\n    console.log(&apos;setter: &apos;+value);\n  }\n}\nlet inst = new MyClass();\ninst.prop = 123; // setter: 123\ninst.prop // &apos;getter&apos;\n</code></pre><h2 id=\"Class的静态方法\"><a href=\"#Class的静态方法\" class=\"headerlink\" title=\"Class的静态方法\"></a>Class的静态方法</h2><p>类相当于实例的原型，所有在类中定义的方法，都会被实例继承。如果在一个方法前，加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”。</p>\n<pre><code>class Foo {\n  static classMethod() {\n    return &apos;hello&apos;;\n  }\n}\nFoo.classMethod() // &apos;hello&apos;\nvar foo = new Foo();\nfoo.classMethod() // TypeError: undefined is not a function\n</code></pre><p>父类的静态方法，可以被子类继承。<br>静态方法也是可以从super对象上调用的。</p>\n<h2 id=\"Class的静态属性\"><a href=\"#Class的静态属性\" class=\"headerlink\" title=\"Class的静态属性\"></a>Class的静态属性</h2><p>静态属性指的是Class本身的属性，即Class.propname，而不是定义在实例对象（this）上的属性。</p>\n<pre><code>class Foo {\n}\nFoo.prop = 1;\nFoo.prop // 1\n</code></pre><p>目前，只有这种写法可行，因为ES6明确规定，Class内部只有静态方法，没有静态属性。</p>\n<h2 id=\"new-target属性\"><a href=\"#new-target属性\" class=\"headerlink\" title=\"new.target属性\"></a>new.target属性</h2><p>new是从构造函数生成实例的命令。ES6为new命令引入了一个new.target属性，（在构造函数中）返回new命令作用于的那个构造函数。如果构造函数不是通过new命令调用的，new.target会返回undefined，因此这个属性可以用来确定构造函数是怎么调用的。</p>\n<pre><code>function Person(name) {\n  if (new.target !== undefined) {\n    this.name = name;\n  } else {\n    throw new Error(&apos;必须使用new生成实例&apos;);\n  }\n}\n// 另一种写法\nfunction Person(name) {\n  if (new.target === Person) {\n    this.name = name;\n  } else {\n    throw new Error(&apos;必须使用new生成实例&apos;);\n  }\n}\nvar person = new Person(&apos;张三&apos;); // 正确\nvar notAPerson = Person.call(person, &apos;张三&apos;); // 报错\n</code></pre><p>Class内部调用new.target，返回当前Class。<br>子类继承父类时，new.target会返回子类。</p>\n<pre><code>class Rectangle {\n  constructor(length, width) {\n    console.log(new.target === Rectangle);\n    // ...\n  }\n}\nclass Square extends Rectangle {\n  constructor(length) {\n    super(length, length);\n  }\n}\nvar obj = new Square(3); // 输出 false\n</code></pre><p>利用这个特点，可以写出不能独立使用、必须继承后才能使用的类。</p>\n<h2 id=\"类的修饰\"><a href=\"#类的修饰\" class=\"headerlink\" title=\"类的修饰\"></a>类的修饰</h2><p>修饰器（Decorator）是一个表达式，用来修改类的行为。这是ES7的一个提案，目前Babel转码器已经支持。<br>修饰器对类的行为的改变，是代码编译时发生的，而不是在运行时。这意味着，修饰器能在编译阶段运行代码。<br>​<br>读阮一峰老师《ECMAScript6入门》一书的笔记<br><br></p>"},{"title":"ES6-Module","date":"2016-02-01T16:00:00.000Z","_content":"\nES6的Class只是面向对象编程的语法糖，升级了ES5的构造函数的原型链继承的写法，并没有解决模块化问题。Module功能就是为了解决这个问题而提出的。  \n在ES6之前，社区制定了一些模块加载方案，最主要的有CommonJS和AMD两种。前者用于服务器，后者用于浏览器。ES6在语言规格的层面上，实现了模块功能，而且实现得相当简单，完全可以取代现有的CommonJS和AMD规范，成为浏览器和服务器通用的模块解决方案。\n\n    // CommonJS模块\n    let { stat, exists, readFile } = require('fs');\n\n上面代码的实质是整体加载fs模块（即加载fs的所有方法），生成一个对象（_fs），然后再从这个对象上面读取3个方法。这种加载称为“运行时加载”，因为只有运行时才能得到这个对象，导致完全没办法在编译时做“静态优化”。\n\n<!-- more --> \n\n    // ES6模块\n    import { stat, exists, readFile } from 'fs';\n\n上面代码的实质是从fs模块加载3个方法，其他方法不加载。这种加载称为“编译时加载”，即ES6可以在编译时就完成模块加载，效率要比CommonJS模块的加载方式高。当然，这也导致了没法引用ES6模块本身，因为它不是对象。\n\n## 严格模式(ES5引入)\n\nES6的模块自动采用严格模式，不管你有没有在模块头部加上\"use strict\"。\n\n## export命令 \n\n模块功能主要由两个命令构成：export和import。export命令用于规定模块的对外接口，import命令用于输入其他模块提供的功能。  \n一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量。\n\n    // good\n    export var firstName = 'Michael';\n    export var lastName = 'Jackson';\n    // best\n    var firstName = 'Michael';\n    var lastName = 'Jackson';\n    export {firstName, lastName};\n\nexport命令除了输出变量，还可以输出函数或类（class）。\n\n    function v1() { ... }\n    function v2() { ... }\n    export {\n      v1 as streamV1,\n      v2 as streamV2,\n      v2 as streamLatestVersion\n    };\n\nexport命令可以出现在模块的任何位置，只要处于模块顶层就可以。如果处于块级作用域内，就会报错，下面的import命令也是如此。这是因为处于条件代码块之中，就没法做静态优化了，违背了ES6模块的设计初衷。  \nexport语句输出的值是动态绑定，绑定其所在的模块。\n\n    export var foo = 'bar';\n    setTimeout(() => foo = 'baz', 500);\n\n上面代码输出变量foo，值为bar，500毫秒之后变成baz。\n\n## import命令\n\n使用export命令定义了模块的对外接口以后，其他JS文件就可以通过import命令加载这个模块（文件）。\n\n    import {firstName, lastName, year} from './profile';\n\nimport命令接受一个对象（用大括号表示），里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（profile.js）对外接口的名称相同。  \n如果想为输入的变量重新取一个名字，import命令要使用as关键字，将输入的变量重命名。\n\n    import { lastName as surname } from './profile';\n\nimport命令具有提升效果，会提升到整个模块的头部，首先执行。\n\n    foo();\n    import { foo } from 'my_module';\n\n如果在一个模块之中，先输入后输出同一个模块，import语句可以与export语句写在一起。\n\n    export { es6 as default } from './someModule';\n    // 等同于 (best)\n    import { es6 } from './someModule';\n    export default es6;\n\n## 模块的整体加载\n\n除了指定加载某个输出值，还可以使用整体加载，即用星号（*）指定一个对象，所有输出值都加载在这个对象上面。\n\n    import * as circle from './circle';\n    console.log(\"圆面积：\" \\+ circle.area(4));\n    console.log(\"圆周长：\" \\+ circle.circumference(14));\n\n### export default命令\n\nexport default命令，为模块指定默认输出。一个模块只能有一个默认输出，因此export deault命令只能使用一次。\n\n    export default function () {\n      console.log('foo');\n    }\n\n其他模块加载该模块时，import命令可以为该匿名函数指定任意名字。这时import命令后面，不使用大括号。\n\n    import customName from './export-default';\n    customName(); // 'foo'\n\nexport default命令用在非匿名函数前，也是可以的。加载的时候，视同匿名函数加载。  \n如果想在一条import语句中，同时输入默认方法和其他变量，可以写成下面这样。  \n\n    import customName, { otherMethod } from './export-default';\n\n## 模块的继承\n\n    export * from 'circle';\n    export var e = 2.71828182846;\n    export default function(x) {\n      return Math.exp(x);\n    }\n\n上面代码中的export *，表示再输出circle模块的所有属性和方法。注意，export *命令会忽略circle模块的default方法。然后，上面代码又输出了自定义的e变量和默认方法。\n\n## ES6模块加载的实质\nES6模块加载的机制，与CommonJS模块完全不同。CommonJS模块输出的是一个值的拷贝，一旦输出一个值，模块内部的变化就影响不到这个值。而ES6模块输出的是值的引,用此，ES6模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。。  \n由于ES6输入的模块变量，只是一个”符号连接“，所以这个变量是只读的，对它进行重新赋值会报错。\n\n## ES6模块的循环加载\n\nES6处理“循环加载”与CommonJS有本质的不同。ES6模块是动态引用，遇到模块加载命令import时，不会去执行模块，只是生成一个指向被加载模块的引用，需要开发者自己保证，真正取值的时候能够取到值。\n\n## ES6模块的转码\n\n浏览器目前还不支持ES6模块，为了现在就能使用，可以将转为ES5的写法。除了Babel可以用来转码之外，还有以下两个方法，也可以用来转码。\n\n    ES6 module transpiler\n    SystemJS\n\n读阮一峰老师《ECMAScript6入门》一书的笔记    \n<br>","source":"_posts/JavaScript/es6-module.md","raw":"title: ES6-Module\n\ndate: 2016-2-2\n\ntags:\n    - es6\n    - note\n\ncategories:\n    - JavaScript\n---\n\nES6的Class只是面向对象编程的语法糖，升级了ES5的构造函数的原型链继承的写法，并没有解决模块化问题。Module功能就是为了解决这个问题而提出的。  \n在ES6之前，社区制定了一些模块加载方案，最主要的有CommonJS和AMD两种。前者用于服务器，后者用于浏览器。ES6在语言规格的层面上，实现了模块功能，而且实现得相当简单，完全可以取代现有的CommonJS和AMD规范，成为浏览器和服务器通用的模块解决方案。\n\n    // CommonJS模块\n    let { stat, exists, readFile } = require('fs');\n\n上面代码的实质是整体加载fs模块（即加载fs的所有方法），生成一个对象（_fs），然后再从这个对象上面读取3个方法。这种加载称为“运行时加载”，因为只有运行时才能得到这个对象，导致完全没办法在编译时做“静态优化”。\n\n<!-- more --> \n\n    // ES6模块\n    import { stat, exists, readFile } from 'fs';\n\n上面代码的实质是从fs模块加载3个方法，其他方法不加载。这种加载称为“编译时加载”，即ES6可以在编译时就完成模块加载，效率要比CommonJS模块的加载方式高。当然，这也导致了没法引用ES6模块本身，因为它不是对象。\n\n## 严格模式(ES5引入)\n\nES6的模块自动采用严格模式，不管你有没有在模块头部加上\"use strict\"。\n\n## export命令 \n\n模块功能主要由两个命令构成：export和import。export命令用于规定模块的对外接口，import命令用于输入其他模块提供的功能。  \n一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量。\n\n    // good\n    export var firstName = 'Michael';\n    export var lastName = 'Jackson';\n    // best\n    var firstName = 'Michael';\n    var lastName = 'Jackson';\n    export {firstName, lastName};\n\nexport命令除了输出变量，还可以输出函数或类（class）。\n\n    function v1() { ... }\n    function v2() { ... }\n    export {\n      v1 as streamV1,\n      v2 as streamV2,\n      v2 as streamLatestVersion\n    };\n\nexport命令可以出现在模块的任何位置，只要处于模块顶层就可以。如果处于块级作用域内，就会报错，下面的import命令也是如此。这是因为处于条件代码块之中，就没法做静态优化了，违背了ES6模块的设计初衷。  \nexport语句输出的值是动态绑定，绑定其所在的模块。\n\n    export var foo = 'bar';\n    setTimeout(() => foo = 'baz', 500);\n\n上面代码输出变量foo，值为bar，500毫秒之后变成baz。\n\n## import命令\n\n使用export命令定义了模块的对外接口以后，其他JS文件就可以通过import命令加载这个模块（文件）。\n\n    import {firstName, lastName, year} from './profile';\n\nimport命令接受一个对象（用大括号表示），里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（profile.js）对外接口的名称相同。  \n如果想为输入的变量重新取一个名字，import命令要使用as关键字，将输入的变量重命名。\n\n    import { lastName as surname } from './profile';\n\nimport命令具有提升效果，会提升到整个模块的头部，首先执行。\n\n    foo();\n    import { foo } from 'my_module';\n\n如果在一个模块之中，先输入后输出同一个模块，import语句可以与export语句写在一起。\n\n    export { es6 as default } from './someModule';\n    // 等同于 (best)\n    import { es6 } from './someModule';\n    export default es6;\n\n## 模块的整体加载\n\n除了指定加载某个输出值，还可以使用整体加载，即用星号（*）指定一个对象，所有输出值都加载在这个对象上面。\n\n    import * as circle from './circle';\n    console.log(\"圆面积：\" \\+ circle.area(4));\n    console.log(\"圆周长：\" \\+ circle.circumference(14));\n\n### export default命令\n\nexport default命令，为模块指定默认输出。一个模块只能有一个默认输出，因此export deault命令只能使用一次。\n\n    export default function () {\n      console.log('foo');\n    }\n\n其他模块加载该模块时，import命令可以为该匿名函数指定任意名字。这时import命令后面，不使用大括号。\n\n    import customName from './export-default';\n    customName(); // 'foo'\n\nexport default命令用在非匿名函数前，也是可以的。加载的时候，视同匿名函数加载。  \n如果想在一条import语句中，同时输入默认方法和其他变量，可以写成下面这样。  \n\n    import customName, { otherMethod } from './export-default';\n\n## 模块的继承\n\n    export * from 'circle';\n    export var e = 2.71828182846;\n    export default function(x) {\n      return Math.exp(x);\n    }\n\n上面代码中的export *，表示再输出circle模块的所有属性和方法。注意，export *命令会忽略circle模块的default方法。然后，上面代码又输出了自定义的e变量和默认方法。\n\n## ES6模块加载的实质\nES6模块加载的机制，与CommonJS模块完全不同。CommonJS模块输出的是一个值的拷贝，一旦输出一个值，模块内部的变化就影响不到这个值。而ES6模块输出的是值的引,用此，ES6模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。。  \n由于ES6输入的模块变量，只是一个”符号连接“，所以这个变量是只读的，对它进行重新赋值会报错。\n\n## ES6模块的循环加载\n\nES6处理“循环加载”与CommonJS有本质的不同。ES6模块是动态引用，遇到模块加载命令import时，不会去执行模块，只是生成一个指向被加载模块的引用，需要开发者自己保证，真正取值的时候能够取到值。\n\n## ES6模块的转码\n\n浏览器目前还不支持ES6模块，为了现在就能使用，可以将转为ES5的写法。除了Babel可以用来转码之外，还有以下两个方法，也可以用来转码。\n\n    ES6 module transpiler\n    SystemJS\n\n读阮一峰老师《ECMAScript6入门》一书的笔记    \n<br>","slug":"JavaScript/es6-module","published":1,"updated":"2018-04-05T11:32:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfoy712o000racientznuudo","content":"<p>ES6的Class只是面向对象编程的语法糖，升级了ES5的构造函数的原型链继承的写法，并没有解决模块化问题。Module功能就是为了解决这个问题而提出的。<br>在ES6之前，社区制定了一些模块加载方案，最主要的有CommonJS和AMD两种。前者用于服务器，后者用于浏览器。ES6在语言规格的层面上，实现了模块功能，而且实现得相当简单，完全可以取代现有的CommonJS和AMD规范，成为浏览器和服务器通用的模块解决方案。</p>\n<pre><code>// CommonJS模块\nlet { stat, exists, readFile } = require(&apos;fs&apos;);\n</code></pre><p>上面代码的实质是整体加载fs模块（即加载fs的所有方法），生成一个对象（_fs），然后再从这个对象上面读取3个方法。这种加载称为“运行时加载”，因为只有运行时才能得到这个对象，导致完全没办法在编译时做“静态优化”。</p>\n<a id=\"more\"></a> \n<pre><code>// ES6模块\nimport { stat, exists, readFile } from &apos;fs&apos;;\n</code></pre><p>上面代码的实质是从fs模块加载3个方法，其他方法不加载。这种加载称为“编译时加载”，即ES6可以在编译时就完成模块加载，效率要比CommonJS模块的加载方式高。当然，这也导致了没法引用ES6模块本身，因为它不是对象。</p>\n<h2 id=\"严格模式-ES5引入\"><a href=\"#严格模式-ES5引入\" class=\"headerlink\" title=\"严格模式(ES5引入)\"></a>严格模式(ES5引入)</h2><p>ES6的模块自动采用严格模式，不管你有没有在模块头部加上”use strict”。</p>\n<h2 id=\"export命令\"><a href=\"#export命令\" class=\"headerlink\" title=\"export命令\"></a>export命令</h2><p>模块功能主要由两个命令构成：export和import。export命令用于规定模块的对外接口，import命令用于输入其他模块提供的功能。<br>一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量。</p>\n<pre><code>// good\nexport var firstName = &apos;Michael&apos;;\nexport var lastName = &apos;Jackson&apos;;\n// best\nvar firstName = &apos;Michael&apos;;\nvar lastName = &apos;Jackson&apos;;\nexport {firstName, lastName};\n</code></pre><p>export命令除了输出变量，还可以输出函数或类（class）。</p>\n<pre><code>function v1() { ... }\nfunction v2() { ... }\nexport {\n  v1 as streamV1,\n  v2 as streamV2,\n  v2 as streamLatestVersion\n};\n</code></pre><p>export命令可以出现在模块的任何位置，只要处于模块顶层就可以。如果处于块级作用域内，就会报错，下面的import命令也是如此。这是因为处于条件代码块之中，就没法做静态优化了，违背了ES6模块的设计初衷。<br>export语句输出的值是动态绑定，绑定其所在的模块。</p>\n<pre><code>export var foo = &apos;bar&apos;;\nsetTimeout(() =&gt; foo = &apos;baz&apos;, 500);\n</code></pre><p>上面代码输出变量foo，值为bar，500毫秒之后变成baz。</p>\n<h2 id=\"import命令\"><a href=\"#import命令\" class=\"headerlink\" title=\"import命令\"></a>import命令</h2><p>使用export命令定义了模块的对外接口以后，其他JS文件就可以通过import命令加载这个模块（文件）。</p>\n<pre><code>import {firstName, lastName, year} from &apos;./profile&apos;;\n</code></pre><p>import命令接受一个对象（用大括号表示），里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（profile.js）对外接口的名称相同。<br>如果想为输入的变量重新取一个名字，import命令要使用as关键字，将输入的变量重命名。</p>\n<pre><code>import { lastName as surname } from &apos;./profile&apos;;\n</code></pre><p>import命令具有提升效果，会提升到整个模块的头部，首先执行。</p>\n<pre><code>foo();\nimport { foo } from &apos;my_module&apos;;\n</code></pre><p>如果在一个模块之中，先输入后输出同一个模块，import语句可以与export语句写在一起。</p>\n<pre><code>export { es6 as default } from &apos;./someModule&apos;;\n// 等同于 (best)\nimport { es6 } from &apos;./someModule&apos;;\nexport default es6;\n</code></pre><h2 id=\"模块的整体加载\"><a href=\"#模块的整体加载\" class=\"headerlink\" title=\"模块的整体加载\"></a>模块的整体加载</h2><p>除了指定加载某个输出值，还可以使用整体加载，即用星号（*）指定一个对象，所有输出值都加载在这个对象上面。</p>\n<pre><code>import * as circle from &apos;./circle&apos;;\nconsole.log(&quot;圆面积：&quot; \\+ circle.area(4));\nconsole.log(&quot;圆周长：&quot; \\+ circle.circumference(14));\n</code></pre><h3 id=\"export-default命令\"><a href=\"#export-default命令\" class=\"headerlink\" title=\"export default命令\"></a>export default命令</h3><p>export default命令，为模块指定默认输出。一个模块只能有一个默认输出，因此export deault命令只能使用一次。</p>\n<pre><code>export default function () {\n  console.log(&apos;foo&apos;);\n}\n</code></pre><p>其他模块加载该模块时，import命令可以为该匿名函数指定任意名字。这时import命令后面，不使用大括号。</p>\n<pre><code>import customName from &apos;./export-default&apos;;\ncustomName(); // &apos;foo&apos;\n</code></pre><p>export default命令用在非匿名函数前，也是可以的。加载的时候，视同匿名函数加载。<br>如果想在一条import语句中，同时输入默认方法和其他变量，可以写成下面这样。  </p>\n<pre><code>import customName, { otherMethod } from &apos;./export-default&apos;;\n</code></pre><h2 id=\"模块的继承\"><a href=\"#模块的继承\" class=\"headerlink\" title=\"模块的继承\"></a>模块的继承</h2><pre><code>export * from &apos;circle&apos;;\nexport var e = 2.71828182846;\nexport default function(x) {\n  return Math.exp(x);\n}\n</code></pre><p>上面代码中的export <em>，表示再输出circle模块的所有属性和方法。注意，export </em>命令会忽略circle模块的default方法。然后，上面代码又输出了自定义的e变量和默认方法。</p>\n<h2 id=\"ES6模块加载的实质\"><a href=\"#ES6模块加载的实质\" class=\"headerlink\" title=\"ES6模块加载的实质\"></a>ES6模块加载的实质</h2><p>ES6模块加载的机制，与CommonJS模块完全不同。CommonJS模块输出的是一个值的拷贝，一旦输出一个值，模块内部的变化就影响不到这个值。而ES6模块输出的是值的引,用此，ES6模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。。<br>由于ES6输入的模块变量，只是一个”符号连接“，所以这个变量是只读的，对它进行重新赋值会报错。</p>\n<h2 id=\"ES6模块的循环加载\"><a href=\"#ES6模块的循环加载\" class=\"headerlink\" title=\"ES6模块的循环加载\"></a>ES6模块的循环加载</h2><p>ES6处理“循环加载”与CommonJS有本质的不同。ES6模块是动态引用，遇到模块加载命令import时，不会去执行模块，只是生成一个指向被加载模块的引用，需要开发者自己保证，真正取值的时候能够取到值。</p>\n<h2 id=\"ES6模块的转码\"><a href=\"#ES6模块的转码\" class=\"headerlink\" title=\"ES6模块的转码\"></a>ES6模块的转码</h2><p>浏览器目前还不支持ES6模块，为了现在就能使用，可以将转为ES5的写法。除了Babel可以用来转码之外，还有以下两个方法，也可以用来转码。</p>\n<pre><code>ES6 module transpiler\nSystemJS\n</code></pre><p>读阮一峰老师《ECMAScript6入门》一书的笔记<br><br></p>\n","site":{"data":{}},"excerpt":"<p>ES6的Class只是面向对象编程的语法糖，升级了ES5的构造函数的原型链继承的写法，并没有解决模块化问题。Module功能就是为了解决这个问题而提出的。<br>在ES6之前，社区制定了一些模块加载方案，最主要的有CommonJS和AMD两种。前者用于服务器，后者用于浏览器。ES6在语言规格的层面上，实现了模块功能，而且实现得相当简单，完全可以取代现有的CommonJS和AMD规范，成为浏览器和服务器通用的模块解决方案。</p>\n<pre><code>// CommonJS模块\nlet { stat, exists, readFile } = require(&apos;fs&apos;);\n</code></pre><p>上面代码的实质是整体加载fs模块（即加载fs的所有方法），生成一个对象（_fs），然后再从这个对象上面读取3个方法。这种加载称为“运行时加载”，因为只有运行时才能得到这个对象，导致完全没办法在编译时做“静态优化”。</p>","more":"<pre><code>// ES6模块\nimport { stat, exists, readFile } from &apos;fs&apos;;\n</code></pre><p>上面代码的实质是从fs模块加载3个方法，其他方法不加载。这种加载称为“编译时加载”，即ES6可以在编译时就完成模块加载，效率要比CommonJS模块的加载方式高。当然，这也导致了没法引用ES6模块本身，因为它不是对象。</p>\n<h2 id=\"严格模式-ES5引入\"><a href=\"#严格模式-ES5引入\" class=\"headerlink\" title=\"严格模式(ES5引入)\"></a>严格模式(ES5引入)</h2><p>ES6的模块自动采用严格模式，不管你有没有在模块头部加上”use strict”。</p>\n<h2 id=\"export命令\"><a href=\"#export命令\" class=\"headerlink\" title=\"export命令\"></a>export命令</h2><p>模块功能主要由两个命令构成：export和import。export命令用于规定模块的对外接口，import命令用于输入其他模块提供的功能。<br>一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量。</p>\n<pre><code>// good\nexport var firstName = &apos;Michael&apos;;\nexport var lastName = &apos;Jackson&apos;;\n// best\nvar firstName = &apos;Michael&apos;;\nvar lastName = &apos;Jackson&apos;;\nexport {firstName, lastName};\n</code></pre><p>export命令除了输出变量，还可以输出函数或类（class）。</p>\n<pre><code>function v1() { ... }\nfunction v2() { ... }\nexport {\n  v1 as streamV1,\n  v2 as streamV2,\n  v2 as streamLatestVersion\n};\n</code></pre><p>export命令可以出现在模块的任何位置，只要处于模块顶层就可以。如果处于块级作用域内，就会报错，下面的import命令也是如此。这是因为处于条件代码块之中，就没法做静态优化了，违背了ES6模块的设计初衷。<br>export语句输出的值是动态绑定，绑定其所在的模块。</p>\n<pre><code>export var foo = &apos;bar&apos;;\nsetTimeout(() =&gt; foo = &apos;baz&apos;, 500);\n</code></pre><p>上面代码输出变量foo，值为bar，500毫秒之后变成baz。</p>\n<h2 id=\"import命令\"><a href=\"#import命令\" class=\"headerlink\" title=\"import命令\"></a>import命令</h2><p>使用export命令定义了模块的对外接口以后，其他JS文件就可以通过import命令加载这个模块（文件）。</p>\n<pre><code>import {firstName, lastName, year} from &apos;./profile&apos;;\n</code></pre><p>import命令接受一个对象（用大括号表示），里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（profile.js）对外接口的名称相同。<br>如果想为输入的变量重新取一个名字，import命令要使用as关键字，将输入的变量重命名。</p>\n<pre><code>import { lastName as surname } from &apos;./profile&apos;;\n</code></pre><p>import命令具有提升效果，会提升到整个模块的头部，首先执行。</p>\n<pre><code>foo();\nimport { foo } from &apos;my_module&apos;;\n</code></pre><p>如果在一个模块之中，先输入后输出同一个模块，import语句可以与export语句写在一起。</p>\n<pre><code>export { es6 as default } from &apos;./someModule&apos;;\n// 等同于 (best)\nimport { es6 } from &apos;./someModule&apos;;\nexport default es6;\n</code></pre><h2 id=\"模块的整体加载\"><a href=\"#模块的整体加载\" class=\"headerlink\" title=\"模块的整体加载\"></a>模块的整体加载</h2><p>除了指定加载某个输出值，还可以使用整体加载，即用星号（*）指定一个对象，所有输出值都加载在这个对象上面。</p>\n<pre><code>import * as circle from &apos;./circle&apos;;\nconsole.log(&quot;圆面积：&quot; \\+ circle.area(4));\nconsole.log(&quot;圆周长：&quot; \\+ circle.circumference(14));\n</code></pre><h3 id=\"export-default命令\"><a href=\"#export-default命令\" class=\"headerlink\" title=\"export default命令\"></a>export default命令</h3><p>export default命令，为模块指定默认输出。一个模块只能有一个默认输出，因此export deault命令只能使用一次。</p>\n<pre><code>export default function () {\n  console.log(&apos;foo&apos;);\n}\n</code></pre><p>其他模块加载该模块时，import命令可以为该匿名函数指定任意名字。这时import命令后面，不使用大括号。</p>\n<pre><code>import customName from &apos;./export-default&apos;;\ncustomName(); // &apos;foo&apos;\n</code></pre><p>export default命令用在非匿名函数前，也是可以的。加载的时候，视同匿名函数加载。<br>如果想在一条import语句中，同时输入默认方法和其他变量，可以写成下面这样。  </p>\n<pre><code>import customName, { otherMethod } from &apos;./export-default&apos;;\n</code></pre><h2 id=\"模块的继承\"><a href=\"#模块的继承\" class=\"headerlink\" title=\"模块的继承\"></a>模块的继承</h2><pre><code>export * from &apos;circle&apos;;\nexport var e = 2.71828182846;\nexport default function(x) {\n  return Math.exp(x);\n}\n</code></pre><p>上面代码中的export <em>，表示再输出circle模块的所有属性和方法。注意，export </em>命令会忽略circle模块的default方法。然后，上面代码又输出了自定义的e变量和默认方法。</p>\n<h2 id=\"ES6模块加载的实质\"><a href=\"#ES6模块加载的实质\" class=\"headerlink\" title=\"ES6模块加载的实质\"></a>ES6模块加载的实质</h2><p>ES6模块加载的机制，与CommonJS模块完全不同。CommonJS模块输出的是一个值的拷贝，一旦输出一个值，模块内部的变化就影响不到这个值。而ES6模块输出的是值的引,用此，ES6模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。。<br>由于ES6输入的模块变量，只是一个”符号连接“，所以这个变量是只读的，对它进行重新赋值会报错。</p>\n<h2 id=\"ES6模块的循环加载\"><a href=\"#ES6模块的循环加载\" class=\"headerlink\" title=\"ES6模块的循环加载\"></a>ES6模块的循环加载</h2><p>ES6处理“循环加载”与CommonJS有本质的不同。ES6模块是动态引用，遇到模块加载命令import时，不会去执行模块，只是生成一个指向被加载模块的引用，需要开发者自己保证，真正取值的时候能够取到值。</p>\n<h2 id=\"ES6模块的转码\"><a href=\"#ES6模块的转码\" class=\"headerlink\" title=\"ES6模块的转码\"></a>ES6模块的转码</h2><p>浏览器目前还不支持ES6模块，为了现在就能使用，可以将转为ES5的写法。除了Babel可以用来转码之外，还有以下两个方法，也可以用来转码。</p>\n<pre><code>ES6 module transpiler\nSystemJS\n</code></pre><p>读阮一峰老师《ECMAScript6入门》一书的笔记<br><br></p>"},{"title":"ES6-Generator函数","date":"2015-10-27T16:00:00.000Z","_content":"\n## 基本概念\nGenerator函数是ES6提供的一种异步编程解决方案  \nGenerator函数有两个特征。一是，function命令与函数名之间有一个星号；二是，函数体内部使用yield语句，定义不同的内部状态。  \n调用Generator函数后，该函数并不执行，返回的是一个指向内部状态的指针对象（遍历器对象）。下一步，必须调用遍历器对象的next方法，使得指针移向下一个状态。也就是说，每次调用next方法，内部指针就从函数头部或上一次停下来的地方开始执行，直到遇到下一个yield语句（或return语句）为止。  \n\n    function* helloWorldGenerator() {\n      yield 'hello';\n      yield 'world';\n      return 'ending';\n    }\n    var hw = helloWorldGenerator();\n    hw.next() // { value: 'hello', done: false }\n    hw.next() // { value: 'world', done: false }\n    hw.next() // { value: 'ending', done: true }\n    hw.next() // { value: undefined, done: true }\n\n每次调用遍历器对象的next方法，就会返回一个有着value和done两个属性的对象。value属性表示当前的内部状态的值，是yield语句后面那个表达式的值；done属性是一个布尔值，表示是否遍历结束。\n\n<!-- more --> \n\n##yield语句\n遍历器对象的next方法的运行逻辑如下。\n\n    遇到yield语句，就暂停执行后面的操作，并将紧跟在yield后面的那个表达式的值，作为返回的对象的value属性值。\n    下一次调用next方法时，再继续往下执行，直到遇到下一个yield语句。\n    如果没有再遇到新的yield语句，就一直运行到函数结束，直到return语句为止，并将return语句后面的表达式的值，作为返回的对象的value属性值。\n    如果该函数没有return语句，则返回的对象的value属性值为undefined。\n\nyield语句后面的表达式，只有当调用next方法、内部指针指向该语句时才会执行，因此等于为JavaScript提供了手动的“惰性求值”（Lazy Evaluation）的语法功能。  \n一个函数里面，只能执行一次（或者说一个）return语句，但是可以执行多次（或者说多个）yield语句。  \nyield语句不能用在普通函数中，否则会报错。  \nyield语句如果用在一个表达式之中，必须放在圆括号里面。yield语句用作函数参数或赋值表达式的右边，可以不加括号。\n\n##next方法的参数\nyield句本身没有返回值，或者说总是返回undefined。next方法可以带一个参数，该参数就会被当作上一个yield语句的返回值。  \n由于next方法的参数表示上一个yield语句的返回值，所以第一次使用next方法时，不能带有参数。V8引擎直接忽略第一次使用next方法时的参数，只有从第二次使用next方法开始，参数才是有效的。\n\n##for...of循环\nfor...of循环可以自动遍历Generator函数，且此时不再需要调用next方法。这里需要注意，一旦next方法的返回对象的done属性为true，for...of循环就会中止，且不包含该返回对象。  \nfor...of循环、扩展运算符（...）、解构赋值和Array.from方法内部调用的，都是遍历器接口。这意味着，它们可以将Generator函数返回的Iterator对象，作为参数。\n\n    function* numbers () {\n      yield 1\n      yield 2\n      return 3\n      yield 4\n    }\n    [...numbers()] // [1, 2]\n    Array.from(numbers()) // [1, 2]\n    let [x, y] = numbers();\n    x // 1\n    y // 2\n    for (let n of numbers()) {\n      console.log(n)\n    }\n    // 1\n    // 2\n\n##Generator.prototype.throw()\nGenerator函数返回的遍历器对象，都有一个throw方法，可以在函数体外抛出错误，然后在Generator函数体内捕获。  \n如果Generator函数内部没有部署try...catch代码块，那么throw方法抛出的错误，将被外部try...catch代码块捕获。  \n如果Generator函数内部部署了try...catch代码块，那么遍历器的throw方法抛出的错误，不影响下一次遍历，否则遍历直接终止。  \nGenerator函数内抛出的错误，也可以被函数体外的catch捕获。\n\n##Generator.prototype.return()\nGenerator函数返回的遍历器对象，还有一个return方法，可以返回给定的值，并且终结遍历Generator函数。\n\n    function* gen() {\n      yield 1;\n      yield 2;\n      yield 3;\n    }\n    var g = gen();\n    g.next()        // { value: 1, done: false }\n    g.return(\"foo\") // { value: \"foo\", done: true }\n    g.next()        // { value: undefined, done: true }\n\n如果return方法调用时，不提供参数，则返回值的vaule属性为undefined。  \n如果Generator函数内部有try...finally代码块，那么return方法会推迟到finally代码块执行完再执行。\n\n## yield*语句\nyield*语句，用来在一个Generator函数里面执行另一个Generator函数。  \nyield*语句等同于在Generator函数内部，部署一个for...of循环。  \n如果yield*后面跟着一个数组，由于数组原生支持遍历器，因此就会遍历数组成员。\n\n    function* gen(){    \n      yield* [\"a\", \"b\", \"c\"];\n    }\n    gen().next() // { value:\"a\", done:false }\n\n##作为对象属性的Generator函数\n```\nlet obj = {\n  * myGeneratorMethod() {\n    ···\n  }\n}; \n```\n\n等价于\n\n```\nlet obj = {\n  myGeneratorMethod: function* () {\n    // ···\n  }\n};\n```\n\n##构造函数是Generator函数 // ？\n\n##Generator函数推导 // ?\n\n##Generator与状态机 // ?\n\n##Generator与协程 // ?\n\n##异步操作的同步化表达\nGenerator函数的暂停执行的效果，意味着可以把异步操作写在yield语句里面，等到调用next方法时再往后执行。\n\n```\n  function* main() {\n    var result = yield request(\"http://some.url\");\n    var resp = JSON.parse(result);\n      console.log(resp.value);\n  }\n  function request(url) {\n    makeAjaxCall(url, function(response){\n      it.next(response);\n    });\n  }\n  var it = main();\n  it.next();\n```\n\n##控制流管理 // ???\n\n##部署iterator接口 // ?\n\n##作为数据结构 // ?\n\n读阮一峰老师《ECMAScript6入门》一书的笔记    \n<br>","source":"_posts/JavaScript/es6-generator.md","raw":"title: ES6-Generator函数\n\ndate: 2015-10-28\n\ntags:\n    - es6\n    - note\n\ncategories:\n    - JavaScript\n---\n\n## 基本概念\nGenerator函数是ES6提供的一种异步编程解决方案  \nGenerator函数有两个特征。一是，function命令与函数名之间有一个星号；二是，函数体内部使用yield语句，定义不同的内部状态。  \n调用Generator函数后，该函数并不执行，返回的是一个指向内部状态的指针对象（遍历器对象）。下一步，必须调用遍历器对象的next方法，使得指针移向下一个状态。也就是说，每次调用next方法，内部指针就从函数头部或上一次停下来的地方开始执行，直到遇到下一个yield语句（或return语句）为止。  \n\n    function* helloWorldGenerator() {\n      yield 'hello';\n      yield 'world';\n      return 'ending';\n    }\n    var hw = helloWorldGenerator();\n    hw.next() // { value: 'hello', done: false }\n    hw.next() // { value: 'world', done: false }\n    hw.next() // { value: 'ending', done: true }\n    hw.next() // { value: undefined, done: true }\n\n每次调用遍历器对象的next方法，就会返回一个有着value和done两个属性的对象。value属性表示当前的内部状态的值，是yield语句后面那个表达式的值；done属性是一个布尔值，表示是否遍历结束。\n\n<!-- more --> \n\n##yield语句\n遍历器对象的next方法的运行逻辑如下。\n\n    遇到yield语句，就暂停执行后面的操作，并将紧跟在yield后面的那个表达式的值，作为返回的对象的value属性值。\n    下一次调用next方法时，再继续往下执行，直到遇到下一个yield语句。\n    如果没有再遇到新的yield语句，就一直运行到函数结束，直到return语句为止，并将return语句后面的表达式的值，作为返回的对象的value属性值。\n    如果该函数没有return语句，则返回的对象的value属性值为undefined。\n\nyield语句后面的表达式，只有当调用next方法、内部指针指向该语句时才会执行，因此等于为JavaScript提供了手动的“惰性求值”（Lazy Evaluation）的语法功能。  \n一个函数里面，只能执行一次（或者说一个）return语句，但是可以执行多次（或者说多个）yield语句。  \nyield语句不能用在普通函数中，否则会报错。  \nyield语句如果用在一个表达式之中，必须放在圆括号里面。yield语句用作函数参数或赋值表达式的右边，可以不加括号。\n\n##next方法的参数\nyield句本身没有返回值，或者说总是返回undefined。next方法可以带一个参数，该参数就会被当作上一个yield语句的返回值。  \n由于next方法的参数表示上一个yield语句的返回值，所以第一次使用next方法时，不能带有参数。V8引擎直接忽略第一次使用next方法时的参数，只有从第二次使用next方法开始，参数才是有效的。\n\n##for...of循环\nfor...of循环可以自动遍历Generator函数，且此时不再需要调用next方法。这里需要注意，一旦next方法的返回对象的done属性为true，for...of循环就会中止，且不包含该返回对象。  \nfor...of循环、扩展运算符（...）、解构赋值和Array.from方法内部调用的，都是遍历器接口。这意味着，它们可以将Generator函数返回的Iterator对象，作为参数。\n\n    function* numbers () {\n      yield 1\n      yield 2\n      return 3\n      yield 4\n    }\n    [...numbers()] // [1, 2]\n    Array.from(numbers()) // [1, 2]\n    let [x, y] = numbers();\n    x // 1\n    y // 2\n    for (let n of numbers()) {\n      console.log(n)\n    }\n    // 1\n    // 2\n\n##Generator.prototype.throw()\nGenerator函数返回的遍历器对象，都有一个throw方法，可以在函数体外抛出错误，然后在Generator函数体内捕获。  \n如果Generator函数内部没有部署try...catch代码块，那么throw方法抛出的错误，将被外部try...catch代码块捕获。  \n如果Generator函数内部部署了try...catch代码块，那么遍历器的throw方法抛出的错误，不影响下一次遍历，否则遍历直接终止。  \nGenerator函数内抛出的错误，也可以被函数体外的catch捕获。\n\n##Generator.prototype.return()\nGenerator函数返回的遍历器对象，还有一个return方法，可以返回给定的值，并且终结遍历Generator函数。\n\n    function* gen() {\n      yield 1;\n      yield 2;\n      yield 3;\n    }\n    var g = gen();\n    g.next()        // { value: 1, done: false }\n    g.return(\"foo\") // { value: \"foo\", done: true }\n    g.next()        // { value: undefined, done: true }\n\n如果return方法调用时，不提供参数，则返回值的vaule属性为undefined。  \n如果Generator函数内部有try...finally代码块，那么return方法会推迟到finally代码块执行完再执行。\n\n## yield*语句\nyield*语句，用来在一个Generator函数里面执行另一个Generator函数。  \nyield*语句等同于在Generator函数内部，部署一个for...of循环。  \n如果yield*后面跟着一个数组，由于数组原生支持遍历器，因此就会遍历数组成员。\n\n    function* gen(){    \n      yield* [\"a\", \"b\", \"c\"];\n    }\n    gen().next() // { value:\"a\", done:false }\n\n##作为对象属性的Generator函数\n```\nlet obj = {\n  * myGeneratorMethod() {\n    ···\n  }\n}; \n```\n\n等价于\n\n```\nlet obj = {\n  myGeneratorMethod: function* () {\n    // ···\n  }\n};\n```\n\n##构造函数是Generator函数 // ？\n\n##Generator函数推导 // ?\n\n##Generator与状态机 // ?\n\n##Generator与协程 // ?\n\n##异步操作的同步化表达\nGenerator函数的暂停执行的效果，意味着可以把异步操作写在yield语句里面，等到调用next方法时再往后执行。\n\n```\n  function* main() {\n    var result = yield request(\"http://some.url\");\n    var resp = JSON.parse(result);\n      console.log(resp.value);\n  }\n  function request(url) {\n    makeAjaxCall(url, function(response){\n      it.next(response);\n    });\n  }\n  var it = main();\n  it.next();\n```\n\n##控制流管理 // ???\n\n##部署iterator接口 // ?\n\n##作为数据结构 // ?\n\n读阮一峰老师《ECMAScript6入门》一书的笔记    \n<br>","slug":"JavaScript/es6-generator","published":1,"updated":"2018-04-05T11:32:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfoy712q000vaciex5mi1qim","content":"<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p>Generator函数是ES6提供的一种异步编程解决方案<br>Generator函数有两个特征。一是，function命令与函数名之间有一个星号；二是，函数体内部使用yield语句，定义不同的内部状态。<br>调用Generator函数后，该函数并不执行，返回的是一个指向内部状态的指针对象（遍历器对象）。下一步，必须调用遍历器对象的next方法，使得指针移向下一个状态。也就是说，每次调用next方法，内部指针就从函数头部或上一次停下来的地方开始执行，直到遇到下一个yield语句（或return语句）为止。  </p>\n<pre><code>function* helloWorldGenerator() {\n  yield &apos;hello&apos;;\n  yield &apos;world&apos;;\n  return &apos;ending&apos;;\n}\nvar hw = helloWorldGenerator();\nhw.next() // { value: &apos;hello&apos;, done: false }\nhw.next() // { value: &apos;world&apos;, done: false }\nhw.next() // { value: &apos;ending&apos;, done: true }\nhw.next() // { value: undefined, done: true }\n</code></pre><p>每次调用遍历器对象的next方法，就会返回一个有着value和done两个属性的对象。value属性表示当前的内部状态的值，是yield语句后面那个表达式的值；done属性是一个布尔值，表示是否遍历结束。</p>\n<a id=\"more\"></a> \n<p>##yield语句<br>遍历器对象的next方法的运行逻辑如下。</p>\n<pre><code>遇到yield语句，就暂停执行后面的操作，并将紧跟在yield后面的那个表达式的值，作为返回的对象的value属性值。\n下一次调用next方法时，再继续往下执行，直到遇到下一个yield语句。\n如果没有再遇到新的yield语句，就一直运行到函数结束，直到return语句为止，并将return语句后面的表达式的值，作为返回的对象的value属性值。\n如果该函数没有return语句，则返回的对象的value属性值为undefined。\n</code></pre><p>yield语句后面的表达式，只有当调用next方法、内部指针指向该语句时才会执行，因此等于为JavaScript提供了手动的“惰性求值”（Lazy Evaluation）的语法功能。<br>一个函数里面，只能执行一次（或者说一个）return语句，但是可以执行多次（或者说多个）yield语句。<br>yield语句不能用在普通函数中，否则会报错。<br>yield语句如果用在一个表达式之中，必须放在圆括号里面。yield语句用作函数参数或赋值表达式的右边，可以不加括号。</p>\n<p>##next方法的参数<br>yield句本身没有返回值，或者说总是返回undefined。next方法可以带一个参数，该参数就会被当作上一个yield语句的返回值。<br>由于next方法的参数表示上一个yield语句的返回值，所以第一次使用next方法时，不能带有参数。V8引擎直接忽略第一次使用next方法时的参数，只有从第二次使用next方法开始，参数才是有效的。</p>\n<p>##for…of循环<br>for…of循环可以自动遍历Generator函数，且此时不再需要调用next方法。这里需要注意，一旦next方法的返回对象的done属性为true，for…of循环就会中止，且不包含该返回对象。<br>for…of循环、扩展运算符（…）、解构赋值和Array.from方法内部调用的，都是遍历器接口。这意味着，它们可以将Generator函数返回的Iterator对象，作为参数。</p>\n<pre><code>function* numbers () {\n  yield 1\n  yield 2\n  return 3\n  yield 4\n}\n[...numbers()] // [1, 2]\nArray.from(numbers()) // [1, 2]\nlet [x, y] = numbers();\nx // 1\ny // 2\nfor (let n of numbers()) {\n  console.log(n)\n}\n// 1\n// 2\n</code></pre><p>##Generator.prototype.throw()<br>Generator函数返回的遍历器对象，都有一个throw方法，可以在函数体外抛出错误，然后在Generator函数体内捕获。<br>如果Generator函数内部没有部署try…catch代码块，那么throw方法抛出的错误，将被外部try…catch代码块捕获。<br>如果Generator函数内部部署了try…catch代码块，那么遍历器的throw方法抛出的错误，不影响下一次遍历，否则遍历直接终止。<br>Generator函数内抛出的错误，也可以被函数体外的catch捕获。</p>\n<p>##Generator.prototype.return()<br>Generator函数返回的遍历器对象，还有一个return方法，可以返回给定的值，并且终结遍历Generator函数。</p>\n<pre><code>function* gen() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\nvar g = gen();\ng.next()        // { value: 1, done: false }\ng.return(&quot;foo&quot;) // { value: &quot;foo&quot;, done: true }\ng.next()        // { value: undefined, done: true }\n</code></pre><p>如果return方法调用时，不提供参数，则返回值的vaule属性为undefined。<br>如果Generator函数内部有try…finally代码块，那么return方法会推迟到finally代码块执行完再执行。</p>\n<h2 id=\"yield-语句\"><a href=\"#yield-语句\" class=\"headerlink\" title=\"yield*语句\"></a>yield*语句</h2><p>yield<em>语句，用来在一个Generator函数里面执行另一个Generator函数。<br>yield</em>语句等同于在Generator函数内部，部署一个for…of循环。<br>如果yield*后面跟着一个数组，由于数组原生支持遍历器，因此就会遍历数组成员。</p>\n<pre><code>function* gen(){    \n  yield* [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;];\n}\ngen().next() // { value:&quot;a&quot;, done:false }\n</code></pre><p>##作为对象属性的Generator函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;</span><br><span class=\"line\">  * myGeneratorMethod() &#123;</span><br><span class=\"line\">    ···</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>等价于</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;</span><br><span class=\"line\">  myGeneratorMethod: function* () &#123;</span><br><span class=\"line\">    // ···</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>##构造函数是Generator函数 // ？</p>\n<p>##Generator函数推导 // ?</p>\n<p>##Generator与状态机 // ?</p>\n<p>##Generator与协程 // ?</p>\n<p>##异步操作的同步化表达<br>Generator函数的暂停执行的效果，意味着可以把异步操作写在yield语句里面，等到调用next方法时再往后执行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function* main() &#123;</span><br><span class=\"line\">  var result = yield request(&quot;http://some.url&quot;);</span><br><span class=\"line\">  var resp = JSON.parse(result);</span><br><span class=\"line\">    console.log(resp.value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function request(url) &#123;</span><br><span class=\"line\">  makeAjaxCall(url, function(response)&#123;</span><br><span class=\"line\">    it.next(response);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var it = main();</span><br><span class=\"line\">it.next();</span><br></pre></td></tr></table></figure>\n<p>##控制流管理 // ???</p>\n<p>##部署iterator接口 // ?</p>\n<p>##作为数据结构 // ?</p>\n<p>读阮一峰老师《ECMAScript6入门》一书的笔记<br><br></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p>Generator函数是ES6提供的一种异步编程解决方案<br>Generator函数有两个特征。一是，function命令与函数名之间有一个星号；二是，函数体内部使用yield语句，定义不同的内部状态。<br>调用Generator函数后，该函数并不执行，返回的是一个指向内部状态的指针对象（遍历器对象）。下一步，必须调用遍历器对象的next方法，使得指针移向下一个状态。也就是说，每次调用next方法，内部指针就从函数头部或上一次停下来的地方开始执行，直到遇到下一个yield语句（或return语句）为止。  </p>\n<pre><code>function* helloWorldGenerator() {\n  yield &apos;hello&apos;;\n  yield &apos;world&apos;;\n  return &apos;ending&apos;;\n}\nvar hw = helloWorldGenerator();\nhw.next() // { value: &apos;hello&apos;, done: false }\nhw.next() // { value: &apos;world&apos;, done: false }\nhw.next() // { value: &apos;ending&apos;, done: true }\nhw.next() // { value: undefined, done: true }\n</code></pre><p>每次调用遍历器对象的next方法，就会返回一个有着value和done两个属性的对象。value属性表示当前的内部状态的值，是yield语句后面那个表达式的值；done属性是一个布尔值，表示是否遍历结束。</p>","more":"<p>##yield语句<br>遍历器对象的next方法的运行逻辑如下。</p>\n<pre><code>遇到yield语句，就暂停执行后面的操作，并将紧跟在yield后面的那个表达式的值，作为返回的对象的value属性值。\n下一次调用next方法时，再继续往下执行，直到遇到下一个yield语句。\n如果没有再遇到新的yield语句，就一直运行到函数结束，直到return语句为止，并将return语句后面的表达式的值，作为返回的对象的value属性值。\n如果该函数没有return语句，则返回的对象的value属性值为undefined。\n</code></pre><p>yield语句后面的表达式，只有当调用next方法、内部指针指向该语句时才会执行，因此等于为JavaScript提供了手动的“惰性求值”（Lazy Evaluation）的语法功能。<br>一个函数里面，只能执行一次（或者说一个）return语句，但是可以执行多次（或者说多个）yield语句。<br>yield语句不能用在普通函数中，否则会报错。<br>yield语句如果用在一个表达式之中，必须放在圆括号里面。yield语句用作函数参数或赋值表达式的右边，可以不加括号。</p>\n<p>##next方法的参数<br>yield句本身没有返回值，或者说总是返回undefined。next方法可以带一个参数，该参数就会被当作上一个yield语句的返回值。<br>由于next方法的参数表示上一个yield语句的返回值，所以第一次使用next方法时，不能带有参数。V8引擎直接忽略第一次使用next方法时的参数，只有从第二次使用next方法开始，参数才是有效的。</p>\n<p>##for…of循环<br>for…of循环可以自动遍历Generator函数，且此时不再需要调用next方法。这里需要注意，一旦next方法的返回对象的done属性为true，for…of循环就会中止，且不包含该返回对象。<br>for…of循环、扩展运算符（…）、解构赋值和Array.from方法内部调用的，都是遍历器接口。这意味着，它们可以将Generator函数返回的Iterator对象，作为参数。</p>\n<pre><code>function* numbers () {\n  yield 1\n  yield 2\n  return 3\n  yield 4\n}\n[...numbers()] // [1, 2]\nArray.from(numbers()) // [1, 2]\nlet [x, y] = numbers();\nx // 1\ny // 2\nfor (let n of numbers()) {\n  console.log(n)\n}\n// 1\n// 2\n</code></pre><p>##Generator.prototype.throw()<br>Generator函数返回的遍历器对象，都有一个throw方法，可以在函数体外抛出错误，然后在Generator函数体内捕获。<br>如果Generator函数内部没有部署try…catch代码块，那么throw方法抛出的错误，将被外部try…catch代码块捕获。<br>如果Generator函数内部部署了try…catch代码块，那么遍历器的throw方法抛出的错误，不影响下一次遍历，否则遍历直接终止。<br>Generator函数内抛出的错误，也可以被函数体外的catch捕获。</p>\n<p>##Generator.prototype.return()<br>Generator函数返回的遍历器对象，还有一个return方法，可以返回给定的值，并且终结遍历Generator函数。</p>\n<pre><code>function* gen() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\nvar g = gen();\ng.next()        // { value: 1, done: false }\ng.return(&quot;foo&quot;) // { value: &quot;foo&quot;, done: true }\ng.next()        // { value: undefined, done: true }\n</code></pre><p>如果return方法调用时，不提供参数，则返回值的vaule属性为undefined。<br>如果Generator函数内部有try…finally代码块，那么return方法会推迟到finally代码块执行完再执行。</p>\n<h2 id=\"yield-语句\"><a href=\"#yield-语句\" class=\"headerlink\" title=\"yield*语句\"></a>yield*语句</h2><p>yield<em>语句，用来在一个Generator函数里面执行另一个Generator函数。<br>yield</em>语句等同于在Generator函数内部，部署一个for…of循环。<br>如果yield*后面跟着一个数组，由于数组原生支持遍历器，因此就会遍历数组成员。</p>\n<pre><code>function* gen(){    \n  yield* [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;];\n}\ngen().next() // { value:&quot;a&quot;, done:false }\n</code></pre><p>##作为对象属性的Generator函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;</span><br><span class=\"line\">  * myGeneratorMethod() &#123;</span><br><span class=\"line\">    ···</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>等价于</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;</span><br><span class=\"line\">  myGeneratorMethod: function* () &#123;</span><br><span class=\"line\">    // ···</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>##构造函数是Generator函数 // ？</p>\n<p>##Generator函数推导 // ?</p>\n<p>##Generator与状态机 // ?</p>\n<p>##Generator与协程 // ?</p>\n<p>##异步操作的同步化表达<br>Generator函数的暂停执行的效果，意味着可以把异步操作写在yield语句里面，等到调用next方法时再往后执行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function* main() &#123;</span><br><span class=\"line\">  var result = yield request(&quot;http://some.url&quot;);</span><br><span class=\"line\">  var resp = JSON.parse(result);</span><br><span class=\"line\">    console.log(resp.value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function request(url) &#123;</span><br><span class=\"line\">  makeAjaxCall(url, function(response)&#123;</span><br><span class=\"line\">    it.next(response);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var it = main();</span><br><span class=\"line\">it.next();</span><br></pre></td></tr></table></figure>\n<p>##控制流管理 // ???</p>\n<p>##部署iterator接口 // ?</p>\n<p>##作为数据结构 // ?</p>\n<p>读阮一峰老师《ECMAScript6入门》一书的笔记<br><br></p>"},{"title":"ES6-字符串的扩展","date":"2015-10-25T16:00:00.000Z","_content":"\n##字符的Unicode表示法\n\n   之前不识别在“\\u”后面跟上超过0xFFFF的数值（比如\\u20BB7），现在用只要将码点放入大括号中就能识别了（比如\\u{20BB7}）  \n   所以现在JavaScript共有6种方法可以表示一个字符\n​        \n        '\\z' === 'z'  // true  \n        '\\172' === 'z' // true  \n        '\\x7A' === 'z' // true  \n        '\\u007A' === 'z' // true  \n        '\\u{7A}' === 'z' // true        \n\n<!-- more -->      \n\n##codePointAt() // ?\n\n   JavaScript内部，字符以UTF-16的格式储存，每个字符固定为2个字节。对于那些需要4个字节储存的字符（Unicode码点大于0xFFFF的字符），JavaScript会认为它们是两个字符。\n\n        var s = \"𠮷\";\n        s.length // 2\n        s.charAt(0) // ''\n        s.charAt(1) // ''\n        s.charCodeAt(0) // 55362\n        s.charCodeAt(1) // 57271\n\n   ES6提供了codePointAt方法，能够正确处理4个字节储存的字符，返回一个字符的码点。\n\n##String.fromCodePoint()\n\n   ES5提供String.fromCharCode方法，用于从码点返回对应字符，但是这个方法不能识别辅助平面的字符（编号大于0xFFFF）。\n\n        String.fromCharCode(0x20BB7) // \"ஷ\"\n\n   ES6提供了String.fromCodePoint方法，可以识别0xFFFF的字符，弥补了String.fromCharCode方法的不足。\n\n        String.fromCodePoint(0x20BB7) // \"𠮷\"\n\n##字符串的遍历器接口\n\n   ES6为字符串添加了遍历器接口，使得字符串可以被for...of循环遍历。  \n   除了遍历字符串，这个遍历器最大的优点是可以识别大于0xFFFF的码点，传统的for循环无法识别这样的码点。\n\n##at() // ES7\n\n   ES5对字符串对象提供charAt方法，返回字符串给定位置的字符。该方法不能识别码点大于0xFFFF的字符。  \n   ES7提供了字符串实例的at方法，可以识别Unicode编号大于0xFFFF的字符，返回正确的字符。\n\n##normalize() // ?\n\n   ES6提供String.prototype.normalize()方法，用来将字符的不同表示方法统一为同样的形式，这称为Unicode正规化。\n\n##includes(), startsWith(), endsWith()\n   传统上，JavaScript只有indexOf方法，可以用来确定一个字符串是否包含在另一个字符串中。ES6又提供了三种新方法。  \n\n        includes()：返回布尔值，表示是否找到了参数字符串。\n        startsWith()：返回布尔值，表示参数字符串是否在源字符串的头部。\n        endsWith()：返回布尔值，表示参数字符串是否在源字符串的尾部。\n\n   这三个方法都支持第二个参数，endsWith的第二个参数表示它针对前n个字符，而其他两个方法针对从第n个位置直到字符串结束。\n\n        var s = 'Hello world!';\n        s.startsWith('world', 6) // true\n        s.endsWith('Hello', 5) // true\n        s.includes('Hello', 6) // false\n\n##repeat()\n\n   repeat方法返回一个新字符串，表示将原字符串重复n次。\n\n        'hello'.repeat(2) // \"hellohello\"\n        'na'.repeat(0) // \"\"\n\n   参数如果是小数，会被取整。  \n   如果repeat的参数是负数或者Infinity，会报错。  \n   但是，如果参数是0到-1之间的小数，则等同于0，这是因为会先进行取整运算。0到-1之间的小数，取整以后等于-0，repeat视同为0。 \n   参数NaN等同于0。  \n   如果repeat的参数是字符串，则会先转换成数字。\n\n##模板字符串\n\n   模板字符串（template string）是增强版的字符串，用反引号（`）标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。  \n   如果在模板字符串中需要使用反引号，则前面要用反斜杠转义。  \n   如果使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中。  \n   模板字符串中嵌入变量，需要将变量名写在${}之中。  \n   大括号内部可以放入任意的JavaScript表达式，可以进行运算，以及引用对象属性。  \n   模板字符串之中还能调用函数。  \n   如果大括号中的值不是字符串，将按照一般的规则转为字符串。比如，大括号中是一个对象，将默认调用对象的toString方法。  \n   如果模板字符串中的变量没有声明，将报错。  \n   由于模板字符串的大括号内部，就是执行JavaScript代码，因此如果大括号内部是一个字符串，将会原样输出。\n\n##标签模板\n\n   模板字符串可以紧跟在一个函数名后面，该函数将被调用来处理这个模板字符串。这被称为“标签模板”功能（tagged template）。  \n   tag函数的第一个参数是一个数组，该数组的成员是模板字符串中那些没有变量替换的部分，其他参数，都是模板字符串各个变量被替换后的值。\n​      \n        var a = 5;\n        var b = 10;\n        function tag(s, v1, v2) {\n          console.log(s[0]); // \"Hello \"\n          console.log(s[1]); // \" world \"\n          console.log(s[2]); // \"\"\n          console.log(v1); // 15\n          console.log(v2); // 50\n          return \"OK\";\n        }\n        tag`Hello ${ a + b } world ${ a * b}`; // \"OK\"  等同于 tag(['Hello ', ' world ', ''], 15, 50)\n\n   “标签模板”的一个重要应用，就是过滤HTML字符串，防止用户输入恶意内容。\n\n        var message = SaferHTML`<p>${sender} has sent you a message.</p>`;\n        function SaferHTML(templateData) {\n          var s = templateData[0];\n          for (var i = 1; i < arguments.length; i++) {\n            var arg = String(arguments[i]);\n            // Escape special characters in the substitution.\n            s += arg.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n            // Don't escape special characters in the template.\n            s += templateData[i];\n          }\n          return s;\n        }\n\n   模板处理函数的第一个参数（模板字符串数组），还有一个raw属性。该数组的成员与strings数组完全一致。两者唯一的区别，就是字符串里面的斜杠都被转义了。比如，strings.raw数组会将\\n视为\\和n两个字符，而不是换行符。这是为了方便取得转义之前的原始模板而设计的。\n\n##String.raw()\n   String.raw方法，往往用来充当模板字符串的处理函数，返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串，对应于替换变量后的模板字符串。\n\n    String.raw`Hi\\n${2+3}!`; // \"Hi\\\\n5!\"\n\n   String.raw方法也可以作为正常的函数使用。这时，它的第一个参数，应该是一个具有raw属性的对象，且raw属性的值应该是一个数组。\n\n    String.raw({ raw: 'test' }, 0, 1, 2); // 't0e1s2t', 等同于 String.raw({ raw: ['t','e','s','t'] }, 0, 1, 2);\n\n读阮一峰老师《ECMAScript6入门》一书的笔记    \n<br>","source":"_posts/JavaScript/es6-string.md","raw":"title: ES6-字符串的扩展\n\ndate: 2015-10-26\n\ntags:\n    - es6\n    - note\n\ncategories:\n    - JavaScript\n---\n\n##字符的Unicode表示法\n\n   之前不识别在“\\u”后面跟上超过0xFFFF的数值（比如\\u20BB7），现在用只要将码点放入大括号中就能识别了（比如\\u{20BB7}）  \n   所以现在JavaScript共有6种方法可以表示一个字符\n​        \n        '\\z' === 'z'  // true  \n        '\\172' === 'z' // true  \n        '\\x7A' === 'z' // true  \n        '\\u007A' === 'z' // true  \n        '\\u{7A}' === 'z' // true        \n\n<!-- more -->      \n\n##codePointAt() // ?\n\n   JavaScript内部，字符以UTF-16的格式储存，每个字符固定为2个字节。对于那些需要4个字节储存的字符（Unicode码点大于0xFFFF的字符），JavaScript会认为它们是两个字符。\n\n        var s = \"𠮷\";\n        s.length // 2\n        s.charAt(0) // ''\n        s.charAt(1) // ''\n        s.charCodeAt(0) // 55362\n        s.charCodeAt(1) // 57271\n\n   ES6提供了codePointAt方法，能够正确处理4个字节储存的字符，返回一个字符的码点。\n\n##String.fromCodePoint()\n\n   ES5提供String.fromCharCode方法，用于从码点返回对应字符，但是这个方法不能识别辅助平面的字符（编号大于0xFFFF）。\n\n        String.fromCharCode(0x20BB7) // \"ஷ\"\n\n   ES6提供了String.fromCodePoint方法，可以识别0xFFFF的字符，弥补了String.fromCharCode方法的不足。\n\n        String.fromCodePoint(0x20BB7) // \"𠮷\"\n\n##字符串的遍历器接口\n\n   ES6为字符串添加了遍历器接口，使得字符串可以被for...of循环遍历。  \n   除了遍历字符串，这个遍历器最大的优点是可以识别大于0xFFFF的码点，传统的for循环无法识别这样的码点。\n\n##at() // ES7\n\n   ES5对字符串对象提供charAt方法，返回字符串给定位置的字符。该方法不能识别码点大于0xFFFF的字符。  \n   ES7提供了字符串实例的at方法，可以识别Unicode编号大于0xFFFF的字符，返回正确的字符。\n\n##normalize() // ?\n\n   ES6提供String.prototype.normalize()方法，用来将字符的不同表示方法统一为同样的形式，这称为Unicode正规化。\n\n##includes(), startsWith(), endsWith()\n   传统上，JavaScript只有indexOf方法，可以用来确定一个字符串是否包含在另一个字符串中。ES6又提供了三种新方法。  \n\n        includes()：返回布尔值，表示是否找到了参数字符串。\n        startsWith()：返回布尔值，表示参数字符串是否在源字符串的头部。\n        endsWith()：返回布尔值，表示参数字符串是否在源字符串的尾部。\n\n   这三个方法都支持第二个参数，endsWith的第二个参数表示它针对前n个字符，而其他两个方法针对从第n个位置直到字符串结束。\n\n        var s = 'Hello world!';\n        s.startsWith('world', 6) // true\n        s.endsWith('Hello', 5) // true\n        s.includes('Hello', 6) // false\n\n##repeat()\n\n   repeat方法返回一个新字符串，表示将原字符串重复n次。\n\n        'hello'.repeat(2) // \"hellohello\"\n        'na'.repeat(0) // \"\"\n\n   参数如果是小数，会被取整。  \n   如果repeat的参数是负数或者Infinity，会报错。  \n   但是，如果参数是0到-1之间的小数，则等同于0，这是因为会先进行取整运算。0到-1之间的小数，取整以后等于-0，repeat视同为0。 \n   参数NaN等同于0。  \n   如果repeat的参数是字符串，则会先转换成数字。\n\n##模板字符串\n\n   模板字符串（template string）是增强版的字符串，用反引号（`）标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。  \n   如果在模板字符串中需要使用反引号，则前面要用反斜杠转义。  \n   如果使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中。  \n   模板字符串中嵌入变量，需要将变量名写在${}之中。  \n   大括号内部可以放入任意的JavaScript表达式，可以进行运算，以及引用对象属性。  \n   模板字符串之中还能调用函数。  \n   如果大括号中的值不是字符串，将按照一般的规则转为字符串。比如，大括号中是一个对象，将默认调用对象的toString方法。  \n   如果模板字符串中的变量没有声明，将报错。  \n   由于模板字符串的大括号内部，就是执行JavaScript代码，因此如果大括号内部是一个字符串，将会原样输出。\n\n##标签模板\n\n   模板字符串可以紧跟在一个函数名后面，该函数将被调用来处理这个模板字符串。这被称为“标签模板”功能（tagged template）。  \n   tag函数的第一个参数是一个数组，该数组的成员是模板字符串中那些没有变量替换的部分，其他参数，都是模板字符串各个变量被替换后的值。\n​      \n        var a = 5;\n        var b = 10;\n        function tag(s, v1, v2) {\n          console.log(s[0]); // \"Hello \"\n          console.log(s[1]); // \" world \"\n          console.log(s[2]); // \"\"\n          console.log(v1); // 15\n          console.log(v2); // 50\n          return \"OK\";\n        }\n        tag`Hello ${ a + b } world ${ a * b}`; // \"OK\"  等同于 tag(['Hello ', ' world ', ''], 15, 50)\n\n   “标签模板”的一个重要应用，就是过滤HTML字符串，防止用户输入恶意内容。\n\n        var message = SaferHTML`<p>${sender} has sent you a message.</p>`;\n        function SaferHTML(templateData) {\n          var s = templateData[0];\n          for (var i = 1; i < arguments.length; i++) {\n            var arg = String(arguments[i]);\n            // Escape special characters in the substitution.\n            s += arg.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n            // Don't escape special characters in the template.\n            s += templateData[i];\n          }\n          return s;\n        }\n\n   模板处理函数的第一个参数（模板字符串数组），还有一个raw属性。该数组的成员与strings数组完全一致。两者唯一的区别，就是字符串里面的斜杠都被转义了。比如，strings.raw数组会将\\n视为\\和n两个字符，而不是换行符。这是为了方便取得转义之前的原始模板而设计的。\n\n##String.raw()\n   String.raw方法，往往用来充当模板字符串的处理函数，返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串，对应于替换变量后的模板字符串。\n\n    String.raw`Hi\\n${2+3}!`; // \"Hi\\\\n5!\"\n\n   String.raw方法也可以作为正常的函数使用。这时，它的第一个参数，应该是一个具有raw属性的对象，且raw属性的值应该是一个数组。\n\n    String.raw({ raw: 'test' }, 0, 1, 2); // 't0e1s2t', 等同于 String.raw({ raw: ['t','e','s','t'] }, 0, 1, 2);\n\n读阮一峰老师《ECMAScript6入门》一书的笔记    \n<br>","slug":"JavaScript/es6-string","published":1,"updated":"2018-04-05T11:32:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfoy712r000xaciel0ipdgli","content":"<p>##字符的Unicode表示法</p>\n<p>   之前不识别在“\\u”后面跟上超过0xFFFF的数值（比如\\u20BB7），现在用只要将码点放入大括号中就能识别了（比如\\u{20BB7}）<br>   所以现在JavaScript共有6种方法可以表示一个字符<br>​<br>        ‘\\z’ === ‘z’  // true<br>        ‘\\172’ === ‘z’ // true<br>        ‘\\x7A’ === ‘z’ // true<br>        ‘\\u007A’ === ‘z’ // true<br>        ‘\\u{7A}’ === ‘z’ // true        </p>\n<a id=\"more\"></a>      \n<p>##codePointAt() // ?</p>\n<p>   JavaScript内部，字符以UTF-16的格式储存，每个字符固定为2个字节。对于那些需要4个字节储存的字符（Unicode码点大于0xFFFF的字符），JavaScript会认为它们是两个字符。</p>\n<pre><code>var s = &quot;𠮷&quot;;\ns.length // 2\ns.charAt(0) // &apos;&apos;\ns.charAt(1) // &apos;&apos;\ns.charCodeAt(0) // 55362\ns.charCodeAt(1) // 57271\n</code></pre><p>   ES6提供了codePointAt方法，能够正确处理4个字节储存的字符，返回一个字符的码点。</p>\n<p>##String.fromCodePoint()</p>\n<p>   ES5提供String.fromCharCode方法，用于从码点返回对应字符，但是这个方法不能识别辅助平面的字符（编号大于0xFFFF）。</p>\n<pre><code>String.fromCharCode(0x20BB7) // &quot;ஷ&quot;\n</code></pre><p>   ES6提供了String.fromCodePoint方法，可以识别0xFFFF的字符，弥补了String.fromCharCode方法的不足。</p>\n<pre><code>String.fromCodePoint(0x20BB7) // &quot;𠮷&quot;\n</code></pre><p>##字符串的遍历器接口</p>\n<p>   ES6为字符串添加了遍历器接口，使得字符串可以被for…of循环遍历。<br>   除了遍历字符串，这个遍历器最大的优点是可以识别大于0xFFFF的码点，传统的for循环无法识别这样的码点。</p>\n<p>##at() // ES7</p>\n<p>   ES5对字符串对象提供charAt方法，返回字符串给定位置的字符。该方法不能识别码点大于0xFFFF的字符。<br>   ES7提供了字符串实例的at方法，可以识别Unicode编号大于0xFFFF的字符，返回正确的字符。</p>\n<p>##normalize() // ?</p>\n<p>   ES6提供String.prototype.normalize()方法，用来将字符的不同表示方法统一为同样的形式，这称为Unicode正规化。</p>\n<p>##includes(), startsWith(), endsWith()<br>   传统上，JavaScript只有indexOf方法，可以用来确定一个字符串是否包含在另一个字符串中。ES6又提供了三种新方法。  </p>\n<pre><code>includes()：返回布尔值，表示是否找到了参数字符串。\nstartsWith()：返回布尔值，表示参数字符串是否在源字符串的头部。\nendsWith()：返回布尔值，表示参数字符串是否在源字符串的尾部。\n</code></pre><p>   这三个方法都支持第二个参数，endsWith的第二个参数表示它针对前n个字符，而其他两个方法针对从第n个位置直到字符串结束。</p>\n<pre><code>var s = &apos;Hello world!&apos;;\ns.startsWith(&apos;world&apos;, 6) // true\ns.endsWith(&apos;Hello&apos;, 5) // true\ns.includes(&apos;Hello&apos;, 6) // false\n</code></pre><p>##repeat()</p>\n<p>   repeat方法返回一个新字符串，表示将原字符串重复n次。</p>\n<pre><code>&apos;hello&apos;.repeat(2) // &quot;hellohello&quot;\n&apos;na&apos;.repeat(0) // &quot;&quot;\n</code></pre><p>   参数如果是小数，会被取整。<br>   如果repeat的参数是负数或者Infinity，会报错。<br>   但是，如果参数是0到-1之间的小数，则等同于0，这是因为会先进行取整运算。0到-1之间的小数，取整以后等于-0，repeat视同为0。<br>   参数NaN等同于0。<br>   如果repeat的参数是字符串，则会先转换成数字。</p>\n<p>##模板字符串</p>\n<p>   模板字符串（template string）是增强版的字符串，用反引号（`）标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。<br>   如果在模板字符串中需要使用反引号，则前面要用反斜杠转义。<br>   如果使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中。<br>   模板字符串中嵌入变量，需要将变量名写在${}之中。<br>   大括号内部可以放入任意的JavaScript表达式，可以进行运算，以及引用对象属性。<br>   模板字符串之中还能调用函数。<br>   如果大括号中的值不是字符串，将按照一般的规则转为字符串。比如，大括号中是一个对象，将默认调用对象的toString方法。<br>   如果模板字符串中的变量没有声明，将报错。<br>   由于模板字符串的大括号内部，就是执行JavaScript代码，因此如果大括号内部是一个字符串，将会原样输出。</p>\n<p>##标签模板</p>\n<p>   模板字符串可以紧跟在一个函数名后面，该函数将被调用来处理这个模板字符串。这被称为“标签模板”功能（tagged template）。<br>   tag函数的第一个参数是一个数组，该数组的成员是模板字符串中那些没有变量替换的部分，其他参数，都是模板字符串各个变量被替换后的值。<br>​<br>        var a = 5;<br>        var b = 10;<br>        function tag(s, v1, v2) {<br>          console.log(s[0]); // “Hello “<br>          console.log(s[1]); // “ world “<br>          console.log(s[2]); // “”<br>          console.log(v1); // 15<br>          console.log(v2); // 50<br>          return “OK”;<br>        }<br>        tag<code>Hello ${ a + b } world ${ a * b}</code>; // “OK”  等同于 tag([‘Hello ‘, ‘ world ‘, ‘’], 15, 50)</p>\n<p>   “标签模板”的一个重要应用，就是过滤HTML字符串，防止用户输入恶意内容。</p>\n<pre><code>var message = SaferHTML`&lt;p&gt;${sender} has sent you a message.&lt;/p&gt;`;\nfunction SaferHTML(templateData) {\n  var s = templateData[0];\n  for (var i = 1; i &lt; arguments.length; i++) {\n    var arg = String(arguments[i]);\n    // Escape special characters in the substitution.\n    s += arg.replace(/&amp;/g, &quot;&amp;amp;&quot;).replace(/&lt;/g, &quot;&amp;lt;&quot;).replace(/&gt;/g, &quot;&amp;gt;&quot;);\n    // Don&apos;t escape special characters in the template.\n    s += templateData[i];\n  }\n  return s;\n}\n</code></pre><p>   模板处理函数的第一个参数（模板字符串数组），还有一个raw属性。该数组的成员与strings数组完全一致。两者唯一的区别，就是字符串里面的斜杠都被转义了。比如，strings.raw数组会将\\n视为\\和n两个字符，而不是换行符。这是为了方便取得转义之前的原始模板而设计的。</p>\n<p>##String.raw()<br>   String.raw方法，往往用来充当模板字符串的处理函数，返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串，对应于替换变量后的模板字符串。</p>\n<pre><code>String.raw`Hi\\n${2+3}!`; // &quot;Hi\\\\n5!&quot;\n</code></pre><p>   String.raw方法也可以作为正常的函数使用。这时，它的第一个参数，应该是一个具有raw属性的对象，且raw属性的值应该是一个数组。</p>\n<pre><code>String.raw({ raw: &apos;test&apos; }, 0, 1, 2); // &apos;t0e1s2t&apos;, 等同于 String.raw({ raw: [&apos;t&apos;,&apos;e&apos;,&apos;s&apos;,&apos;t&apos;] }, 0, 1, 2);\n</code></pre><p>读阮一峰老师《ECMAScript6入门》一书的笔记<br><br></p>\n","site":{"data":{}},"excerpt":"<p>##字符的Unicode表示法</p>\n<p>   之前不识别在“\\u”后面跟上超过0xFFFF的数值（比如\\u20BB7），现在用只要将码点放入大括号中就能识别了（比如\\u{20BB7}）<br>   所以现在JavaScript共有6种方法可以表示一个字符<br>​<br>        ‘\\z’ === ‘z’  // true<br>        ‘\\172’ === ‘z’ // true<br>        ‘\\x7A’ === ‘z’ // true<br>        ‘\\u007A’ === ‘z’ // true<br>        ‘\\u{7A}’ === ‘z’ // true        </p>","more":"<p>##codePointAt() // ?</p>\n<p>   JavaScript内部，字符以UTF-16的格式储存，每个字符固定为2个字节。对于那些需要4个字节储存的字符（Unicode码点大于0xFFFF的字符），JavaScript会认为它们是两个字符。</p>\n<pre><code>var s = &quot;𠮷&quot;;\ns.length // 2\ns.charAt(0) // &apos;&apos;\ns.charAt(1) // &apos;&apos;\ns.charCodeAt(0) // 55362\ns.charCodeAt(1) // 57271\n</code></pre><p>   ES6提供了codePointAt方法，能够正确处理4个字节储存的字符，返回一个字符的码点。</p>\n<p>##String.fromCodePoint()</p>\n<p>   ES5提供String.fromCharCode方法，用于从码点返回对应字符，但是这个方法不能识别辅助平面的字符（编号大于0xFFFF）。</p>\n<pre><code>String.fromCharCode(0x20BB7) // &quot;ஷ&quot;\n</code></pre><p>   ES6提供了String.fromCodePoint方法，可以识别0xFFFF的字符，弥补了String.fromCharCode方法的不足。</p>\n<pre><code>String.fromCodePoint(0x20BB7) // &quot;𠮷&quot;\n</code></pre><p>##字符串的遍历器接口</p>\n<p>   ES6为字符串添加了遍历器接口，使得字符串可以被for…of循环遍历。<br>   除了遍历字符串，这个遍历器最大的优点是可以识别大于0xFFFF的码点，传统的for循环无法识别这样的码点。</p>\n<p>##at() // ES7</p>\n<p>   ES5对字符串对象提供charAt方法，返回字符串给定位置的字符。该方法不能识别码点大于0xFFFF的字符。<br>   ES7提供了字符串实例的at方法，可以识别Unicode编号大于0xFFFF的字符，返回正确的字符。</p>\n<p>##normalize() // ?</p>\n<p>   ES6提供String.prototype.normalize()方法，用来将字符的不同表示方法统一为同样的形式，这称为Unicode正规化。</p>\n<p>##includes(), startsWith(), endsWith()<br>   传统上，JavaScript只有indexOf方法，可以用来确定一个字符串是否包含在另一个字符串中。ES6又提供了三种新方法。  </p>\n<pre><code>includes()：返回布尔值，表示是否找到了参数字符串。\nstartsWith()：返回布尔值，表示参数字符串是否在源字符串的头部。\nendsWith()：返回布尔值，表示参数字符串是否在源字符串的尾部。\n</code></pre><p>   这三个方法都支持第二个参数，endsWith的第二个参数表示它针对前n个字符，而其他两个方法针对从第n个位置直到字符串结束。</p>\n<pre><code>var s = &apos;Hello world!&apos;;\ns.startsWith(&apos;world&apos;, 6) // true\ns.endsWith(&apos;Hello&apos;, 5) // true\ns.includes(&apos;Hello&apos;, 6) // false\n</code></pre><p>##repeat()</p>\n<p>   repeat方法返回一个新字符串，表示将原字符串重复n次。</p>\n<pre><code>&apos;hello&apos;.repeat(2) // &quot;hellohello&quot;\n&apos;na&apos;.repeat(0) // &quot;&quot;\n</code></pre><p>   参数如果是小数，会被取整。<br>   如果repeat的参数是负数或者Infinity，会报错。<br>   但是，如果参数是0到-1之间的小数，则等同于0，这是因为会先进行取整运算。0到-1之间的小数，取整以后等于-0，repeat视同为0。<br>   参数NaN等同于0。<br>   如果repeat的参数是字符串，则会先转换成数字。</p>\n<p>##模板字符串</p>\n<p>   模板字符串（template string）是增强版的字符串，用反引号（`）标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。<br>   如果在模板字符串中需要使用反引号，则前面要用反斜杠转义。<br>   如果使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中。<br>   模板字符串中嵌入变量，需要将变量名写在${}之中。<br>   大括号内部可以放入任意的JavaScript表达式，可以进行运算，以及引用对象属性。<br>   模板字符串之中还能调用函数。<br>   如果大括号中的值不是字符串，将按照一般的规则转为字符串。比如，大括号中是一个对象，将默认调用对象的toString方法。<br>   如果模板字符串中的变量没有声明，将报错。<br>   由于模板字符串的大括号内部，就是执行JavaScript代码，因此如果大括号内部是一个字符串，将会原样输出。</p>\n<p>##标签模板</p>\n<p>   模板字符串可以紧跟在一个函数名后面，该函数将被调用来处理这个模板字符串。这被称为“标签模板”功能（tagged template）。<br>   tag函数的第一个参数是一个数组，该数组的成员是模板字符串中那些没有变量替换的部分，其他参数，都是模板字符串各个变量被替换后的值。<br>​<br>        var a = 5;<br>        var b = 10;<br>        function tag(s, v1, v2) {<br>          console.log(s[0]); // “Hello “<br>          console.log(s[1]); // “ world “<br>          console.log(s[2]); // “”<br>          console.log(v1); // 15<br>          console.log(v2); // 50<br>          return “OK”;<br>        }<br>        tag<code>Hello ${ a + b } world ${ a * b}</code>; // “OK”  等同于 tag([‘Hello ‘, ‘ world ‘, ‘’], 15, 50)</p>\n<p>   “标签模板”的一个重要应用，就是过滤HTML字符串，防止用户输入恶意内容。</p>\n<pre><code>var message = SaferHTML`&lt;p&gt;${sender} has sent you a message.&lt;/p&gt;`;\nfunction SaferHTML(templateData) {\n  var s = templateData[0];\n  for (var i = 1; i &lt; arguments.length; i++) {\n    var arg = String(arguments[i]);\n    // Escape special characters in the substitution.\n    s += arg.replace(/&amp;/g, &quot;&amp;amp;&quot;).replace(/&lt;/g, &quot;&amp;lt;&quot;).replace(/&gt;/g, &quot;&amp;gt;&quot;);\n    // Don&apos;t escape special characters in the template.\n    s += templateData[i];\n  }\n  return s;\n}\n</code></pre><p>   模板处理函数的第一个参数（模板字符串数组），还有一个raw属性。该数组的成员与strings数组完全一致。两者唯一的区别，就是字符串里面的斜杠都被转义了。比如，strings.raw数组会将\\n视为\\和n两个字符，而不是换行符。这是为了方便取得转义之前的原始模板而设计的。</p>\n<p>##String.raw()<br>   String.raw方法，往往用来充当模板字符串的处理函数，返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串，对应于替换变量后的模板字符串。</p>\n<pre><code>String.raw`Hi\\n${2+3}!`; // &quot;Hi\\\\n5!&quot;\n</code></pre><p>   String.raw方法也可以作为正常的函数使用。这时，它的第一个参数，应该是一个具有raw属性的对象，且raw属性的值应该是一个数组。</p>\n<pre><code>String.raw({ raw: &apos;test&apos; }, 0, 1, 2); // &apos;t0e1s2t&apos;, 等同于 String.raw({ raw: [&apos;t&apos;,&apos;e&apos;,&apos;s&apos;,&apos;t&apos;] }, 0, 1, 2);\n</code></pre><p>读阮一峰老师《ECMAScript6入门》一书的笔记<br><br></p>"},{"title":"ES6-Module","date":"2016-02-01T16:00:00.000Z","_content":"\n# 规格文件\n\n规格文件是计算机语言的官方标准，详细描述语法规则和实现方法。  \nECMAScript 6的规格，可以在ECMA国际标准组织的官方网站（www.ecma-international.org/ecma-262/6.0/）免费下载和在线阅读。\n\n<!-- more --> \n\n# 编程风格\n\n## 块级作用域\n\nlet取代var  \n全局常量和线程安全\n在let和const之间，建议优先使用const，尤其是在全局环境，不应该设置变量，只应设置常量。这符合函数式编程思想，有利于将来的分布式运算。\n\n    // bad\n    var a = 1, b = 2, c = 3;\n    // good\n    const a = 1;\n    const b = 2;\n    const c = 3;\n\nconst声明常量还有两个好处，一是阅读代码的人立刻会意识到不应该修改这个值，二是防止了无意间修改变量值所导致的错误。  \n所有的函数都应该设置为常量。\n\n## 严格模式\n\nV8引擎只在严格模式之下，支持let。  \n\n## 字符串\n\n静态字符串一律使用单引号或反引号，不使用双引号。动态字符串使用反引号。\n\n    // bad\n    const a = \"foobar\";\n    const b = 'foo' + a + 'bar';\n    // good\n    const a = 'foobar';\n    const b = `foo${a}bar`;\n\n## 解构赋值\n\n使用数组成员对变量赋值时，优先使用解构赋值。\n\n    const arr = [1, 2, 3, 4];\n    // bad\n    const first = arr[0];\n    const second = arr[1];\n    // good\n    const [first, second] = arr;\n\n函数的参数如果是对象的成员，优先使用解构赋值。\n\n    // bad\n    function getFullName(user) {\n      const firstName = user.firstName;\n      const lastName = user.lastName;\n    }\n    // best\n    function getFullName({ firstName, lastName }) {\n    }\n\n如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值。这样便于以后添加返回值，以及更改返回值的顺序。\n\n    // bad\n    function processInput(input) {\n      return [left, right, top, bottom];\n    }\n    // good\n    function processInput(input) {\n      return { left, right, top, bottom };\n    }\n    const { left, right } = processInput(input);\n\n## 数组\n\n使用扩展运算符（...）拷贝数组。\n\n    // bad\n    const len = items.length;\n    const itemsCopy = [];\n    for (let i = 0; i < len; i++) {\n      itemsCopy[i] = items[i];\n    }\n    // good\n    const itemsCopy = [...items];\n\n使用Array.from方法，将类似数组的对象转为数组。\n\n    const foo = document.querySelectorAll('.foo');\n    const nodes = Array.from(foo);\n\n立即执行函数可以写成箭头函数的形式。\n\n    (() => {\n      console.log('Welcome to the Internet.');\n    })();\n\n那些需要使用函数表达式的场合，尽量用箭头函数代替。因为这样更简洁，而且绑定了this。\n\n    // bad\n    [1, 2, 3].map(function (x) {\n      return x * x;\n    });\n    // best\n    [1, 2, 3].map(x => x * x);\n\n简单的、单行的、不会复用的函数，建议采用箭头函数。如果函数体较为复杂，行数较多，还是应该采用传统的函数写法。  \n\n不要在函数体内使用arguments变量，使用rest运算符（...）代替。因为rest运算符显式表明你想要获取参数，而且arguments是一个类似数组的对象，而rest运算符可以提供一个真正的数组。\n\n    // bad\n    function concatenateAll() {\n      const args = Array.prototype.slice.call(arguments);\n      return args.join('');\n    }\n    // good\n    function concatenateAll(...args) {\n      return args.join('');\n    }\n\n使用默认值语法设置函数参数的默认值。\n\n    // bad\n    function handleThings(opts) {\n      opts = opts || {};\n    }\n    // good\n    function handleThings(opts = {}) {\n      // ...\n    }\n\n所有配置项都应该集中在一个对象，放在最后一个参数，布尔值不可以直接作为参数。\n\n    // bad\n    function divide(a, b, option = false ) {\n    }\n    // good\n    function divide(a, b, { option = false } = {}) {\n    }\n\n## Map结构\n\n注意区分Object和Map，只有模拟实体对象时，才使用Object。如果只是需要key: value的数据结构，使用Map结构。因为Map有内建的遍历机制。\n\n    let map = new Map(arr);\n    for (let key of map.keys()) {\n      console.log(key);\n    }\n    for (let value of map.values()) {\n      console.log(value);\n    }\n    for (let item of map.entries()) {\n      console.log(item[0], item[1]);\n    }\n\n## Class\n\n总是用Class，取代需要prototype的操作。因为Class的写法更简洁，更易于理解。\n\n    // bad\n    function Queue(contents = []) {\n      this._queue = [...contents];\n    }\n    Queue.prototype.pop = function() {\n      const value = this._queue[0];\n      this._queue.splice(0, 1);\n      return value;\n    }\n    // good\n    class Queue {\n      constructor(contents = []) {\n        this._queue = [...contents];\n      }\n      pop() {\n        const value = this._queue[0];\n        this._queue.splice(0, 1);\n        return value;\n      }\n    }\n\n使用extends实现继承，因为这样更简单，不会有破坏instanceof运算的危险。\n\n    // bad\n    const inherits = require('inherits');\n    function PeekableQueue(contents) {\n      Queue.apply(this, contents);\n    }\n    inherits(PeekableQueue, Queue);\n    PeekableQueue.prototype.peek = function() {\n      return this._queue[0];\n    }\n    // good\n    class PeekableQueue extends Queue {\n      peek() {\n        return this._queue[0];\n      }\n    }\n\n## 模块\n\nModule语法是JavaScript模块的标准写法，坚持使用这种写法。使用import取代require。\n\n    // bad\n    const moduleA = require('moduleA');\n    const func1 = moduleA.func1;\n    const func2 = moduleA.func2;\n    // good\n    import { func1, func2 } from 'moduleA';\n\n使用export取代module.exports。  \n如果模块只有一个输出值，就使用export default，如果模块有多个输出值，就不使用export default，不要export default与普通的export同时使用。\n\n    // commonJS的写法\n    var React = require('react');\n    var Breadcrumbs = React.createClass({\n      render() {\n        return <nav />;\n      }\n    });\n    module.exports = Breadcrumbs;\n    // ES6的写法\n    import React from 'react';\n    const Breadcrumbs = React.createClass({\n      render() {\n        return <nav />;\n      }\n    });\n    export default Breadcrumbs\n\n如果模块默认输出一个函数，函数名的首字母应该小写。\n\n    function makeStyleGuide() {\n    }\n    export default makeStyleGuide;\n\n如果模块默认输出一个对象，对象名的首字母应该大写。\n\n    const StyleGuide = {\n      es6: {\n      }\n    };\n    export default StyleGuide;\n\n读阮一峰老师《ECMAScript6入门》一书的笔记    \n<br>","source":"_posts/JavaScript/es6-style.md","raw":"title: ES6-Module\n\ndate: 2016-2-2\n\ntags:\n    - es6\n    - note\n\ncategories:\n    - JavaScript\n---\n\n# 规格文件\n\n规格文件是计算机语言的官方标准，详细描述语法规则和实现方法。  \nECMAScript 6的规格，可以在ECMA国际标准组织的官方网站（www.ecma-international.org/ecma-262/6.0/）免费下载和在线阅读。\n\n<!-- more --> \n\n# 编程风格\n\n## 块级作用域\n\nlet取代var  \n全局常量和线程安全\n在let和const之间，建议优先使用const，尤其是在全局环境，不应该设置变量，只应设置常量。这符合函数式编程思想，有利于将来的分布式运算。\n\n    // bad\n    var a = 1, b = 2, c = 3;\n    // good\n    const a = 1;\n    const b = 2;\n    const c = 3;\n\nconst声明常量还有两个好处，一是阅读代码的人立刻会意识到不应该修改这个值，二是防止了无意间修改变量值所导致的错误。  \n所有的函数都应该设置为常量。\n\n## 严格模式\n\nV8引擎只在严格模式之下，支持let。  \n\n## 字符串\n\n静态字符串一律使用单引号或反引号，不使用双引号。动态字符串使用反引号。\n\n    // bad\n    const a = \"foobar\";\n    const b = 'foo' + a + 'bar';\n    // good\n    const a = 'foobar';\n    const b = `foo${a}bar`;\n\n## 解构赋值\n\n使用数组成员对变量赋值时，优先使用解构赋值。\n\n    const arr = [1, 2, 3, 4];\n    // bad\n    const first = arr[0];\n    const second = arr[1];\n    // good\n    const [first, second] = arr;\n\n函数的参数如果是对象的成员，优先使用解构赋值。\n\n    // bad\n    function getFullName(user) {\n      const firstName = user.firstName;\n      const lastName = user.lastName;\n    }\n    // best\n    function getFullName({ firstName, lastName }) {\n    }\n\n如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值。这样便于以后添加返回值，以及更改返回值的顺序。\n\n    // bad\n    function processInput(input) {\n      return [left, right, top, bottom];\n    }\n    // good\n    function processInput(input) {\n      return { left, right, top, bottom };\n    }\n    const { left, right } = processInput(input);\n\n## 数组\n\n使用扩展运算符（...）拷贝数组。\n\n    // bad\n    const len = items.length;\n    const itemsCopy = [];\n    for (let i = 0; i < len; i++) {\n      itemsCopy[i] = items[i];\n    }\n    // good\n    const itemsCopy = [...items];\n\n使用Array.from方法，将类似数组的对象转为数组。\n\n    const foo = document.querySelectorAll('.foo');\n    const nodes = Array.from(foo);\n\n立即执行函数可以写成箭头函数的形式。\n\n    (() => {\n      console.log('Welcome to the Internet.');\n    })();\n\n那些需要使用函数表达式的场合，尽量用箭头函数代替。因为这样更简洁，而且绑定了this。\n\n    // bad\n    [1, 2, 3].map(function (x) {\n      return x * x;\n    });\n    // best\n    [1, 2, 3].map(x => x * x);\n\n简单的、单行的、不会复用的函数，建议采用箭头函数。如果函数体较为复杂，行数较多，还是应该采用传统的函数写法。  \n\n不要在函数体内使用arguments变量，使用rest运算符（...）代替。因为rest运算符显式表明你想要获取参数，而且arguments是一个类似数组的对象，而rest运算符可以提供一个真正的数组。\n\n    // bad\n    function concatenateAll() {\n      const args = Array.prototype.slice.call(arguments);\n      return args.join('');\n    }\n    // good\n    function concatenateAll(...args) {\n      return args.join('');\n    }\n\n使用默认值语法设置函数参数的默认值。\n\n    // bad\n    function handleThings(opts) {\n      opts = opts || {};\n    }\n    // good\n    function handleThings(opts = {}) {\n      // ...\n    }\n\n所有配置项都应该集中在一个对象，放在最后一个参数，布尔值不可以直接作为参数。\n\n    // bad\n    function divide(a, b, option = false ) {\n    }\n    // good\n    function divide(a, b, { option = false } = {}) {\n    }\n\n## Map结构\n\n注意区分Object和Map，只有模拟实体对象时，才使用Object。如果只是需要key: value的数据结构，使用Map结构。因为Map有内建的遍历机制。\n\n    let map = new Map(arr);\n    for (let key of map.keys()) {\n      console.log(key);\n    }\n    for (let value of map.values()) {\n      console.log(value);\n    }\n    for (let item of map.entries()) {\n      console.log(item[0], item[1]);\n    }\n\n## Class\n\n总是用Class，取代需要prototype的操作。因为Class的写法更简洁，更易于理解。\n\n    // bad\n    function Queue(contents = []) {\n      this._queue = [...contents];\n    }\n    Queue.prototype.pop = function() {\n      const value = this._queue[0];\n      this._queue.splice(0, 1);\n      return value;\n    }\n    // good\n    class Queue {\n      constructor(contents = []) {\n        this._queue = [...contents];\n      }\n      pop() {\n        const value = this._queue[0];\n        this._queue.splice(0, 1);\n        return value;\n      }\n    }\n\n使用extends实现继承，因为这样更简单，不会有破坏instanceof运算的危险。\n\n    // bad\n    const inherits = require('inherits');\n    function PeekableQueue(contents) {\n      Queue.apply(this, contents);\n    }\n    inherits(PeekableQueue, Queue);\n    PeekableQueue.prototype.peek = function() {\n      return this._queue[0];\n    }\n    // good\n    class PeekableQueue extends Queue {\n      peek() {\n        return this._queue[0];\n      }\n    }\n\n## 模块\n\nModule语法是JavaScript模块的标准写法，坚持使用这种写法。使用import取代require。\n\n    // bad\n    const moduleA = require('moduleA');\n    const func1 = moduleA.func1;\n    const func2 = moduleA.func2;\n    // good\n    import { func1, func2 } from 'moduleA';\n\n使用export取代module.exports。  \n如果模块只有一个输出值，就使用export default，如果模块有多个输出值，就不使用export default，不要export default与普通的export同时使用。\n\n    // commonJS的写法\n    var React = require('react');\n    var Breadcrumbs = React.createClass({\n      render() {\n        return <nav />;\n      }\n    });\n    module.exports = Breadcrumbs;\n    // ES6的写法\n    import React from 'react';\n    const Breadcrumbs = React.createClass({\n      render() {\n        return <nav />;\n      }\n    });\n    export default Breadcrumbs\n\n如果模块默认输出一个函数，函数名的首字母应该小写。\n\n    function makeStyleGuide() {\n    }\n    export default makeStyleGuide;\n\n如果模块默认输出一个对象，对象名的首字母应该大写。\n\n    const StyleGuide = {\n      es6: {\n      }\n    };\n    export default StyleGuide;\n\n读阮一峰老师《ECMAScript6入门》一书的笔记    \n<br>","slug":"JavaScript/es6-style","published":1,"updated":"2018-04-05T11:32:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfoy712t0011aciehqvz4yvi","content":"<h1 id=\"规格文件\"><a href=\"#规格文件\" class=\"headerlink\" title=\"规格文件\"></a>规格文件</h1><p>规格文件是计算机语言的官方标准，详细描述语法规则和实现方法。<br>ECMAScript 6的规格，可以在ECMA国际标准组织的官方网站（<a href=\"http://www.ecma-international.org/ecma-262/6.0/）免费下载和在线阅读。\" target=\"_blank\" rel=\"noopener\">www.ecma-international.org/ecma-262/6.0/）免费下载和在线阅读。</a></p>\n<a id=\"more\"></a> \n<h1 id=\"编程风格\"><a href=\"#编程风格\" class=\"headerlink\" title=\"编程风格\"></a>编程风格</h1><h2 id=\"块级作用域\"><a href=\"#块级作用域\" class=\"headerlink\" title=\"块级作用域\"></a>块级作用域</h2><p>let取代var<br>全局常量和线程安全<br>在let和const之间，建议优先使用const，尤其是在全局环境，不应该设置变量，只应设置常量。这符合函数式编程思想，有利于将来的分布式运算。</p>\n<pre><code>// bad\nvar a = 1, b = 2, c = 3;\n// good\nconst a = 1;\nconst b = 2;\nconst c = 3;\n</code></pre><p>const声明常量还有两个好处，一是阅读代码的人立刻会意识到不应该修改这个值，二是防止了无意间修改变量值所导致的错误。<br>所有的函数都应该设置为常量。</p>\n<h2 id=\"严格模式\"><a href=\"#严格模式\" class=\"headerlink\" title=\"严格模式\"></a>严格模式</h2><p>V8引擎只在严格模式之下，支持let。  </p>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><p>静态字符串一律使用单引号或反引号，不使用双引号。动态字符串使用反引号。</p>\n<pre><code>// bad\nconst a = &quot;foobar&quot;;\nconst b = &apos;foo&apos; + a + &apos;bar&apos;;\n// good\nconst a = &apos;foobar&apos;;\nconst b = `foo${a}bar`;\n</code></pre><h2 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h2><p>使用数组成员对变量赋值时，优先使用解构赋值。</p>\n<pre><code>const arr = [1, 2, 3, 4];\n// bad\nconst first = arr[0];\nconst second = arr[1];\n// good\nconst [first, second] = arr;\n</code></pre><p>函数的参数如果是对象的成员，优先使用解构赋值。</p>\n<pre><code>// bad\nfunction getFullName(user) {\n  const firstName = user.firstName;\n  const lastName = user.lastName;\n}\n// best\nfunction getFullName({ firstName, lastName }) {\n}\n</code></pre><p>如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值。这样便于以后添加返回值，以及更改返回值的顺序。</p>\n<pre><code>// bad\nfunction processInput(input) {\n  return [left, right, top, bottom];\n}\n// good\nfunction processInput(input) {\n  return { left, right, top, bottom };\n}\nconst { left, right } = processInput(input);\n</code></pre><h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><p>使用扩展运算符（…）拷贝数组。</p>\n<pre><code>// bad\nconst len = items.length;\nconst itemsCopy = [];\nfor (let i = 0; i &lt; len; i++) {\n  itemsCopy[i] = items[i];\n}\n// good\nconst itemsCopy = [...items];\n</code></pre><p>使用Array.from方法，将类似数组的对象转为数组。</p>\n<pre><code>const foo = document.querySelectorAll(&apos;.foo&apos;);\nconst nodes = Array.from(foo);\n</code></pre><p>立即执行函数可以写成箭头函数的形式。</p>\n<pre><code>(() =&gt; {\n  console.log(&apos;Welcome to the Internet.&apos;);\n})();\n</code></pre><p>那些需要使用函数表达式的场合，尽量用箭头函数代替。因为这样更简洁，而且绑定了this。</p>\n<pre><code>// bad\n[1, 2, 3].map(function (x) {\n  return x * x;\n});\n// best\n[1, 2, 3].map(x =&gt; x * x);\n</code></pre><p>简单的、单行的、不会复用的函数，建议采用箭头函数。如果函数体较为复杂，行数较多，还是应该采用传统的函数写法。  </p>\n<p>不要在函数体内使用arguments变量，使用rest运算符（…）代替。因为rest运算符显式表明你想要获取参数，而且arguments是一个类似数组的对象，而rest运算符可以提供一个真正的数组。</p>\n<pre><code>// bad\nfunction concatenateAll() {\n  const args = Array.prototype.slice.call(arguments);\n  return args.join(&apos;&apos;);\n}\n// good\nfunction concatenateAll(...args) {\n  return args.join(&apos;&apos;);\n}\n</code></pre><p>使用默认值语法设置函数参数的默认值。</p>\n<pre><code>// bad\nfunction handleThings(opts) {\n  opts = opts || {};\n}\n// good\nfunction handleThings(opts = {}) {\n  // ...\n}\n</code></pre><p>所有配置项都应该集中在一个对象，放在最后一个参数，布尔值不可以直接作为参数。</p>\n<pre><code>// bad\nfunction divide(a, b, option = false ) {\n}\n// good\nfunction divide(a, b, { option = false } = {}) {\n}\n</code></pre><h2 id=\"Map结构\"><a href=\"#Map结构\" class=\"headerlink\" title=\"Map结构\"></a>Map结构</h2><p>注意区分Object和Map，只有模拟实体对象时，才使用Object。如果只是需要key: value的数据结构，使用Map结构。因为Map有内建的遍历机制。</p>\n<pre><code>let map = new Map(arr);\nfor (let key of map.keys()) {\n  console.log(key);\n}\nfor (let value of map.values()) {\n  console.log(value);\n}\nfor (let item of map.entries()) {\n  console.log(item[0], item[1]);\n}\n</code></pre><h2 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class\"></a>Class</h2><p>总是用Class，取代需要prototype的操作。因为Class的写法更简洁，更易于理解。</p>\n<pre><code>// bad\nfunction Queue(contents = []) {\n  this._queue = [...contents];\n}\nQueue.prototype.pop = function() {\n  const value = this._queue[0];\n  this._queue.splice(0, 1);\n  return value;\n}\n// good\nclass Queue {\n  constructor(contents = []) {\n    this._queue = [...contents];\n  }\n  pop() {\n    const value = this._queue[0];\n    this._queue.splice(0, 1);\n    return value;\n  }\n}\n</code></pre><p>使用extends实现继承，因为这样更简单，不会有破坏instanceof运算的危险。</p>\n<pre><code>// bad\nconst inherits = require(&apos;inherits&apos;);\nfunction PeekableQueue(contents) {\n  Queue.apply(this, contents);\n}\ninherits(PeekableQueue, Queue);\nPeekableQueue.prototype.peek = function() {\n  return this._queue[0];\n}\n// good\nclass PeekableQueue extends Queue {\n  peek() {\n    return this._queue[0];\n  }\n}\n</code></pre><h2 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h2><p>Module语法是JavaScript模块的标准写法，坚持使用这种写法。使用import取代require。</p>\n<pre><code>// bad\nconst moduleA = require(&apos;moduleA&apos;);\nconst func1 = moduleA.func1;\nconst func2 = moduleA.func2;\n// good\nimport { func1, func2 } from &apos;moduleA&apos;;\n</code></pre><p>使用export取代module.exports。<br>如果模块只有一个输出值，就使用export default，如果模块有多个输出值，就不使用export default，不要export default与普通的export同时使用。</p>\n<pre><code>// commonJS的写法\nvar React = require(&apos;react&apos;);\nvar Breadcrumbs = React.createClass({\n  render() {\n    return &lt;nav /&gt;;\n  }\n});\nmodule.exports = Breadcrumbs;\n// ES6的写法\nimport React from &apos;react&apos;;\nconst Breadcrumbs = React.createClass({\n  render() {\n    return &lt;nav /&gt;;\n  }\n});\nexport default Breadcrumbs\n</code></pre><p>如果模块默认输出一个函数，函数名的首字母应该小写。</p>\n<pre><code>function makeStyleGuide() {\n}\nexport default makeStyleGuide;\n</code></pre><p>如果模块默认输出一个对象，对象名的首字母应该大写。</p>\n<pre><code>const StyleGuide = {\n  es6: {\n  }\n};\nexport default StyleGuide;\n</code></pre><p>读阮一峰老师《ECMAScript6入门》一书的笔记<br><br></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"规格文件\"><a href=\"#规格文件\" class=\"headerlink\" title=\"规格文件\"></a>规格文件</h1><p>规格文件是计算机语言的官方标准，详细描述语法规则和实现方法。<br>ECMAScript 6的规格，可以在ECMA国际标准组织的官方网站（<a href=\"http://www.ecma-international.org/ecma-262/6.0/）免费下载和在线阅读。\" target=\"_blank\" rel=\"noopener\">www.ecma-international.org/ecma-262/6.0/）免费下载和在线阅读。</a></p>","more":"<h1 id=\"编程风格\"><a href=\"#编程风格\" class=\"headerlink\" title=\"编程风格\"></a>编程风格</h1><h2 id=\"块级作用域\"><a href=\"#块级作用域\" class=\"headerlink\" title=\"块级作用域\"></a>块级作用域</h2><p>let取代var<br>全局常量和线程安全<br>在let和const之间，建议优先使用const，尤其是在全局环境，不应该设置变量，只应设置常量。这符合函数式编程思想，有利于将来的分布式运算。</p>\n<pre><code>// bad\nvar a = 1, b = 2, c = 3;\n// good\nconst a = 1;\nconst b = 2;\nconst c = 3;\n</code></pre><p>const声明常量还有两个好处，一是阅读代码的人立刻会意识到不应该修改这个值，二是防止了无意间修改变量值所导致的错误。<br>所有的函数都应该设置为常量。</p>\n<h2 id=\"严格模式\"><a href=\"#严格模式\" class=\"headerlink\" title=\"严格模式\"></a>严格模式</h2><p>V8引擎只在严格模式之下，支持let。  </p>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><p>静态字符串一律使用单引号或反引号，不使用双引号。动态字符串使用反引号。</p>\n<pre><code>// bad\nconst a = &quot;foobar&quot;;\nconst b = &apos;foo&apos; + a + &apos;bar&apos;;\n// good\nconst a = &apos;foobar&apos;;\nconst b = `foo${a}bar`;\n</code></pre><h2 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h2><p>使用数组成员对变量赋值时，优先使用解构赋值。</p>\n<pre><code>const arr = [1, 2, 3, 4];\n// bad\nconst first = arr[0];\nconst second = arr[1];\n// good\nconst [first, second] = arr;\n</code></pre><p>函数的参数如果是对象的成员，优先使用解构赋值。</p>\n<pre><code>// bad\nfunction getFullName(user) {\n  const firstName = user.firstName;\n  const lastName = user.lastName;\n}\n// best\nfunction getFullName({ firstName, lastName }) {\n}\n</code></pre><p>如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值。这样便于以后添加返回值，以及更改返回值的顺序。</p>\n<pre><code>// bad\nfunction processInput(input) {\n  return [left, right, top, bottom];\n}\n// good\nfunction processInput(input) {\n  return { left, right, top, bottom };\n}\nconst { left, right } = processInput(input);\n</code></pre><h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><p>使用扩展运算符（…）拷贝数组。</p>\n<pre><code>// bad\nconst len = items.length;\nconst itemsCopy = [];\nfor (let i = 0; i &lt; len; i++) {\n  itemsCopy[i] = items[i];\n}\n// good\nconst itemsCopy = [...items];\n</code></pre><p>使用Array.from方法，将类似数组的对象转为数组。</p>\n<pre><code>const foo = document.querySelectorAll(&apos;.foo&apos;);\nconst nodes = Array.from(foo);\n</code></pre><p>立即执行函数可以写成箭头函数的形式。</p>\n<pre><code>(() =&gt; {\n  console.log(&apos;Welcome to the Internet.&apos;);\n})();\n</code></pre><p>那些需要使用函数表达式的场合，尽量用箭头函数代替。因为这样更简洁，而且绑定了this。</p>\n<pre><code>// bad\n[1, 2, 3].map(function (x) {\n  return x * x;\n});\n// best\n[1, 2, 3].map(x =&gt; x * x);\n</code></pre><p>简单的、单行的、不会复用的函数，建议采用箭头函数。如果函数体较为复杂，行数较多，还是应该采用传统的函数写法。  </p>\n<p>不要在函数体内使用arguments变量，使用rest运算符（…）代替。因为rest运算符显式表明你想要获取参数，而且arguments是一个类似数组的对象，而rest运算符可以提供一个真正的数组。</p>\n<pre><code>// bad\nfunction concatenateAll() {\n  const args = Array.prototype.slice.call(arguments);\n  return args.join(&apos;&apos;);\n}\n// good\nfunction concatenateAll(...args) {\n  return args.join(&apos;&apos;);\n}\n</code></pre><p>使用默认值语法设置函数参数的默认值。</p>\n<pre><code>// bad\nfunction handleThings(opts) {\n  opts = opts || {};\n}\n// good\nfunction handleThings(opts = {}) {\n  // ...\n}\n</code></pre><p>所有配置项都应该集中在一个对象，放在最后一个参数，布尔值不可以直接作为参数。</p>\n<pre><code>// bad\nfunction divide(a, b, option = false ) {\n}\n// good\nfunction divide(a, b, { option = false } = {}) {\n}\n</code></pre><h2 id=\"Map结构\"><a href=\"#Map结构\" class=\"headerlink\" title=\"Map结构\"></a>Map结构</h2><p>注意区分Object和Map，只有模拟实体对象时，才使用Object。如果只是需要key: value的数据结构，使用Map结构。因为Map有内建的遍历机制。</p>\n<pre><code>let map = new Map(arr);\nfor (let key of map.keys()) {\n  console.log(key);\n}\nfor (let value of map.values()) {\n  console.log(value);\n}\nfor (let item of map.entries()) {\n  console.log(item[0], item[1]);\n}\n</code></pre><h2 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class\"></a>Class</h2><p>总是用Class，取代需要prototype的操作。因为Class的写法更简洁，更易于理解。</p>\n<pre><code>// bad\nfunction Queue(contents = []) {\n  this._queue = [...contents];\n}\nQueue.prototype.pop = function() {\n  const value = this._queue[0];\n  this._queue.splice(0, 1);\n  return value;\n}\n// good\nclass Queue {\n  constructor(contents = []) {\n    this._queue = [...contents];\n  }\n  pop() {\n    const value = this._queue[0];\n    this._queue.splice(0, 1);\n    return value;\n  }\n}\n</code></pre><p>使用extends实现继承，因为这样更简单，不会有破坏instanceof运算的危险。</p>\n<pre><code>// bad\nconst inherits = require(&apos;inherits&apos;);\nfunction PeekableQueue(contents) {\n  Queue.apply(this, contents);\n}\ninherits(PeekableQueue, Queue);\nPeekableQueue.prototype.peek = function() {\n  return this._queue[0];\n}\n// good\nclass PeekableQueue extends Queue {\n  peek() {\n    return this._queue[0];\n  }\n}\n</code></pre><h2 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h2><p>Module语法是JavaScript模块的标准写法，坚持使用这种写法。使用import取代require。</p>\n<pre><code>// bad\nconst moduleA = require(&apos;moduleA&apos;);\nconst func1 = moduleA.func1;\nconst func2 = moduleA.func2;\n// good\nimport { func1, func2 } from &apos;moduleA&apos;;\n</code></pre><p>使用export取代module.exports。<br>如果模块只有一个输出值，就使用export default，如果模块有多个输出值，就不使用export default，不要export default与普通的export同时使用。</p>\n<pre><code>// commonJS的写法\nvar React = require(&apos;react&apos;);\nvar Breadcrumbs = React.createClass({\n  render() {\n    return &lt;nav /&gt;;\n  }\n});\nmodule.exports = Breadcrumbs;\n// ES6的写法\nimport React from &apos;react&apos;;\nconst Breadcrumbs = React.createClass({\n  render() {\n    return &lt;nav /&gt;;\n  }\n});\nexport default Breadcrumbs\n</code></pre><p>如果模块默认输出一个函数，函数名的首字母应该小写。</p>\n<pre><code>function makeStyleGuide() {\n}\nexport default makeStyleGuide;\n</code></pre><p>如果模块默认输出一个对象，对象名的首字母应该大写。</p>\n<pre><code>const StyleGuide = {\n  es6: {\n  }\n};\nexport default StyleGuide;\n</code></pre><p>读阮一峰老师《ECMAScript6入门》一书的笔记<br><br></p>"},{"title":"setImmediate,setTimeout,nextTick的区别是什么","date":"2015-07-21T16:00:00.000Z","_content":"## 区别\n\n1、nextTick和setImmediate主要的区别在于任务插入的位置nextTick的插入位置是在当前帧的末尾、io回调之前，如果nextTick过多，会导致io回调不断延后setImmediate的插入位置是在下一帧，不会影响io回调。\n\n2、Nodejs的特点是事件驱动，异步I/O产生的高并发，产生此特点的引擎是事件循环，事件被分门别类地归到对应的事件观察者上，比如idle观察者，定时器观察者，I/O观察者等等，事件循环每次循环称为Tick，每次Tick按照先后顺序从事件观察者中取出事件进行处理。\n调用setTimeout()时创建的计时器会被放入定时器观察者内部的红黑树中，每次Tick时，会从该红黑树中检查定时器是否超过定时时间，超过的话，就立即执行对应的回调函数。由于定时器是超时触发，这会导致触发精确度降低。\n\n<!-- more -->  \n\n## 代码例子\n\n```\nfunction nextTick(msg, cb) {\n  process.nextTick(function() {\n    console.log('tick: ' + msg);\n    if (cb) {\n      cb();\n    }\n  });\n}\n\nfunction immediate(msg, cb) {\n  setImmediate(function() {\n    console.log('immediate : ' + msg);\n    if (cb) {\n      cb();\n    }\n  });\n}\n\nnextTick('1');\nnextTick('2', function() {\n  nextTick('10');\n});\n\nimmediate('3', function() {\n  nextTick('5');\n});\n\nnextTick('7', function() {\n  immediate('9');\n});\n\nimmediate('4', function() {\n  nextTick('8');\n});\n\nvar n = 0;\n\nconst timer = setInterval(function() {\n  n++;\n  console.log('interval:', n);\n  nextTick('tick from interval: ' +  n);\n  nextTick('another tick from interval: ' +  n);\n  immediate('immediate from interval: ' + n);\n  immediate('another immediate from interval: ' + n);\n\n  if ( n === 3 ) {\n    clearInterval(timer);\n  }\n}, 0);\n\nconsole.log('the last line of the program.');\n```\n\n\n## 结果\n\n```\nthe last line of the program.\ntick: 1\ntick: 2\ntick: 7\ntick: 10\ninterval: 1\ntick: tick from interval: 1\ntick: another tick from interval: 1\nimmediate : 3\nimmediate : 4\nimmediate : 9\nimmediate : immediate from interval: 1\nimmediate : another immediate from interval: 1\ntick: 5\ntick: 8\ninterval: 2\ntick: tick from interval: 2\ntick: another tick from interval: 2\nimmediate : immediate from interval: 2\nimmediate : another immediate from interval: 2\ninterval: 3\ntick: tick from interval: 3\ntick: another tick from interval: 3\nimmediate : immediate from interval: 3\nimmediate : another immediate from interval: 3\n```\n## Maximum call stack size exceeded错误的原因\n\n之所以会发生Maximum call stack size exceeded,因为process.maxTickDepth的缺省值是1000，如果递归调用nextTick只能调用1000次，超过1000就会报这个错，但并不是真正栈溢出，只是想给你一个提示不希望你递归调用nextTick太多次，如果nextTick递归调用，那么其他的回调事件就会等待，会造成event loop饥饿，所以官方推荐用setImmediate作为递归调用\n\n## 资料来源\n\n[求科普setImmediate API](https://cnodejs.org/topic/519b523c63e9f8a5429b25e3)  \n[setTimeout，setInterval，process.nextTick，setImmediate in Nodejs](http://www.cnblogs.com/kongxianghai/p/3942226.html)\n\n<br>\n","source":"_posts/JavaScript/nexttick_immediate.md","raw":"title: setImmediate,setTimeout,nextTick的区别是什么\n\ndate: 2015-7-22\n\ntags:\n    - original\n\ncategories:\n    - JavaScript\n---\n## 区别\n\n1、nextTick和setImmediate主要的区别在于任务插入的位置nextTick的插入位置是在当前帧的末尾、io回调之前，如果nextTick过多，会导致io回调不断延后setImmediate的插入位置是在下一帧，不会影响io回调。\n\n2、Nodejs的特点是事件驱动，异步I/O产生的高并发，产生此特点的引擎是事件循环，事件被分门别类地归到对应的事件观察者上，比如idle观察者，定时器观察者，I/O观察者等等，事件循环每次循环称为Tick，每次Tick按照先后顺序从事件观察者中取出事件进行处理。\n调用setTimeout()时创建的计时器会被放入定时器观察者内部的红黑树中，每次Tick时，会从该红黑树中检查定时器是否超过定时时间，超过的话，就立即执行对应的回调函数。由于定时器是超时触发，这会导致触发精确度降低。\n\n<!-- more -->  \n\n## 代码例子\n\n```\nfunction nextTick(msg, cb) {\n  process.nextTick(function() {\n    console.log('tick: ' + msg);\n    if (cb) {\n      cb();\n    }\n  });\n}\n\nfunction immediate(msg, cb) {\n  setImmediate(function() {\n    console.log('immediate : ' + msg);\n    if (cb) {\n      cb();\n    }\n  });\n}\n\nnextTick('1');\nnextTick('2', function() {\n  nextTick('10');\n});\n\nimmediate('3', function() {\n  nextTick('5');\n});\n\nnextTick('7', function() {\n  immediate('9');\n});\n\nimmediate('4', function() {\n  nextTick('8');\n});\n\nvar n = 0;\n\nconst timer = setInterval(function() {\n  n++;\n  console.log('interval:', n);\n  nextTick('tick from interval: ' +  n);\n  nextTick('another tick from interval: ' +  n);\n  immediate('immediate from interval: ' + n);\n  immediate('another immediate from interval: ' + n);\n\n  if ( n === 3 ) {\n    clearInterval(timer);\n  }\n}, 0);\n\nconsole.log('the last line of the program.');\n```\n\n\n## 结果\n\n```\nthe last line of the program.\ntick: 1\ntick: 2\ntick: 7\ntick: 10\ninterval: 1\ntick: tick from interval: 1\ntick: another tick from interval: 1\nimmediate : 3\nimmediate : 4\nimmediate : 9\nimmediate : immediate from interval: 1\nimmediate : another immediate from interval: 1\ntick: 5\ntick: 8\ninterval: 2\ntick: tick from interval: 2\ntick: another tick from interval: 2\nimmediate : immediate from interval: 2\nimmediate : another immediate from interval: 2\ninterval: 3\ntick: tick from interval: 3\ntick: another tick from interval: 3\nimmediate : immediate from interval: 3\nimmediate : another immediate from interval: 3\n```\n## Maximum call stack size exceeded错误的原因\n\n之所以会发生Maximum call stack size exceeded,因为process.maxTickDepth的缺省值是1000，如果递归调用nextTick只能调用1000次，超过1000就会报这个错，但并不是真正栈溢出，只是想给你一个提示不希望你递归调用nextTick太多次，如果nextTick递归调用，那么其他的回调事件就会等待，会造成event loop饥饿，所以官方推荐用setImmediate作为递归调用\n\n## 资料来源\n\n[求科普setImmediate API](https://cnodejs.org/topic/519b523c63e9f8a5429b25e3)  \n[setTimeout，setInterval，process.nextTick，setImmediate in Nodejs](http://www.cnblogs.com/kongxianghai/p/3942226.html)\n\n<br>\n","slug":"JavaScript/nexttick_immediate","published":1,"updated":"2018-04-05T11:32:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfoy712u0013aciekavwllsx","content":"<h2 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2><p>1、nextTick和setImmediate主要的区别在于任务插入的位置nextTick的插入位置是在当前帧的末尾、io回调之前，如果nextTick过多，会导致io回调不断延后setImmediate的插入位置是在下一帧，不会影响io回调。</p>\n<p>2、Nodejs的特点是事件驱动，异步I/O产生的高并发，产生此特点的引擎是事件循环，事件被分门别类地归到对应的事件观察者上，比如idle观察者，定时器观察者，I/O观察者等等，事件循环每次循环称为Tick，每次Tick按照先后顺序从事件观察者中取出事件进行处理。<br>调用setTimeout()时创建的计时器会被放入定时器观察者内部的红黑树中，每次Tick时，会从该红黑树中检查定时器是否超过定时时间，超过的话，就立即执行对应的回调函数。由于定时器是超时触发，这会导致触发精确度降低。</p>\n<a id=\"more\"></a>  \n<h2 id=\"代码例子\"><a href=\"#代码例子\" class=\"headerlink\" title=\"代码例子\"></a>代码例子</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function nextTick(msg, cb) &#123;</span><br><span class=\"line\">  process.nextTick(function() &#123;</span><br><span class=\"line\">    console.log(&apos;tick: &apos; + msg);</span><br><span class=\"line\">    if (cb) &#123;</span><br><span class=\"line\">      cb();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function immediate(msg, cb) &#123;</span><br><span class=\"line\">  setImmediate(function() &#123;</span><br><span class=\"line\">    console.log(&apos;immediate : &apos; + msg);</span><br><span class=\"line\">    if (cb) &#123;</span><br><span class=\"line\">      cb();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">nextTick(&apos;1&apos;);</span><br><span class=\"line\">nextTick(&apos;2&apos;, function() &#123;</span><br><span class=\"line\">  nextTick(&apos;10&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">immediate(&apos;3&apos;, function() &#123;</span><br><span class=\"line\">  nextTick(&apos;5&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">nextTick(&apos;7&apos;, function() &#123;</span><br><span class=\"line\">  immediate(&apos;9&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">immediate(&apos;4&apos;, function() &#123;</span><br><span class=\"line\">  nextTick(&apos;8&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var n = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">const timer = setInterval(function() &#123;</span><br><span class=\"line\">  n++;</span><br><span class=\"line\">  console.log(&apos;interval:&apos;, n);</span><br><span class=\"line\">  nextTick(&apos;tick from interval: &apos; +  n);</span><br><span class=\"line\">  nextTick(&apos;another tick from interval: &apos; +  n);</span><br><span class=\"line\">  immediate(&apos;immediate from interval: &apos; + n);</span><br><span class=\"line\">  immediate(&apos;another immediate from interval: &apos; + n);</span><br><span class=\"line\"></span><br><span class=\"line\">  if ( n === 3 ) &#123;</span><br><span class=\"line\">    clearInterval(timer);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;, 0);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&apos;the last line of the program.&apos;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">the last line of the program.</span><br><span class=\"line\">tick: 1</span><br><span class=\"line\">tick: 2</span><br><span class=\"line\">tick: 7</span><br><span class=\"line\">tick: 10</span><br><span class=\"line\">interval: 1</span><br><span class=\"line\">tick: tick from interval: 1</span><br><span class=\"line\">tick: another tick from interval: 1</span><br><span class=\"line\">immediate : 3</span><br><span class=\"line\">immediate : 4</span><br><span class=\"line\">immediate : 9</span><br><span class=\"line\">immediate : immediate from interval: 1</span><br><span class=\"line\">immediate : another immediate from interval: 1</span><br><span class=\"line\">tick: 5</span><br><span class=\"line\">tick: 8</span><br><span class=\"line\">interval: 2</span><br><span class=\"line\">tick: tick from interval: 2</span><br><span class=\"line\">tick: another tick from interval: 2</span><br><span class=\"line\">immediate : immediate from interval: 2</span><br><span class=\"line\">immediate : another immediate from interval: 2</span><br><span class=\"line\">interval: 3</span><br><span class=\"line\">tick: tick from interval: 3</span><br><span class=\"line\">tick: another tick from interval: 3</span><br><span class=\"line\">immediate : immediate from interval: 3</span><br><span class=\"line\">immediate : another immediate from interval: 3</span><br></pre></td></tr></table></figure>\n<h2 id=\"Maximum-call-stack-size-exceeded错误的原因\"><a href=\"#Maximum-call-stack-size-exceeded错误的原因\" class=\"headerlink\" title=\"Maximum call stack size exceeded错误的原因\"></a>Maximum call stack size exceeded错误的原因</h2><p>之所以会发生Maximum call stack size exceeded,因为process.maxTickDepth的缺省值是1000，如果递归调用nextTick只能调用1000次，超过1000就会报这个错，但并不是真正栈溢出，只是想给你一个提示不希望你递归调用nextTick太多次，如果nextTick递归调用，那么其他的回调事件就会等待，会造成event loop饥饿，所以官方推荐用setImmediate作为递归调用</p>\n<h2 id=\"资料来源\"><a href=\"#资料来源\" class=\"headerlink\" title=\"资料来源\"></a>资料来源</h2><p><a href=\"https://cnodejs.org/topic/519b523c63e9f8a5429b25e3\" target=\"_blank\" rel=\"noopener\">求科普setImmediate API</a><br><a href=\"http://www.cnblogs.com/kongxianghai/p/3942226.html\" target=\"_blank\" rel=\"noopener\">setTimeout，setInterval，process.nextTick，setImmediate in Nodejs</a></p>\n<p><br></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2><p>1、nextTick和setImmediate主要的区别在于任务插入的位置nextTick的插入位置是在当前帧的末尾、io回调之前，如果nextTick过多，会导致io回调不断延后setImmediate的插入位置是在下一帧，不会影响io回调。</p>\n<p>2、Nodejs的特点是事件驱动，异步I/O产生的高并发，产生此特点的引擎是事件循环，事件被分门别类地归到对应的事件观察者上，比如idle观察者，定时器观察者，I/O观察者等等，事件循环每次循环称为Tick，每次Tick按照先后顺序从事件观察者中取出事件进行处理。<br>调用setTimeout()时创建的计时器会被放入定时器观察者内部的红黑树中，每次Tick时，会从该红黑树中检查定时器是否超过定时时间，超过的话，就立即执行对应的回调函数。由于定时器是超时触发，这会导致触发精确度降低。</p>","more":"<h2 id=\"代码例子\"><a href=\"#代码例子\" class=\"headerlink\" title=\"代码例子\"></a>代码例子</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function nextTick(msg, cb) &#123;</span><br><span class=\"line\">  process.nextTick(function() &#123;</span><br><span class=\"line\">    console.log(&apos;tick: &apos; + msg);</span><br><span class=\"line\">    if (cb) &#123;</span><br><span class=\"line\">      cb();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function immediate(msg, cb) &#123;</span><br><span class=\"line\">  setImmediate(function() &#123;</span><br><span class=\"line\">    console.log(&apos;immediate : &apos; + msg);</span><br><span class=\"line\">    if (cb) &#123;</span><br><span class=\"line\">      cb();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">nextTick(&apos;1&apos;);</span><br><span class=\"line\">nextTick(&apos;2&apos;, function() &#123;</span><br><span class=\"line\">  nextTick(&apos;10&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">immediate(&apos;3&apos;, function() &#123;</span><br><span class=\"line\">  nextTick(&apos;5&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">nextTick(&apos;7&apos;, function() &#123;</span><br><span class=\"line\">  immediate(&apos;9&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">immediate(&apos;4&apos;, function() &#123;</span><br><span class=\"line\">  nextTick(&apos;8&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var n = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">const timer = setInterval(function() &#123;</span><br><span class=\"line\">  n++;</span><br><span class=\"line\">  console.log(&apos;interval:&apos;, n);</span><br><span class=\"line\">  nextTick(&apos;tick from interval: &apos; +  n);</span><br><span class=\"line\">  nextTick(&apos;another tick from interval: &apos; +  n);</span><br><span class=\"line\">  immediate(&apos;immediate from interval: &apos; + n);</span><br><span class=\"line\">  immediate(&apos;another immediate from interval: &apos; + n);</span><br><span class=\"line\"></span><br><span class=\"line\">  if ( n === 3 ) &#123;</span><br><span class=\"line\">    clearInterval(timer);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;, 0);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&apos;the last line of the program.&apos;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">the last line of the program.</span><br><span class=\"line\">tick: 1</span><br><span class=\"line\">tick: 2</span><br><span class=\"line\">tick: 7</span><br><span class=\"line\">tick: 10</span><br><span class=\"line\">interval: 1</span><br><span class=\"line\">tick: tick from interval: 1</span><br><span class=\"line\">tick: another tick from interval: 1</span><br><span class=\"line\">immediate : 3</span><br><span class=\"line\">immediate : 4</span><br><span class=\"line\">immediate : 9</span><br><span class=\"line\">immediate : immediate from interval: 1</span><br><span class=\"line\">immediate : another immediate from interval: 1</span><br><span class=\"line\">tick: 5</span><br><span class=\"line\">tick: 8</span><br><span class=\"line\">interval: 2</span><br><span class=\"line\">tick: tick from interval: 2</span><br><span class=\"line\">tick: another tick from interval: 2</span><br><span class=\"line\">immediate : immediate from interval: 2</span><br><span class=\"line\">immediate : another immediate from interval: 2</span><br><span class=\"line\">interval: 3</span><br><span class=\"line\">tick: tick from interval: 3</span><br><span class=\"line\">tick: another tick from interval: 3</span><br><span class=\"line\">immediate : immediate from interval: 3</span><br><span class=\"line\">immediate : another immediate from interval: 3</span><br></pre></td></tr></table></figure>\n<h2 id=\"Maximum-call-stack-size-exceeded错误的原因\"><a href=\"#Maximum-call-stack-size-exceeded错误的原因\" class=\"headerlink\" title=\"Maximum call stack size exceeded错误的原因\"></a>Maximum call stack size exceeded错误的原因</h2><p>之所以会发生Maximum call stack size exceeded,因为process.maxTickDepth的缺省值是1000，如果递归调用nextTick只能调用1000次，超过1000就会报这个错，但并不是真正栈溢出，只是想给你一个提示不希望你递归调用nextTick太多次，如果nextTick递归调用，那么其他的回调事件就会等待，会造成event loop饥饿，所以官方推荐用setImmediate作为递归调用</p>\n<h2 id=\"资料来源\"><a href=\"#资料来源\" class=\"headerlink\" title=\"资料来源\"></a>资料来源</h2><p><a href=\"https://cnodejs.org/topic/519b523c63e9f8a5429b25e3\" target=\"_blank\" rel=\"noopener\">求科普setImmediate API</a><br><a href=\"http://www.cnblogs.com/kongxianghai/p/3942226.html\" target=\"_blank\" rel=\"noopener\">setTimeout，setInterval，process.nextTick，setImmediate in Nodejs</a></p>\n<p><br></p>"},{"title":"尾调用优化","date":"2016-12-15T16:00:00.000Z","_content":"\n# 什么是尾调用\n\n* 尾调用（Tail Call）是函数式编程的一个重要概念，就是指某个函数的最后一步是调用另一个函数。\n\n<!-- more -->\n\n``` js\n// 尾调用\nfunction f(x){\n  return g(x);\n}\n// 不属于尾调用， 调用函数g之后，还有赋值操作\nfunction f(x){\n  let y = g(x);\n  return y;\n}\n\n// 不属于尾调用， 调用后还有操作，即使写在一行内\nfunction f(x){\n  return g(x) + 1;\n}\n\n// 不属于尾调用，下面的两个函数等同\nfunction f(x){\n  g(x);\n}\nfunction f(x){\n  g(x);\n  return undefined;\n}\n\n// 尾调用, 虽然尾调用没出现在函数尾部，但是只要是最后一步操作即可\nfunction f(x) {\n  if (x > 0) {\n    return m(x)\n  }\n  return n(x);\n}\n```\n\n# 尾调用优化 \n\n* 函数调用会在内存形成一个“调用记录”，又称“调用帧”（call frame），保存调用位置和内部变量等信息。如果在函数A的内部调用函数B，那么在A的调用帧上方，还会形成一个B的调用帧。等到B运行结束，将结果返回到A，B的调用帧才会消失。如果函数B内部还调用函数C，那就还有一个C的调用帧，以此类推。所有的调用帧，就形成一个“调用栈”（call stack）。\n* 尾调用由于是函数的最后一步操作，所以不需要保留外层函数的调用帧，因为调用位置、内部变量等信息都不会再用到了，只要直接用内层函数的调用帧，取代外层函数的调用帧就可以了。\n* 只有不再用到外层函数的内部变量，内层函数的调用帧才会取代外层函数的调用帧，否则就无法进行“尾调用优化”。\n\n``` js\n// 不会进行尾调用优化，因为内层函数inner用到了外层函数addOne的内部变量one。\nfunction addOne(a){\n  var one = 1;\n  function inner(b){\n    return b + one;\n  }\n  return inner(a);\n}\n```\n\n# 尾递归 \n\n* 函数调用自身，称为递归。如果尾调用自身，就称为尾递归。\n* 递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生“栈溢出”错误（stack overflow）。但对于尾递归来说，由于只存在一个调用帧，所以永远不会发生“栈溢出”错误。\n\n``` js\n// 正常递归，复杂度 O(n)\nfunction factorial(n) {\n  if (n === 1) return 1;\n  return n * factorial(n - 1);\n}\n\n// 尾递归，复杂度 O(1)\nfunction factorial(n, total = 1) {\n  if (n === 1) return total;\n  return factorial(n - 1, n * total);\n}\n```\n\n来源： http://es6.ruanyifeng.com/#docs/function#尾调用优化\n\n<br>","source":"_posts/JavaScript/尾调用优化.md","raw":"title: 尾调用优化\ndate: 2016-12-16\ntags:\n    - es6\n    - note\ncategories:\n    - JavaScript\n---\n\n# 什么是尾调用\n\n* 尾调用（Tail Call）是函数式编程的一个重要概念，就是指某个函数的最后一步是调用另一个函数。\n\n<!-- more -->\n\n``` js\n// 尾调用\nfunction f(x){\n  return g(x);\n}\n// 不属于尾调用， 调用函数g之后，还有赋值操作\nfunction f(x){\n  let y = g(x);\n  return y;\n}\n\n// 不属于尾调用， 调用后还有操作，即使写在一行内\nfunction f(x){\n  return g(x) + 1;\n}\n\n// 不属于尾调用，下面的两个函数等同\nfunction f(x){\n  g(x);\n}\nfunction f(x){\n  g(x);\n  return undefined;\n}\n\n// 尾调用, 虽然尾调用没出现在函数尾部，但是只要是最后一步操作即可\nfunction f(x) {\n  if (x > 0) {\n    return m(x)\n  }\n  return n(x);\n}\n```\n\n# 尾调用优化 \n\n* 函数调用会在内存形成一个“调用记录”，又称“调用帧”（call frame），保存调用位置和内部变量等信息。如果在函数A的内部调用函数B，那么在A的调用帧上方，还会形成一个B的调用帧。等到B运行结束，将结果返回到A，B的调用帧才会消失。如果函数B内部还调用函数C，那就还有一个C的调用帧，以此类推。所有的调用帧，就形成一个“调用栈”（call stack）。\n* 尾调用由于是函数的最后一步操作，所以不需要保留外层函数的调用帧，因为调用位置、内部变量等信息都不会再用到了，只要直接用内层函数的调用帧，取代外层函数的调用帧就可以了。\n* 只有不再用到外层函数的内部变量，内层函数的调用帧才会取代外层函数的调用帧，否则就无法进行“尾调用优化”。\n\n``` js\n// 不会进行尾调用优化，因为内层函数inner用到了外层函数addOne的内部变量one。\nfunction addOne(a){\n  var one = 1;\n  function inner(b){\n    return b + one;\n  }\n  return inner(a);\n}\n```\n\n# 尾递归 \n\n* 函数调用自身，称为递归。如果尾调用自身，就称为尾递归。\n* 递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生“栈溢出”错误（stack overflow）。但对于尾递归来说，由于只存在一个调用帧，所以永远不会发生“栈溢出”错误。\n\n``` js\n// 正常递归，复杂度 O(n)\nfunction factorial(n) {\n  if (n === 1) return 1;\n  return n * factorial(n - 1);\n}\n\n// 尾递归，复杂度 O(1)\nfunction factorial(n, total = 1) {\n  if (n === 1) return total;\n  return factorial(n - 1, n * total);\n}\n```\n\n来源： http://es6.ruanyifeng.com/#docs/function#尾调用优化\n\n<br>","slug":"JavaScript/尾调用优化","published":1,"updated":"2018-04-05T11:32:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfoy712w0018acieqj7qndxl","content":"<h1 id=\"什么是尾调用\"><a href=\"#什么是尾调用\" class=\"headerlink\" title=\"什么是尾调用\"></a>什么是尾调用</h1><ul>\n<li>尾调用（Tail Call）是函数式编程的一个重要概念，就是指某个函数的最后一步是调用另一个函数。</li>\n</ul>\n<a id=\"more\"></a>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 尾调用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> g(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 不属于尾调用， 调用函数g之后，还有赋值操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> y = g(x);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不属于尾调用， 调用后还有操作，即使写在一行内</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> g(x) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不属于尾调用，下面的两个函数等同</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">  g(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">  g(x);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 尾调用, 虽然尾调用没出现在函数尾部，但是只要是最后一步操作即可</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m(x)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> n(x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"尾调用优化\"><a href=\"#尾调用优化\" class=\"headerlink\" title=\"尾调用优化\"></a>尾调用优化</h1><ul>\n<li>函数调用会在内存形成一个“调用记录”，又称“调用帧”（call frame），保存调用位置和内部变量等信息。如果在函数A的内部调用函数B，那么在A的调用帧上方，还会形成一个B的调用帧。等到B运行结束，将结果返回到A，B的调用帧才会消失。如果函数B内部还调用函数C，那就还有一个C的调用帧，以此类推。所有的调用帧，就形成一个“调用栈”（call stack）。</li>\n<li>尾调用由于是函数的最后一步操作，所以不需要保留外层函数的调用帧，因为调用位置、内部变量等信息都不会再用到了，只要直接用内层函数的调用帧，取代外层函数的调用帧就可以了。</li>\n<li>只有不再用到外层函数的内部变量，内层函数的调用帧才会取代外层函数的调用帧，否则就无法进行“尾调用优化”。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不会进行尾调用优化，因为内层函数inner用到了外层函数addOne的内部变量one。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addOne</span>(<span class=\"params\">a</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> one = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inner</span>(<span class=\"params\">b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b + one;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> inner(a);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"尾递归\"><a href=\"#尾递归\" class=\"headerlink\" title=\"尾递归\"></a>尾递归</h1><ul>\n<li>函数调用自身，称为递归。如果尾调用自身，就称为尾递归。</li>\n<li>递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生“栈溢出”错误（stack overflow）。但对于尾递归来说，由于只存在一个调用帧，所以永远不会发生“栈溢出”错误。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正常递归，复杂度 O(n)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> n * factorial(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 尾递归，复杂度 O(1)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">n, total = <span class=\"number\">1</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> total;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> factorial(n - <span class=\"number\">1</span>, n * total);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>来源： <a href=\"http://es6.ruanyifeng.com/#docs/function#尾调用优化\" target=\"_blank\" rel=\"noopener\">http://es6.ruanyifeng.com/#docs/function#尾调用优化</a></p>\n<p><br></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"什么是尾调用\"><a href=\"#什么是尾调用\" class=\"headerlink\" title=\"什么是尾调用\"></a>什么是尾调用</h1><ul>\n<li>尾调用（Tail Call）是函数式编程的一个重要概念，就是指某个函数的最后一步是调用另一个函数。</li>\n</ul>","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 尾调用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> g(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 不属于尾调用， 调用函数g之后，还有赋值操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> y = g(x);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不属于尾调用， 调用后还有操作，即使写在一行内</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> g(x) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不属于尾调用，下面的两个函数等同</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">  g(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">  g(x);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 尾调用, 虽然尾调用没出现在函数尾部，但是只要是最后一步操作即可</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m(x)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> n(x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"尾调用优化\"><a href=\"#尾调用优化\" class=\"headerlink\" title=\"尾调用优化\"></a>尾调用优化</h1><ul>\n<li>函数调用会在内存形成一个“调用记录”，又称“调用帧”（call frame），保存调用位置和内部变量等信息。如果在函数A的内部调用函数B，那么在A的调用帧上方，还会形成一个B的调用帧。等到B运行结束，将结果返回到A，B的调用帧才会消失。如果函数B内部还调用函数C，那就还有一个C的调用帧，以此类推。所有的调用帧，就形成一个“调用栈”（call stack）。</li>\n<li>尾调用由于是函数的最后一步操作，所以不需要保留外层函数的调用帧，因为调用位置、内部变量等信息都不会再用到了，只要直接用内层函数的调用帧，取代外层函数的调用帧就可以了。</li>\n<li>只有不再用到外层函数的内部变量，内层函数的调用帧才会取代外层函数的调用帧，否则就无法进行“尾调用优化”。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不会进行尾调用优化，因为内层函数inner用到了外层函数addOne的内部变量one。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addOne</span>(<span class=\"params\">a</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> one = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inner</span>(<span class=\"params\">b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b + one;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> inner(a);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"尾递归\"><a href=\"#尾递归\" class=\"headerlink\" title=\"尾递归\"></a>尾递归</h1><ul>\n<li>函数调用自身，称为递归。如果尾调用自身，就称为尾递归。</li>\n<li>递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生“栈溢出”错误（stack overflow）。但对于尾递归来说，由于只存在一个调用帧，所以永远不会发生“栈溢出”错误。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正常递归，复杂度 O(n)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> n * factorial(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 尾递归，复杂度 O(1)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">n, total = <span class=\"number\">1</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> total;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> factorial(n - <span class=\"number\">1</span>, n * total);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>来源： <a href=\"http://es6.ruanyifeng.com/#docs/function#尾调用优化\" target=\"_blank\" rel=\"noopener\">http://es6.ruanyifeng.com/#docs/function#尾调用优化</a></p>\n<p><br></p>"},{"title":"We have a problem with promises","date":"2016-02-22T16:00:00.000Z","_content":"\n## 下面的四种 promises 的区别是什么\n\n``` js  \ndoSomething().then(function () {  \n    return doSomethingElse();  \n});  \n  \ndoSomething().then(function () {  \n    doSomethingElse();  \n});  \n  \ndoSomething().then(doSomethingElse());  \n\ndoSomething().then(doSomethingElse);\n```\n\n<!-- more -->\n\n### 原文地址链接：http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/\n\nPuzzle #1\n\n``` js\ndoSomething\n|-----------------|\n                  doSomethingElse(undefined)\n                  |------------------|\n                                     finalHandler(resultOfDoSomethingElse)\n                                     |------------------|\n```\n\nPuzzle #2\n\n``` js\ndoSomething\n|-----------------|\n                  doSomethingElse(undefined)\n                  |------------------|\n                  finalHandler(undefined)\n                  |------------------|\n```\n\nPuzzle #3\n\n``` js\ndoSomething\n|-----------------|\ndoSomethingElse(undefined)\n|---------------------------------|\n                  finalHandler(resultOfDoSomething)\n                  |------------------|\n```\n\nPuzzle #4\n\n``` js\ndoSomething\n|-----------------|\n                  doSomethingElse(resultOfDoSomething)\n                  |------------------|\n                                     finalHandler(resultOfDoSomethingElse)\n                                     |------------------|\n```\n\nPromises 解决了 Callback Hell 问题，并且不仅仅是缩进问题。就像在 《Callback Hell 的救赎》 中描述的一样，回调函数真正的问题在于他剥夺了我们使用 return 和 throw 这些关键字的能力。\n\n## Promises的正确的风格\n\n``` js\nremotedb.allDocs(...).then(function (resultOfAllDocs) {\n  return localdb.put(...);\n}).then(function (resultOfPut) {\n  return localdb.get(...);\n}).then(function (resultOfGet) {\n  return localdb.put(...);\n}).catch(function (err) {\n  console.log(err);\n}); \n```\n\n这种写法被称为 composing promises ，是 promises 的强大能力之一。每一个函数只会在前一个 promise 被调用并且完成回调后调用，并且这个函数会被前一个 promise 的输出调用\n\n## 用了 promises 后怎么用 forEach?\n\n``` js\n// 错误写法\n// I want to remove() all docs\ndb.allDocs({include_docs: true}).then(function (result) {\n  result.rows.forEach(function (row) {\n    db.remove(row.doc);  \n  });\n}).then(function () {\n  // I naively believe all docs have been removed() now!\n});\n// 正确写法\ndb.allDocs({include_docs: true}).then(function (result) {\n  return Promise.all(result.rows.map(function (row) {\n    return db.remove(row.doc);\n  }));\n}).then(function (arrayOfResults) {\n  // All docs have really been removed() now!\n});\n```\n\n一定不要忘记使用 .catch()\n\n## catch() 与 then(null, ...) 并非完全等价\n\ncatch() 仅仅是一个语法糖。因此下面两段代码是等价的:\n\n``` js\nsomePromise().catch(function (err) {\n  // handle error\n});\nsomePromise().then(null, function (err) {\n  // handle error\n});\n```\n\n但是并非完全等价\n\n``` js\nsomePromise().then(function () {\n  throw new Error('oh noes');\n}).catch(function (err) {\n  // I caught your error! :)\n});\n\nsomePromise().then(function () {\n  throw new Error('oh noes');\n}, function (err) {\n  // I didn't catch your error! :(\n});\n```\n\n\n<br>","source":"_posts/JavaScript/promises.md","raw":"title: We have a problem with promises  \ndate: 2016-2-23  \ntags:\n    - note\ncategories:\n    - JavaScript\n---\n\n## 下面的四种 promises 的区别是什么\n\n``` js  \ndoSomething().then(function () {  \n    return doSomethingElse();  \n});  \n  \ndoSomething().then(function () {  \n    doSomethingElse();  \n});  \n  \ndoSomething().then(doSomethingElse());  \n\ndoSomething().then(doSomethingElse);\n```\n\n<!-- more -->\n\n### 原文地址链接：http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/\n\nPuzzle #1\n\n``` js\ndoSomething\n|-----------------|\n                  doSomethingElse(undefined)\n                  |------------------|\n                                     finalHandler(resultOfDoSomethingElse)\n                                     |------------------|\n```\n\nPuzzle #2\n\n``` js\ndoSomething\n|-----------------|\n                  doSomethingElse(undefined)\n                  |------------------|\n                  finalHandler(undefined)\n                  |------------------|\n```\n\nPuzzle #3\n\n``` js\ndoSomething\n|-----------------|\ndoSomethingElse(undefined)\n|---------------------------------|\n                  finalHandler(resultOfDoSomething)\n                  |------------------|\n```\n\nPuzzle #4\n\n``` js\ndoSomething\n|-----------------|\n                  doSomethingElse(resultOfDoSomething)\n                  |------------------|\n                                     finalHandler(resultOfDoSomethingElse)\n                                     |------------------|\n```\n\nPromises 解决了 Callback Hell 问题，并且不仅仅是缩进问题。就像在 《Callback Hell 的救赎》 中描述的一样，回调函数真正的问题在于他剥夺了我们使用 return 和 throw 这些关键字的能力。\n\n## Promises的正确的风格\n\n``` js\nremotedb.allDocs(...).then(function (resultOfAllDocs) {\n  return localdb.put(...);\n}).then(function (resultOfPut) {\n  return localdb.get(...);\n}).then(function (resultOfGet) {\n  return localdb.put(...);\n}).catch(function (err) {\n  console.log(err);\n}); \n```\n\n这种写法被称为 composing promises ，是 promises 的强大能力之一。每一个函数只会在前一个 promise 被调用并且完成回调后调用，并且这个函数会被前一个 promise 的输出调用\n\n## 用了 promises 后怎么用 forEach?\n\n``` js\n// 错误写法\n// I want to remove() all docs\ndb.allDocs({include_docs: true}).then(function (result) {\n  result.rows.forEach(function (row) {\n    db.remove(row.doc);  \n  });\n}).then(function () {\n  // I naively believe all docs have been removed() now!\n});\n// 正确写法\ndb.allDocs({include_docs: true}).then(function (result) {\n  return Promise.all(result.rows.map(function (row) {\n    return db.remove(row.doc);\n  }));\n}).then(function (arrayOfResults) {\n  // All docs have really been removed() now!\n});\n```\n\n一定不要忘记使用 .catch()\n\n## catch() 与 then(null, ...) 并非完全等价\n\ncatch() 仅仅是一个语法糖。因此下面两段代码是等价的:\n\n``` js\nsomePromise().catch(function (err) {\n  // handle error\n});\nsomePromise().then(null, function (err) {\n  // handle error\n});\n```\n\n但是并非完全等价\n\n``` js\nsomePromise().then(function () {\n  throw new Error('oh noes');\n}).catch(function (err) {\n  // I caught your error! :)\n});\n\nsomePromise().then(function () {\n  throw new Error('oh noes');\n}, function (err) {\n  // I didn't catch your error! :(\n});\n```\n\n\n<br>","slug":"JavaScript/promises","published":1,"updated":"2018-04-05T11:32:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfoy712y001aaciewz0yq1eb","content":"<h2 id=\"下面的四种-promises-的区别是什么\"><a href=\"#下面的四种-promises-的区别是什么\" class=\"headerlink\" title=\"下面的四种 promises 的区别是什么\"></a>下面的四种 promises 的区别是什么</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doSomething().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> doSomethingElse();  </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\">  </span><br><span class=\"line\">doSomething().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">    doSomethingElse();  </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\">  </span><br><span class=\"line\">doSomething().then(doSomethingElse());  </span><br><span class=\"line\"></span><br><span class=\"line\">doSomething().then(doSomethingElse);</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"原文地址链接：http-fex-baidu-com-blog-2015-07-we-have-a-problem-with-promises\"><a href=\"#原文地址链接：http-fex-baidu-com-blog-2015-07-we-have-a-problem-with-promises\" class=\"headerlink\" title=\"原文地址链接：http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/\"></a>原文地址链接：<a href=\"http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/\" target=\"_blank\" rel=\"noopener\">http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/</a></h3><p>Puzzle #1</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doSomething</span><br><span class=\"line\">|-----------------|</span><br><span class=\"line\">                  doSomethingElse(<span class=\"literal\">undefined</span>)</span><br><span class=\"line\">                  |------------------|</span><br><span class=\"line\">                                     finalHandler(resultOfDoSomethingElse)</span><br><span class=\"line\">                                     |------------------|</span><br></pre></td></tr></table></figure>\n<p>Puzzle #2</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doSomething</span><br><span class=\"line\">|-----------------|</span><br><span class=\"line\">                  doSomethingElse(<span class=\"literal\">undefined</span>)</span><br><span class=\"line\">                  |------------------|</span><br><span class=\"line\">                  finalHandler(<span class=\"literal\">undefined</span>)</span><br><span class=\"line\">                  |------------------|</span><br></pre></td></tr></table></figure>\n<p>Puzzle #3</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doSomething</span><br><span class=\"line\">|-----------------|</span><br><span class=\"line\">doSomethingElse(<span class=\"literal\">undefined</span>)</span><br><span class=\"line\">|---------------------------------|</span><br><span class=\"line\">                  finalHandler(resultOfDoSomething)</span><br><span class=\"line\">                  |------------------|</span><br></pre></td></tr></table></figure>\n<p>Puzzle #4</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doSomething</span><br><span class=\"line\">|-----------------|</span><br><span class=\"line\">                  doSomethingElse(resultOfDoSomething)</span><br><span class=\"line\">                  |------------------|</span><br><span class=\"line\">                                     finalHandler(resultOfDoSomethingElse)</span><br><span class=\"line\">                                     |------------------|</span><br></pre></td></tr></table></figure>\n<p>Promises 解决了 Callback Hell 问题，并且不仅仅是缩进问题。就像在 《Callback Hell 的救赎》 中描述的一样，回调函数真正的问题在于他剥夺了我们使用 return 和 throw 这些关键字的能力。</p>\n<h2 id=\"Promises的正确的风格\"><a href=\"#Promises的正确的风格\" class=\"headerlink\" title=\"Promises的正确的风格\"></a>Promises的正确的风格</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">remotedb.allDocs(...).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resultOfAllDocs</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> localdb.put(...);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resultOfPut</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> localdb.get(...);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resultOfGet</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> localdb.put(...);</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这种写法被称为 composing promises ，是 promises 的强大能力之一。每一个函数只会在前一个 promise 被调用并且完成回调后调用，并且这个函数会被前一个 promise 的输出调用</p>\n<h2 id=\"用了-promises-后怎么用-forEach\"><a href=\"#用了-promises-后怎么用-forEach\" class=\"headerlink\" title=\"用了 promises 后怎么用 forEach?\"></a>用了 promises 后怎么用 forEach?</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 错误写法</span></span><br><span class=\"line\"><span class=\"comment\">// I want to remove() all docs</span></span><br><span class=\"line\">db.allDocs(&#123;<span class=\"attr\">include_docs</span>: <span class=\"literal\">true</span>&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">  result.rows.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">row</span>) </span>&#123;</span><br><span class=\"line\">    db.remove(row.doc);  </span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// I naively believe all docs have been removed() now!</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 正确写法</span></span><br><span class=\"line\">db.allDocs(&#123;<span class=\"attr\">include_docs</span>: <span class=\"literal\">true</span>&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.all(result.rows.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">row</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> db.remove(row.doc);</span><br><span class=\"line\">  &#125;));</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arrayOfResults</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// All docs have really been removed() now!</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>一定不要忘记使用 .catch()</p>\n<h2 id=\"catch-与-then-null-…-并非完全等价\"><a href=\"#catch-与-then-null-…-并非完全等价\" class=\"headerlink\" title=\"catch() 与 then(null, …) 并非完全等价\"></a>catch() 与 then(null, …) 并非完全等价</h2><p>catch() 仅仅是一个语法糖。因此下面两段代码是等价的:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">somePromise().catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// handle error</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">somePromise().then(<span class=\"literal\">null</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// handle error</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>但是并非完全等价</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">somePromise().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'oh noes'</span>);</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// I caught your error! :)</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">somePromise().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'oh noes'</span>);</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// I didn't catch your error! :(</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><br></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"下面的四种-promises-的区别是什么\"><a href=\"#下面的四种-promises-的区别是什么\" class=\"headerlink\" title=\"下面的四种 promises 的区别是什么\"></a>下面的四种 promises 的区别是什么</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doSomething().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> doSomethingElse();  </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\">  </span><br><span class=\"line\">doSomething().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">    doSomethingElse();  </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\">  </span><br><span class=\"line\">doSomething().then(doSomethingElse());  </span><br><span class=\"line\"></span><br><span class=\"line\">doSomething().then(doSomethingElse);</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"原文地址链接：http-fex-baidu-com-blog-2015-07-we-have-a-problem-with-promises\"><a href=\"#原文地址链接：http-fex-baidu-com-blog-2015-07-we-have-a-problem-with-promises\" class=\"headerlink\" title=\"原文地址链接：http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/\"></a>原文地址链接：<a href=\"http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/\" target=\"_blank\" rel=\"noopener\">http://fex.baidu.com/blog/2015/07/we-have-a-problem-with-promises/</a></h3><p>Puzzle #1</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doSomething</span><br><span class=\"line\">|-----------------|</span><br><span class=\"line\">                  doSomethingElse(<span class=\"literal\">undefined</span>)</span><br><span class=\"line\">                  |------------------|</span><br><span class=\"line\">                                     finalHandler(resultOfDoSomethingElse)</span><br><span class=\"line\">                                     |------------------|</span><br></pre></td></tr></table></figure>\n<p>Puzzle #2</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doSomething</span><br><span class=\"line\">|-----------------|</span><br><span class=\"line\">                  doSomethingElse(<span class=\"literal\">undefined</span>)</span><br><span class=\"line\">                  |------------------|</span><br><span class=\"line\">                  finalHandler(<span class=\"literal\">undefined</span>)</span><br><span class=\"line\">                  |------------------|</span><br></pre></td></tr></table></figure>\n<p>Puzzle #3</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doSomething</span><br><span class=\"line\">|-----------------|</span><br><span class=\"line\">doSomethingElse(<span class=\"literal\">undefined</span>)</span><br><span class=\"line\">|---------------------------------|</span><br><span class=\"line\">                  finalHandler(resultOfDoSomething)</span><br><span class=\"line\">                  |------------------|</span><br></pre></td></tr></table></figure>\n<p>Puzzle #4</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doSomething</span><br><span class=\"line\">|-----------------|</span><br><span class=\"line\">                  doSomethingElse(resultOfDoSomething)</span><br><span class=\"line\">                  |------------------|</span><br><span class=\"line\">                                     finalHandler(resultOfDoSomethingElse)</span><br><span class=\"line\">                                     |------------------|</span><br></pre></td></tr></table></figure>\n<p>Promises 解决了 Callback Hell 问题，并且不仅仅是缩进问题。就像在 《Callback Hell 的救赎》 中描述的一样，回调函数真正的问题在于他剥夺了我们使用 return 和 throw 这些关键字的能力。</p>\n<h2 id=\"Promises的正确的风格\"><a href=\"#Promises的正确的风格\" class=\"headerlink\" title=\"Promises的正确的风格\"></a>Promises的正确的风格</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">remotedb.allDocs(...).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resultOfAllDocs</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> localdb.put(...);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resultOfPut</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> localdb.get(...);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resultOfGet</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> localdb.put(...);</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这种写法被称为 composing promises ，是 promises 的强大能力之一。每一个函数只会在前一个 promise 被调用并且完成回调后调用，并且这个函数会被前一个 promise 的输出调用</p>\n<h2 id=\"用了-promises-后怎么用-forEach\"><a href=\"#用了-promises-后怎么用-forEach\" class=\"headerlink\" title=\"用了 promises 后怎么用 forEach?\"></a>用了 promises 后怎么用 forEach?</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 错误写法</span></span><br><span class=\"line\"><span class=\"comment\">// I want to remove() all docs</span></span><br><span class=\"line\">db.allDocs(&#123;<span class=\"attr\">include_docs</span>: <span class=\"literal\">true</span>&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">  result.rows.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">row</span>) </span>&#123;</span><br><span class=\"line\">    db.remove(row.doc);  </span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// I naively believe all docs have been removed() now!</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 正确写法</span></span><br><span class=\"line\">db.allDocs(&#123;<span class=\"attr\">include_docs</span>: <span class=\"literal\">true</span>&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.all(result.rows.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">row</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> db.remove(row.doc);</span><br><span class=\"line\">  &#125;));</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arrayOfResults</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// All docs have really been removed() now!</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>一定不要忘记使用 .catch()</p>\n<h2 id=\"catch-与-then-null-…-并非完全等价\"><a href=\"#catch-与-then-null-…-并非完全等价\" class=\"headerlink\" title=\"catch() 与 then(null, …) 并非完全等价\"></a>catch() 与 then(null, …) 并非完全等价</h2><p>catch() 仅仅是一个语法糖。因此下面两段代码是等价的:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">somePromise().catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// handle error</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">somePromise().then(<span class=\"literal\">null</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// handle error</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>但是并非完全等价</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">somePromise().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'oh noes'</span>);</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// I caught your error! :)</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">somePromise().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'oh noes'</span>);</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// I didn't catch your error! :(</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><br></p>"},{"title":"iTerm2的使用","date":"2015-07-22T16:00:00.000Z","_content":"自从换了mac后连接远程linux服务器一直用电脑自带的终端，每次都要输密码，烦死了。看同事用iTerm挺方便的，就自己也弄了一个。\n\n### 下载地址\n\nhttp://www.iterm2.com/\n\n### 记住远程服务器密码\n\n```\nset timeout 30\nspawn ssh liuhaiming@122.92.222.122 -p51618\nexpect \"*password*\"\nsend “**********\\n\"\ninteract\n```\n\n<!-- more -->  \n\n### 替换图标\n\n原图标看着不好看,替换一个喜欢的图标\n找好自己要替换的图标\t\nhttps://dribbble.com/shots/656627-Terminal-Macintosh-Icon\t\n找到自己要替换图标的app\n右键显示简介，复制下载好的图标，并选中要替换的图标 command + v 就替换好了\t\n\n### 换个自己喜欢的主题\n\nhttp://iterm2colorschemes.com/\n\n### 相关命令\n\ncommand + O: 打开配置方便选择\t\n\n<br>","source":"_posts/Linux/iterm2.md","raw":"title: iTerm2的使用\n\ndate: 2015-7-23\n\ntags:\n    - 软件\n    - original\n\ncategories:\n    - Linux\n---\n自从换了mac后连接远程linux服务器一直用电脑自带的终端，每次都要输密码，烦死了。看同事用iTerm挺方便的，就自己也弄了一个。\n\n### 下载地址\n\nhttp://www.iterm2.com/\n\n### 记住远程服务器密码\n\n```\nset timeout 30\nspawn ssh liuhaiming@122.92.222.122 -p51618\nexpect \"*password*\"\nsend “**********\\n\"\ninteract\n```\n\n<!-- more -->  \n\n### 替换图标\n\n原图标看着不好看,替换一个喜欢的图标\n找好自己要替换的图标\t\nhttps://dribbble.com/shots/656627-Terminal-Macintosh-Icon\t\n找到自己要替换图标的app\n右键显示简介，复制下载好的图标，并选中要替换的图标 command + v 就替换好了\t\n\n### 换个自己喜欢的主题\n\nhttp://iterm2colorschemes.com/\n\n### 相关命令\n\ncommand + O: 打开配置方便选择\t\n\n<br>","slug":"Linux/iterm2","published":1,"updated":"2018-04-05T11:32:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfoy7130001eaciejdzxejyu","content":"<p>自从换了mac后连接远程linux服务器一直用电脑自带的终端，每次都要输密码，烦死了。看同事用iTerm挺方便的，就自己也弄了一个。</p>\n<h3 id=\"下载地址\"><a href=\"#下载地址\" class=\"headerlink\" title=\"下载地址\"></a>下载地址</h3><p><a href=\"http://www.iterm2.com/\" target=\"_blank\" rel=\"noopener\">http://www.iterm2.com/</a></p>\n<h3 id=\"记住远程服务器密码\"><a href=\"#记住远程服务器密码\" class=\"headerlink\" title=\"记住远程服务器密码\"></a>记住远程服务器密码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set timeout 30</span><br><span class=\"line\">spawn ssh liuhaiming@122.92.222.122 -p51618</span><br><span class=\"line\">expect &quot;*password*&quot;</span><br><span class=\"line\">send “**********\\n&quot;</span><br><span class=\"line\">interact</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>  \n<h3 id=\"替换图标\"><a href=\"#替换图标\" class=\"headerlink\" title=\"替换图标\"></a>替换图标</h3><p>原图标看着不好看,替换一个喜欢的图标<br>找好自己要替换的图标<br><a href=\"https://dribbble.com/shots/656627-Terminal-Macintosh-Icon\" target=\"_blank\" rel=\"noopener\">https://dribbble.com/shots/656627-Terminal-Macintosh-Icon</a><br>找到自己要替换图标的app<br>右键显示简介，复制下载好的图标，并选中要替换的图标 command + v 就替换好了    </p>\n<h3 id=\"换个自己喜欢的主题\"><a href=\"#换个自己喜欢的主题\" class=\"headerlink\" title=\"换个自己喜欢的主题\"></a>换个自己喜欢的主题</h3><p><a href=\"http://iterm2colorschemes.com/\" target=\"_blank\" rel=\"noopener\">http://iterm2colorschemes.com/</a></p>\n<h3 id=\"相关命令\"><a href=\"#相关命令\" class=\"headerlink\" title=\"相关命令\"></a>相关命令</h3><p>command + O: 打开配置方便选择    </p>\n<p><br></p>\n","site":{"data":{}},"excerpt":"<p>自从换了mac后连接远程linux服务器一直用电脑自带的终端，每次都要输密码，烦死了。看同事用iTerm挺方便的，就自己也弄了一个。</p>\n<h3 id=\"下载地址\"><a href=\"#下载地址\" class=\"headerlink\" title=\"下载地址\"></a>下载地址</h3><p><a href=\"http://www.iterm2.com/\" target=\"_blank\" rel=\"noopener\">http://www.iterm2.com/</a></p>\n<h3 id=\"记住远程服务器密码\"><a href=\"#记住远程服务器密码\" class=\"headerlink\" title=\"记住远程服务器密码\"></a>记住远程服务器密码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set timeout 30</span><br><span class=\"line\">spawn ssh liuhaiming@122.92.222.122 -p51618</span><br><span class=\"line\">expect &quot;*password*&quot;</span><br><span class=\"line\">send “**********\\n&quot;</span><br><span class=\"line\">interact</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"替换图标\"><a href=\"#替换图标\" class=\"headerlink\" title=\"替换图标\"></a>替换图标</h3><p>原图标看着不好看,替换一个喜欢的图标<br>找好自己要替换的图标<br><a href=\"https://dribbble.com/shots/656627-Terminal-Macintosh-Icon\" target=\"_blank\" rel=\"noopener\">https://dribbble.com/shots/656627-Terminal-Macintosh-Icon</a><br>找到自己要替换图标的app<br>右键显示简介，复制下载好的图标，并选中要替换的图标 command + v 就替换好了    </p>\n<h3 id=\"换个自己喜欢的主题\"><a href=\"#换个自己喜欢的主题\" class=\"headerlink\" title=\"换个自己喜欢的主题\"></a>换个自己喜欢的主题</h3><p><a href=\"http://iterm2colorschemes.com/\" target=\"_blank\" rel=\"noopener\">http://iterm2colorschemes.com/</a></p>\n<h3 id=\"相关命令\"><a href=\"#相关命令\" class=\"headerlink\" title=\"相关命令\"></a>相关命令</h3><p>command + O: 打开配置方便选择    </p>\n<p><br></p>"},{"title":"DNS Records 名词解释","date":"2017-04-04T16:00:00.000Z","_content":"\n### DNS\n\n  * Domain Name System 域名服务器\n  * 域名虽然便于人们记忆，但网络中的计算机之间只能互相认识IP地址，它们之间的转换工作称为域名解析，域名解析需要由专门的域名解析服务器来完成，DNS 就是进行域名解析的服务器。\n\n<!-- more -->\n\n### A记录\n\n  * A（Address）记录是用来指定域名对应的IP地址记录。\n  * 通俗来说A记录就是服务器的IP,域名绑定, A记录就是告诉DNS,当你输入域名的时候给你引导向设置在DNS的A记录所对应的服务器。 \n\n### CNAME记录\n\n  * CNAME（Canonical Name ）别名记录，允许您将多个名字映射到同一台计算机。\n  * 例如，有一台计算机名为 “host.mydomain.com”（A记录），它同时提供WWW和MAIL服务，为了便于用户访问服务。可以为该计算机设置两个别名（CNAME）：WWW和MAIL， 这两个别名的全称就“www.mydomain.com”和“mail.mydomain.com”，实际上他们都指向 “host.mydomain.com”。 \n\n### NS记录\n\n  * NS（Name Server）记录是域名服务器记录，用来指定该域名由哪个DNS服务器来进行解析。\n  * 注册域名时，总有默认的DNS服务器，每个注册的域名都是由一个DNS域名服务器来进行解析的，DNS服务器NS记录地址一般以以下的形式出现： ns1.domain.com、ns2.domain.com等。\n\n### MX记录\n\n  * MX（Mail Exchanger）记录是邮件交换记录，它指向一个邮件服务器，用于电子邮件系统发邮件时根据收信人的地址后缀来定位邮件服务器。\n  * 例如，当Internet上的某用户要发一封信给 user@mydomain.com 时，该用户的邮件系统通过DNS查找mydomain.com这个域名的MX记录，如果MX记录存在， 用户计算机就将邮件发送到MX记录所指定的邮件服务器上。 \n\n### TXT记录\n\n  * TXT记录，一般指某个主机名或域名的说明，如：Jim IN TXT \"contact: abc@mailserver.com\"，也就是您可以设置 TXT 内容以便使别人联系到您。\n  * TXT的应用之一，SPF（Sender Policy Framework）反垃圾邮件。SPF是跟DNS相关的一项技术，它的内容写在DNS的TXT类型的记录里面。MX记录的作用是给寄信者指明某个域名的邮件服务器有哪些。SPF的作用跟MX相反，它向收信者表明，哪些邮件服务器是经过某个域名认可会发送邮件的。SPF的作用主要是反垃圾邮件，主要针对那些发信人伪造域名的垃圾邮件。例如：当邮件服务器收到自称发件人是spam@gmail.com的邮件，那么到底它是不是真的gmail.com的邮件服务器发过来的呢，我们可以查询gmail.com的SPF记录，以此防止别人伪造你来发邮件。\n\n### PTR值\n\n  * PTR是pointer的简写，用于将一个IP地址映射到对应的域名，也可以看成是A记录的反向，IP地址的反向解析。 \n  * PTR主要用于邮件服务器，比如邮箱AAA@XXX.com给邮箱BBB@yahoo.com发了一封邮件，yahoo邮件服务器接到邮件时会查看这封邮件的头文件，并分析是由哪个IP地址发出来的，然后根据这个IP地址进行反向解析，如果解析结果对应XXX.com的IP地址就接受这封邮件，反之则拒绝接收这封邮件。 \n\n### 泛域名与泛解析\n\n  * 泛域名是指在一个域名根下，以 *.Domain.com的形式表示这个域名根所有未建立的子域名。 \n  * 泛解析是把*.Domain.com的A记录解析到某个IP 地址上，通过访问任意的前缀.domain.com都能访问到你解析的站点上。 \n\n### 域名绑定\n\n  * 域名绑定是指将域名指向服务器IP的操作。 \n\n### 域名转向\n\n  * 域名转向又称为域名指向或域名转发，当用户地址栏中输入您的域名时，将会自动跳转到您所指定的另一个域名。一般是使用短的好记的域名转向复杂难记的域名。\n\n### TTL值\n\n  * 简单的说，TTL(Time-To-Live)就是一条域名解析记录在DNS服务器中的存留时间。当各地的DNS服务器接受到解析请求时，就会向域名指定的NS服务器发出解析请求从而获得解析记录；在获得这个记录之后，记录会在DNS服务器中保存一段时间，这段时间内如果再接到这个域名的解析请求，DNS服务器将不再向NS服务器发出请求，而是直接返回刚才获得的记录，而这个记录在DNS服务器上保留的时间，就是TTL值。 \n\n  * TTL值设置的应用： 一是增大TTL值，以节约域名解析时间，给网站访问加速。 一般情况下，域名的各种记录是极少更改的，很可能几个月、几年内都不会有什么变化。我们完全可以增大域名记录的TTL值让记录在各地DNS服务器中缓存的时间加长，这样在更长的一段时间内，我们访问这个网站时，本地ISP的DNS服务器就不需要向域名的NS服务器发出解析请求，而直接从缓存中返回域名解析记录。 二是减小TTL值，减少更换空间时的不可访问时间。 更换空间99.9%会有DNS记录更改的问题，因为缓存的问题，新的域名记录在有的地方可能生效了，但在有的地方可能等上一两天甚至更久才生效。结果就是有的人可能访问到了新服务器，有的人访问到了旧服务器。仅仅是访问的话，这也不是什么大问题，但如果涉及到了邮件发送，这个就有点麻烦了，说不定哪封重要信件就被发送到了那已经停掉的旧服务器上。 为了尽可能的减小这个各地的解析时间差，合理的做法是： 第一步，先查看域名当前的TTL值，我们假定是1天。 第二步，修改TTL值为可设定的最小值，可能的话，建议为1分钟，就是60。 第三步，等待一天，保证各地的DNS服务器缓存都过期并更新了记录。 第四步，设置修改新记录，这个时候各地的DNS就能以最快的速度更新到新的记录。 第五步，确认各地的DNS已经更新完成后，把TTL值设置成您想要的值。 \n\n### 参考文章\n\n  * [DNS记录类型介绍(A记录、MX记录、NS记录等)](http://www.cnblogs.com/imsoft/p/5944146.html)\n\n\n<br>","source":"_posts/Linux/dns-records.md","raw":"title: DNS Records 名词解释\ndate: 2017-4-5  \ntags:\n    - original\ncategories:\n    - Linux  \n---\n\n### DNS\n\n  * Domain Name System 域名服务器\n  * 域名虽然便于人们记忆，但网络中的计算机之间只能互相认识IP地址，它们之间的转换工作称为域名解析，域名解析需要由专门的域名解析服务器来完成，DNS 就是进行域名解析的服务器。\n\n<!-- more -->\n\n### A记录\n\n  * A（Address）记录是用来指定域名对应的IP地址记录。\n  * 通俗来说A记录就是服务器的IP,域名绑定, A记录就是告诉DNS,当你输入域名的时候给你引导向设置在DNS的A记录所对应的服务器。 \n\n### CNAME记录\n\n  * CNAME（Canonical Name ）别名记录，允许您将多个名字映射到同一台计算机。\n  * 例如，有一台计算机名为 “host.mydomain.com”（A记录），它同时提供WWW和MAIL服务，为了便于用户访问服务。可以为该计算机设置两个别名（CNAME）：WWW和MAIL， 这两个别名的全称就“www.mydomain.com”和“mail.mydomain.com”，实际上他们都指向 “host.mydomain.com”。 \n\n### NS记录\n\n  * NS（Name Server）记录是域名服务器记录，用来指定该域名由哪个DNS服务器来进行解析。\n  * 注册域名时，总有默认的DNS服务器，每个注册的域名都是由一个DNS域名服务器来进行解析的，DNS服务器NS记录地址一般以以下的形式出现： ns1.domain.com、ns2.domain.com等。\n\n### MX记录\n\n  * MX（Mail Exchanger）记录是邮件交换记录，它指向一个邮件服务器，用于电子邮件系统发邮件时根据收信人的地址后缀来定位邮件服务器。\n  * 例如，当Internet上的某用户要发一封信给 user@mydomain.com 时，该用户的邮件系统通过DNS查找mydomain.com这个域名的MX记录，如果MX记录存在， 用户计算机就将邮件发送到MX记录所指定的邮件服务器上。 \n\n### TXT记录\n\n  * TXT记录，一般指某个主机名或域名的说明，如：Jim IN TXT \"contact: abc@mailserver.com\"，也就是您可以设置 TXT 内容以便使别人联系到您。\n  * TXT的应用之一，SPF（Sender Policy Framework）反垃圾邮件。SPF是跟DNS相关的一项技术，它的内容写在DNS的TXT类型的记录里面。MX记录的作用是给寄信者指明某个域名的邮件服务器有哪些。SPF的作用跟MX相反，它向收信者表明，哪些邮件服务器是经过某个域名认可会发送邮件的。SPF的作用主要是反垃圾邮件，主要针对那些发信人伪造域名的垃圾邮件。例如：当邮件服务器收到自称发件人是spam@gmail.com的邮件，那么到底它是不是真的gmail.com的邮件服务器发过来的呢，我们可以查询gmail.com的SPF记录，以此防止别人伪造你来发邮件。\n\n### PTR值\n\n  * PTR是pointer的简写，用于将一个IP地址映射到对应的域名，也可以看成是A记录的反向，IP地址的反向解析。 \n  * PTR主要用于邮件服务器，比如邮箱AAA@XXX.com给邮箱BBB@yahoo.com发了一封邮件，yahoo邮件服务器接到邮件时会查看这封邮件的头文件，并分析是由哪个IP地址发出来的，然后根据这个IP地址进行反向解析，如果解析结果对应XXX.com的IP地址就接受这封邮件，反之则拒绝接收这封邮件。 \n\n### 泛域名与泛解析\n\n  * 泛域名是指在一个域名根下，以 *.Domain.com的形式表示这个域名根所有未建立的子域名。 \n  * 泛解析是把*.Domain.com的A记录解析到某个IP 地址上，通过访问任意的前缀.domain.com都能访问到你解析的站点上。 \n\n### 域名绑定\n\n  * 域名绑定是指将域名指向服务器IP的操作。 \n\n### 域名转向\n\n  * 域名转向又称为域名指向或域名转发，当用户地址栏中输入您的域名时，将会自动跳转到您所指定的另一个域名。一般是使用短的好记的域名转向复杂难记的域名。\n\n### TTL值\n\n  * 简单的说，TTL(Time-To-Live)就是一条域名解析记录在DNS服务器中的存留时间。当各地的DNS服务器接受到解析请求时，就会向域名指定的NS服务器发出解析请求从而获得解析记录；在获得这个记录之后，记录会在DNS服务器中保存一段时间，这段时间内如果再接到这个域名的解析请求，DNS服务器将不再向NS服务器发出请求，而是直接返回刚才获得的记录，而这个记录在DNS服务器上保留的时间，就是TTL值。 \n\n  * TTL值设置的应用： 一是增大TTL值，以节约域名解析时间，给网站访问加速。 一般情况下，域名的各种记录是极少更改的，很可能几个月、几年内都不会有什么变化。我们完全可以增大域名记录的TTL值让记录在各地DNS服务器中缓存的时间加长，这样在更长的一段时间内，我们访问这个网站时，本地ISP的DNS服务器就不需要向域名的NS服务器发出解析请求，而直接从缓存中返回域名解析记录。 二是减小TTL值，减少更换空间时的不可访问时间。 更换空间99.9%会有DNS记录更改的问题，因为缓存的问题，新的域名记录在有的地方可能生效了，但在有的地方可能等上一两天甚至更久才生效。结果就是有的人可能访问到了新服务器，有的人访问到了旧服务器。仅仅是访问的话，这也不是什么大问题，但如果涉及到了邮件发送，这个就有点麻烦了，说不定哪封重要信件就被发送到了那已经停掉的旧服务器上。 为了尽可能的减小这个各地的解析时间差，合理的做法是： 第一步，先查看域名当前的TTL值，我们假定是1天。 第二步，修改TTL值为可设定的最小值，可能的话，建议为1分钟，就是60。 第三步，等待一天，保证各地的DNS服务器缓存都过期并更新了记录。 第四步，设置修改新记录，这个时候各地的DNS就能以最快的速度更新到新的记录。 第五步，确认各地的DNS已经更新完成后，把TTL值设置成您想要的值。 \n\n### 参考文章\n\n  * [DNS记录类型介绍(A记录、MX记录、NS记录等)](http://www.cnblogs.com/imsoft/p/5944146.html)\n\n\n<br>","slug":"Linux/dns-records","published":1,"updated":"2018-04-05T11:32:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfoy7132001iacierw7yzj9d","content":"<h3 id=\"DNS\"><a href=\"#DNS\" class=\"headerlink\" title=\"DNS\"></a>DNS</h3><ul>\n<li>Domain Name System 域名服务器</li>\n<li>域名虽然便于人们记忆，但网络中的计算机之间只能互相认识IP地址，它们之间的转换工作称为域名解析，域名解析需要由专门的域名解析服务器来完成，DNS 就是进行域名解析的服务器。</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"A记录\"><a href=\"#A记录\" class=\"headerlink\" title=\"A记录\"></a>A记录</h3><ul>\n<li>A（Address）记录是用来指定域名对应的IP地址记录。</li>\n<li>通俗来说A记录就是服务器的IP,域名绑定, A记录就是告诉DNS,当你输入域名的时候给你引导向设置在DNS的A记录所对应的服务器。 </li>\n</ul>\n<h3 id=\"CNAME记录\"><a href=\"#CNAME记录\" class=\"headerlink\" title=\"CNAME记录\"></a>CNAME记录</h3><ul>\n<li>CNAME（Canonical Name ）别名记录，允许您将多个名字映射到同一台计算机。</li>\n<li>例如，有一台计算机名为 “host.mydomain.com”（A记录），它同时提供WWW和MAIL服务，为了便于用户访问服务。可以为该计算机设置两个别名（CNAME）：WWW和MAIL， 这两个别名的全称就“<a href=\"http://www.mydomain.com”和“mail.mydomain.com”，实际上他们都指向\" target=\"_blank\" rel=\"noopener\">www.mydomain.com”和“mail.mydomain.com”，实际上他们都指向</a> “host.mydomain.com”。 </li>\n</ul>\n<h3 id=\"NS记录\"><a href=\"#NS记录\" class=\"headerlink\" title=\"NS记录\"></a>NS记录</h3><ul>\n<li>NS（Name Server）记录是域名服务器记录，用来指定该域名由哪个DNS服务器来进行解析。</li>\n<li>注册域名时，总有默认的DNS服务器，每个注册的域名都是由一个DNS域名服务器来进行解析的，DNS服务器NS记录地址一般以以下的形式出现： ns1.domain.com、ns2.domain.com等。</li>\n</ul>\n<h3 id=\"MX记录\"><a href=\"#MX记录\" class=\"headerlink\" title=\"MX记录\"></a>MX记录</h3><ul>\n<li>MX（Mail Exchanger）记录是邮件交换记录，它指向一个邮件服务器，用于电子邮件系统发邮件时根据收信人的地址后缀来定位邮件服务器。</li>\n<li>例如，当Internet上的某用户要发一封信给 <a href=\"mailto:user@mydomain.com\" target=\"_blank\" rel=\"noopener\">user@mydomain.com</a> 时，该用户的邮件系统通过DNS查找mydomain.com这个域名的MX记录，如果MX记录存在， 用户计算机就将邮件发送到MX记录所指定的邮件服务器上。 </li>\n</ul>\n<h3 id=\"TXT记录\"><a href=\"#TXT记录\" class=\"headerlink\" title=\"TXT记录\"></a>TXT记录</h3><ul>\n<li>TXT记录，一般指某个主机名或域名的说明，如：Jim IN TXT “contact: <a href=\"mailto:abc@mailserver.com\" target=\"_blank\" rel=\"noopener\">abc@mailserver.com</a>“，也就是您可以设置 TXT 内容以便使别人联系到您。</li>\n<li>TXT的应用之一，SPF（Sender Policy Framework）反垃圾邮件。SPF是跟DNS相关的一项技术，它的内容写在DNS的TXT类型的记录里面。MX记录的作用是给寄信者指明某个域名的邮件服务器有哪些。SPF的作用跟MX相反，它向收信者表明，哪些邮件服务器是经过某个域名认可会发送邮件的。SPF的作用主要是反垃圾邮件，主要针对那些发信人伪造域名的垃圾邮件。例如：当邮件服务器收到自称发件人是<a href=\"mailto:spam@gmail.com\" target=\"_blank\" rel=\"noopener\">spam@gmail.com</a>的邮件，那么到底它是不是真的gmail.com的邮件服务器发过来的呢，我们可以查询gmail.com的SPF记录，以此防止别人伪造你来发邮件。</li>\n</ul>\n<h3 id=\"PTR值\"><a href=\"#PTR值\" class=\"headerlink\" title=\"PTR值\"></a>PTR值</h3><ul>\n<li>PTR是pointer的简写，用于将一个IP地址映射到对应的域名，也可以看成是A记录的反向，IP地址的反向解析。 </li>\n<li>PTR主要用于邮件服务器，比如邮箱<a href=\"mailto:AAA@XXX.com\" target=\"_blank\" rel=\"noopener\">AAA@XXX.com</a>给邮箱<a href=\"mailto:BBB@yahoo.com\" target=\"_blank\" rel=\"noopener\">BBB@yahoo.com</a>发了一封邮件，yahoo邮件服务器接到邮件时会查看这封邮件的头文件，并分析是由哪个IP地址发出来的，然后根据这个IP地址进行反向解析，如果解析结果对应XXX.com的IP地址就接受这封邮件，反之则拒绝接收这封邮件。 </li>\n</ul>\n<h3 id=\"泛域名与泛解析\"><a href=\"#泛域名与泛解析\" class=\"headerlink\" title=\"泛域名与泛解析\"></a>泛域名与泛解析</h3><ul>\n<li>泛域名是指在一个域名根下，以 *.Domain.com的形式表示这个域名根所有未建立的子域名。 </li>\n<li>泛解析是把*.Domain.com的A记录解析到某个IP 地址上，通过访问任意的前缀.domain.com都能访问到你解析的站点上。 </li>\n</ul>\n<h3 id=\"域名绑定\"><a href=\"#域名绑定\" class=\"headerlink\" title=\"域名绑定\"></a>域名绑定</h3><ul>\n<li>域名绑定是指将域名指向服务器IP的操作。 </li>\n</ul>\n<h3 id=\"域名转向\"><a href=\"#域名转向\" class=\"headerlink\" title=\"域名转向\"></a>域名转向</h3><ul>\n<li>域名转向又称为域名指向或域名转发，当用户地址栏中输入您的域名时，将会自动跳转到您所指定的另一个域名。一般是使用短的好记的域名转向复杂难记的域名。</li>\n</ul>\n<h3 id=\"TTL值\"><a href=\"#TTL值\" class=\"headerlink\" title=\"TTL值\"></a>TTL值</h3><ul>\n<li><p>简单的说，TTL(Time-To-Live)就是一条域名解析记录在DNS服务器中的存留时间。当各地的DNS服务器接受到解析请求时，就会向域名指定的NS服务器发出解析请求从而获得解析记录；在获得这个记录之后，记录会在DNS服务器中保存一段时间，这段时间内如果再接到这个域名的解析请求，DNS服务器将不再向NS服务器发出请求，而是直接返回刚才获得的记录，而这个记录在DNS服务器上保留的时间，就是TTL值。 </p>\n</li>\n<li><p>TTL值设置的应用： 一是增大TTL值，以节约域名解析时间，给网站访问加速。 一般情况下，域名的各种记录是极少更改的，很可能几个月、几年内都不会有什么变化。我们完全可以增大域名记录的TTL值让记录在各地DNS服务器中缓存的时间加长，这样在更长的一段时间内，我们访问这个网站时，本地ISP的DNS服务器就不需要向域名的NS服务器发出解析请求，而直接从缓存中返回域名解析记录。 二是减小TTL值，减少更换空间时的不可访问时间。 更换空间99.9%会有DNS记录更改的问题，因为缓存的问题，新的域名记录在有的地方可能生效了，但在有的地方可能等上一两天甚至更久才生效。结果就是有的人可能访问到了新服务器，有的人访问到了旧服务器。仅仅是访问的话，这也不是什么大问题，但如果涉及到了邮件发送，这个就有点麻烦了，说不定哪封重要信件就被发送到了那已经停掉的旧服务器上。 为了尽可能的减小这个各地的解析时间差，合理的做法是： 第一步，先查看域名当前的TTL值，我们假定是1天。 第二步，修改TTL值为可设定的最小值，可能的话，建议为1分钟，就是60。 第三步，等待一天，保证各地的DNS服务器缓存都过期并更新了记录。 第四步，设置修改新记录，这个时候各地的DNS就能以最快的速度更新到新的记录。 第五步，确认各地的DNS已经更新完成后，把TTL值设置成您想要的值。 </p>\n</li>\n</ul>\n<h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><ul>\n<li><a href=\"http://www.cnblogs.com/imsoft/p/5944146.html\" target=\"_blank\" rel=\"noopener\">DNS记录类型介绍(A记录、MX记录、NS记录等)</a></li>\n</ul>\n<p><br></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"DNS\"><a href=\"#DNS\" class=\"headerlink\" title=\"DNS\"></a>DNS</h3><ul>\n<li>Domain Name System 域名服务器</li>\n<li>域名虽然便于人们记忆，但网络中的计算机之间只能互相认识IP地址，它们之间的转换工作称为域名解析，域名解析需要由专门的域名解析服务器来完成，DNS 就是进行域名解析的服务器。</li>\n</ul>","more":"<h3 id=\"A记录\"><a href=\"#A记录\" class=\"headerlink\" title=\"A记录\"></a>A记录</h3><ul>\n<li>A（Address）记录是用来指定域名对应的IP地址记录。</li>\n<li>通俗来说A记录就是服务器的IP,域名绑定, A记录就是告诉DNS,当你输入域名的时候给你引导向设置在DNS的A记录所对应的服务器。 </li>\n</ul>\n<h3 id=\"CNAME记录\"><a href=\"#CNAME记录\" class=\"headerlink\" title=\"CNAME记录\"></a>CNAME记录</h3><ul>\n<li>CNAME（Canonical Name ）别名记录，允许您将多个名字映射到同一台计算机。</li>\n<li>例如，有一台计算机名为 “host.mydomain.com”（A记录），它同时提供WWW和MAIL服务，为了便于用户访问服务。可以为该计算机设置两个别名（CNAME）：WWW和MAIL， 这两个别名的全称就“<a href=\"http://www.mydomain.com”和“mail.mydomain.com”，实际上他们都指向\" target=\"_blank\" rel=\"noopener\">www.mydomain.com”和“mail.mydomain.com”，实际上他们都指向</a> “host.mydomain.com”。 </li>\n</ul>\n<h3 id=\"NS记录\"><a href=\"#NS记录\" class=\"headerlink\" title=\"NS记录\"></a>NS记录</h3><ul>\n<li>NS（Name Server）记录是域名服务器记录，用来指定该域名由哪个DNS服务器来进行解析。</li>\n<li>注册域名时，总有默认的DNS服务器，每个注册的域名都是由一个DNS域名服务器来进行解析的，DNS服务器NS记录地址一般以以下的形式出现： ns1.domain.com、ns2.domain.com等。</li>\n</ul>\n<h3 id=\"MX记录\"><a href=\"#MX记录\" class=\"headerlink\" title=\"MX记录\"></a>MX记录</h3><ul>\n<li>MX（Mail Exchanger）记录是邮件交换记录，它指向一个邮件服务器，用于电子邮件系统发邮件时根据收信人的地址后缀来定位邮件服务器。</li>\n<li>例如，当Internet上的某用户要发一封信给 <a href=\"mailto:user@mydomain.com\" target=\"_blank\" rel=\"noopener\">user@mydomain.com</a> 时，该用户的邮件系统通过DNS查找mydomain.com这个域名的MX记录，如果MX记录存在， 用户计算机就将邮件发送到MX记录所指定的邮件服务器上。 </li>\n</ul>\n<h3 id=\"TXT记录\"><a href=\"#TXT记录\" class=\"headerlink\" title=\"TXT记录\"></a>TXT记录</h3><ul>\n<li>TXT记录，一般指某个主机名或域名的说明，如：Jim IN TXT “contact: <a href=\"mailto:abc@mailserver.com\" target=\"_blank\" rel=\"noopener\">abc@mailserver.com</a>“，也就是您可以设置 TXT 内容以便使别人联系到您。</li>\n<li>TXT的应用之一，SPF（Sender Policy Framework）反垃圾邮件。SPF是跟DNS相关的一项技术，它的内容写在DNS的TXT类型的记录里面。MX记录的作用是给寄信者指明某个域名的邮件服务器有哪些。SPF的作用跟MX相反，它向收信者表明，哪些邮件服务器是经过某个域名认可会发送邮件的。SPF的作用主要是反垃圾邮件，主要针对那些发信人伪造域名的垃圾邮件。例如：当邮件服务器收到自称发件人是<a href=\"mailto:spam@gmail.com\" target=\"_blank\" rel=\"noopener\">spam@gmail.com</a>的邮件，那么到底它是不是真的gmail.com的邮件服务器发过来的呢，我们可以查询gmail.com的SPF记录，以此防止别人伪造你来发邮件。</li>\n</ul>\n<h3 id=\"PTR值\"><a href=\"#PTR值\" class=\"headerlink\" title=\"PTR值\"></a>PTR值</h3><ul>\n<li>PTR是pointer的简写，用于将一个IP地址映射到对应的域名，也可以看成是A记录的反向，IP地址的反向解析。 </li>\n<li>PTR主要用于邮件服务器，比如邮箱<a href=\"mailto:AAA@XXX.com\" target=\"_blank\" rel=\"noopener\">AAA@XXX.com</a>给邮箱<a href=\"mailto:BBB@yahoo.com\" target=\"_blank\" rel=\"noopener\">BBB@yahoo.com</a>发了一封邮件，yahoo邮件服务器接到邮件时会查看这封邮件的头文件，并分析是由哪个IP地址发出来的，然后根据这个IP地址进行反向解析，如果解析结果对应XXX.com的IP地址就接受这封邮件，反之则拒绝接收这封邮件。 </li>\n</ul>\n<h3 id=\"泛域名与泛解析\"><a href=\"#泛域名与泛解析\" class=\"headerlink\" title=\"泛域名与泛解析\"></a>泛域名与泛解析</h3><ul>\n<li>泛域名是指在一个域名根下，以 *.Domain.com的形式表示这个域名根所有未建立的子域名。 </li>\n<li>泛解析是把*.Domain.com的A记录解析到某个IP 地址上，通过访问任意的前缀.domain.com都能访问到你解析的站点上。 </li>\n</ul>\n<h3 id=\"域名绑定\"><a href=\"#域名绑定\" class=\"headerlink\" title=\"域名绑定\"></a>域名绑定</h3><ul>\n<li>域名绑定是指将域名指向服务器IP的操作。 </li>\n</ul>\n<h3 id=\"域名转向\"><a href=\"#域名转向\" class=\"headerlink\" title=\"域名转向\"></a>域名转向</h3><ul>\n<li>域名转向又称为域名指向或域名转发，当用户地址栏中输入您的域名时，将会自动跳转到您所指定的另一个域名。一般是使用短的好记的域名转向复杂难记的域名。</li>\n</ul>\n<h3 id=\"TTL值\"><a href=\"#TTL值\" class=\"headerlink\" title=\"TTL值\"></a>TTL值</h3><ul>\n<li><p>简单的说，TTL(Time-To-Live)就是一条域名解析记录在DNS服务器中的存留时间。当各地的DNS服务器接受到解析请求时，就会向域名指定的NS服务器发出解析请求从而获得解析记录；在获得这个记录之后，记录会在DNS服务器中保存一段时间，这段时间内如果再接到这个域名的解析请求，DNS服务器将不再向NS服务器发出请求，而是直接返回刚才获得的记录，而这个记录在DNS服务器上保留的时间，就是TTL值。 </p>\n</li>\n<li><p>TTL值设置的应用： 一是增大TTL值，以节约域名解析时间，给网站访问加速。 一般情况下，域名的各种记录是极少更改的，很可能几个月、几年内都不会有什么变化。我们完全可以增大域名记录的TTL值让记录在各地DNS服务器中缓存的时间加长，这样在更长的一段时间内，我们访问这个网站时，本地ISP的DNS服务器就不需要向域名的NS服务器发出解析请求，而直接从缓存中返回域名解析记录。 二是减小TTL值，减少更换空间时的不可访问时间。 更换空间99.9%会有DNS记录更改的问题，因为缓存的问题，新的域名记录在有的地方可能生效了，但在有的地方可能等上一两天甚至更久才生效。结果就是有的人可能访问到了新服务器，有的人访问到了旧服务器。仅仅是访问的话，这也不是什么大问题，但如果涉及到了邮件发送，这个就有点麻烦了，说不定哪封重要信件就被发送到了那已经停掉的旧服务器上。 为了尽可能的减小这个各地的解析时间差，合理的做法是： 第一步，先查看域名当前的TTL值，我们假定是1天。 第二步，修改TTL值为可设定的最小值，可能的话，建议为1分钟，就是60。 第三步，等待一天，保证各地的DNS服务器缓存都过期并更新了记录。 第四步，设置修改新记录，这个时候各地的DNS就能以最快的速度更新到新的记录。 第五步，确认各地的DNS已经更新完成后，把TTL值设置成您想要的值。 </p>\n</li>\n</ul>\n<h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><ul>\n<li><a href=\"http://www.cnblogs.com/imsoft/p/5944146.html\" target=\"_blank\" rel=\"noopener\">DNS记录类型介绍(A记录、MX记录、NS记录等)</a></li>\n</ul>\n<p><br></p>"},{"title":"Linux调优","date":"2017-03-26T16:00:00.000Z","_content":"\n### 打开文件数设置\n\n``` sh  \ncat >> /etc/security/limits.conf << EOF\n* soft nofile 65535\n* hard nofile 65535\nEOF\n```\n\n<!-- more -->\n\n### Linux内核调优\n\n``` sh  \ncat >> /etc/sysctl.conf << EOF\n# 该参数设置系统的TIME_WAIT的数量，如果超过默认值则会被立即清除\nnet.ipv4.tcp_max_tw_buckets = 20000\n# 定义了系统中每一个端口最大的监听队列的长度，这是个全局的参数\nnet.core.somaxconn = 65535\n# 对于还未获得对方确认的连接请求，可保存在队列中的最大数目\nnet.ipv4.tcp_max_syn_backlog = 262144\n# 在每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目\nnet.core.netdev_max_backlog = 30000\n# 能够更快地回收TIME-WAIT套接字。此选项会导致处于NAT网络的客户端超时，建议为0\nnet.ipv4.tcp_tw_recycle = 0\n# 系统所有进程一共可以打开的文件数量\nfs.file-max = 6815744\nEOF\n```\n\n<br>","source":"_posts/Linux/linux-kernel.md","raw":"title: Linux调优\ndate: 2017-3-27  \ntags:\n    - original\ncategories:\n    - Linux  \n---\n\n### 打开文件数设置\n\n``` sh  \ncat >> /etc/security/limits.conf << EOF\n* soft nofile 65535\n* hard nofile 65535\nEOF\n```\n\n<!-- more -->\n\n### Linux内核调优\n\n``` sh  \ncat >> /etc/sysctl.conf << EOF\n# 该参数设置系统的TIME_WAIT的数量，如果超过默认值则会被立即清除\nnet.ipv4.tcp_max_tw_buckets = 20000\n# 定义了系统中每一个端口最大的监听队列的长度，这是个全局的参数\nnet.core.somaxconn = 65535\n# 对于还未获得对方确认的连接请求，可保存在队列中的最大数目\nnet.ipv4.tcp_max_syn_backlog = 262144\n# 在每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目\nnet.core.netdev_max_backlog = 30000\n# 能够更快地回收TIME-WAIT套接字。此选项会导致处于NAT网络的客户端超时，建议为0\nnet.ipv4.tcp_tw_recycle = 0\n# 系统所有进程一共可以打开的文件数量\nfs.file-max = 6815744\nEOF\n```\n\n<br>","slug":"Linux/linux-kernel","published":1,"updated":"2018-04-05T11:32:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfoy7134001macie6ywge7vt","content":"<h3 id=\"打开文件数设置\"><a href=\"#打开文件数设置\" class=\"headerlink\" title=\"打开文件数设置\"></a>打开文件数设置</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt;&gt; /etc/security/limits.conf &lt;&lt; EOF</span><br><span class=\"line\">* soft nofile 65535</span><br><span class=\"line\">* hard nofile 65535</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"Linux内核调优\"><a href=\"#Linux内核调优\" class=\"headerlink\" title=\"Linux内核调优\"></a>Linux内核调优</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt;&gt; /etc/sysctl.conf &lt;&lt; EOF</span><br><span class=\"line\"><span class=\"comment\"># 该参数设置系统的TIME_WAIT的数量，如果超过默认值则会被立即清除</span></span><br><span class=\"line\">net.ipv4.tcp_max_tw_buckets = 20000</span><br><span class=\"line\"><span class=\"comment\"># 定义了系统中每一个端口最大的监听队列的长度，这是个全局的参数</span></span><br><span class=\"line\">net.core.somaxconn = 65535</span><br><span class=\"line\"><span class=\"comment\"># 对于还未获得对方确认的连接请求，可保存在队列中的最大数目</span></span><br><span class=\"line\">net.ipv4.tcp_max_syn_backlog = 262144</span><br><span class=\"line\"><span class=\"comment\"># 在每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目</span></span><br><span class=\"line\">net.core.netdev_max_backlog = 30000</span><br><span class=\"line\"><span class=\"comment\"># 能够更快地回收TIME-WAIT套接字。此选项会导致处于NAT网络的客户端超时，建议为0</span></span><br><span class=\"line\">net.ipv4.tcp_tw_recycle = 0</span><br><span class=\"line\"><span class=\"comment\"># 系统所有进程一共可以打开的文件数量</span></span><br><span class=\"line\">fs.file-max = 6815744</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<p><br></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"打开文件数设置\"><a href=\"#打开文件数设置\" class=\"headerlink\" title=\"打开文件数设置\"></a>打开文件数设置</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt;&gt; /etc/security/limits.conf &lt;&lt; EOF</span><br><span class=\"line\">* soft nofile 65535</span><br><span class=\"line\">* hard nofile 65535</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"Linux内核调优\"><a href=\"#Linux内核调优\" class=\"headerlink\" title=\"Linux内核调优\"></a>Linux内核调优</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt;&gt; /etc/sysctl.conf &lt;&lt; EOF</span><br><span class=\"line\"><span class=\"comment\"># 该参数设置系统的TIME_WAIT的数量，如果超过默认值则会被立即清除</span></span><br><span class=\"line\">net.ipv4.tcp_max_tw_buckets = 20000</span><br><span class=\"line\"><span class=\"comment\"># 定义了系统中每一个端口最大的监听队列的长度，这是个全局的参数</span></span><br><span class=\"line\">net.core.somaxconn = 65535</span><br><span class=\"line\"><span class=\"comment\"># 对于还未获得对方确认的连接请求，可保存在队列中的最大数目</span></span><br><span class=\"line\">net.ipv4.tcp_max_syn_backlog = 262144</span><br><span class=\"line\"><span class=\"comment\"># 在每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目</span></span><br><span class=\"line\">net.core.netdev_max_backlog = 30000</span><br><span class=\"line\"><span class=\"comment\"># 能够更快地回收TIME-WAIT套接字。此选项会导致处于NAT网络的客户端超时，建议为0</span></span><br><span class=\"line\">net.ipv4.tcp_tw_recycle = 0</span><br><span class=\"line\"><span class=\"comment\"># 系统所有进程一共可以打开的文件数量</span></span><br><span class=\"line\">fs.file-max = 6815744</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<p><br></p>"},{"title":"sql 操作","date":"2016-05-25T16:00:00.000Z","_content":"\n删除重复的数据\n\n```sql\ndelete a from tb_dict a\nwhere (a.keyword,a.nature) in (\n\tselect * from (select keyword,nature from tb_dict group by keyword, nature having count(*) > 1) b\n) \nand a.id not in (\n\tselect * from (select min(id) from tb_dict group by keyword, nature having count(*)>1) c\n)\n```\n\n<!-- more -->      \n\n查询重复的数据\n\n```sql\nselect * from tb_dict a \nwhere (a.keyword,a.nature, a.freq) in (\n\tselect keyword,nature, freq from tb_dict group by keyword, nature, freq having count(*) > 1\n)\n```\n\n\n\n<br>","source":"_posts/MySQL/sql.md","raw":"title: sql 操作\ndate: 2016-5-26  \ntags:\n    - original\ncategories:\n    - MySQL\n---\n\n删除重复的数据\n\n```sql\ndelete a from tb_dict a\nwhere (a.keyword,a.nature) in (\n\tselect * from (select keyword,nature from tb_dict group by keyword, nature having count(*) > 1) b\n) \nand a.id not in (\n\tselect * from (select min(id) from tb_dict group by keyword, nature having count(*)>1) c\n)\n```\n\n<!-- more -->      \n\n查询重复的数据\n\n```sql\nselect * from tb_dict a \nwhere (a.keyword,a.nature, a.freq) in (\n\tselect keyword,nature, freq from tb_dict group by keyword, nature, freq having count(*) > 1\n)\n```\n\n\n\n<br>","slug":"MySQL/sql","published":1,"updated":"2018-04-05T11:32:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfoy7136001qacieq9lqjdhe","content":"<p>删除重复的数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> a <span class=\"keyword\">from</span> tb_dict a</span><br><span class=\"line\"><span class=\"keyword\">where</span> (a.keyword,a.nature) <span class=\"keyword\">in</span> (</span><br><span class=\"line\">\t<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> keyword,nature <span class=\"keyword\">from</span> tb_dict <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> keyword, nature <span class=\"keyword\">having</span> <span class=\"keyword\">count</span>(*) &gt; <span class=\"number\">1</span>) b</span><br><span class=\"line\">) </span><br><span class=\"line\"><span class=\"keyword\">and</span> a.id <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> (</span><br><span class=\"line\">\t<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> <span class=\"keyword\">min</span>(<span class=\"keyword\">id</span>) <span class=\"keyword\">from</span> tb_dict <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> keyword, nature <span class=\"keyword\">having</span> <span class=\"keyword\">count</span>(*)&gt;<span class=\"number\">1</span>) c</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>      \n<p>查询重复的数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> tb_dict a </span><br><span class=\"line\"><span class=\"keyword\">where</span> (a.keyword,a.nature, a.freq) <span class=\"keyword\">in</span> (</span><br><span class=\"line\">\t<span class=\"keyword\">select</span> keyword,nature, freq <span class=\"keyword\">from</span> tb_dict <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> keyword, nature, freq <span class=\"keyword\">having</span> <span class=\"keyword\">count</span>(*) &gt; <span class=\"number\">1</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p><br></p>\n","site":{"data":{}},"excerpt":"<p>删除重复的数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> a <span class=\"keyword\">from</span> tb_dict a</span><br><span class=\"line\"><span class=\"keyword\">where</span> (a.keyword,a.nature) <span class=\"keyword\">in</span> (</span><br><span class=\"line\">\t<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> keyword,nature <span class=\"keyword\">from</span> tb_dict <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> keyword, nature <span class=\"keyword\">having</span> <span class=\"keyword\">count</span>(*) &gt; <span class=\"number\">1</span>) b</span><br><span class=\"line\">) </span><br><span class=\"line\"><span class=\"keyword\">and</span> a.id <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> (</span><br><span class=\"line\">\t<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> <span class=\"keyword\">min</span>(<span class=\"keyword\">id</span>) <span class=\"keyword\">from</span> tb_dict <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> keyword, nature <span class=\"keyword\">having</span> <span class=\"keyword\">count</span>(*)&gt;<span class=\"number\">1</span>) c</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>","more":"<p>查询重复的数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> tb_dict a </span><br><span class=\"line\"><span class=\"keyword\">where</span> (a.keyword,a.nature, a.freq) <span class=\"keyword\">in</span> (</span><br><span class=\"line\">\t<span class=\"keyword\">select</span> keyword,nature, freq <span class=\"keyword\">from</span> tb_dict <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> keyword, nature, freq <span class=\"keyword\">having</span> <span class=\"keyword\">count</span>(*) &gt; <span class=\"number\">1</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p><br></p>"},{"title":"mysql 批量删除错误分析","date":"2016-05-25T16:00:00.000Z","_content":"\n\n```sql\ndelete t1 from tb_dict t1 \nwhere t1.id in (\n\tselect t2.id from tb_dict t2 where t2.nature = 'v-taxi'\n);\n```\n\n使用这条 sql 语句进行批量删除时报 \"You can't specify target table 't1' for update in FROM clause\" 错误，查询后得知原来 msyql 不允许在子查询的同时删除原表中的数据。下面对应的解决办法。\n\n\n```sql\ndelete t1 from tb_dict t1 \nwhere t1.id in (\n\tselect t3.id from (\n\t\tselect * from tb_dict t2 where t2.nature = 'v-taxi'\n\t) as t3\n);\n```\n\n将子查询得到的数据封装成临时表，这时就能解决问题了。\n\n\n<br>","source":"_posts/MySQL/mysql-batch-delete.md","raw":"title: mysql 批量删除错误分析\ndate: 2016-5-26  \ntags:\n    - original\ncategories:\n    - MySQL\n---\n\n\n```sql\ndelete t1 from tb_dict t1 \nwhere t1.id in (\n\tselect t2.id from tb_dict t2 where t2.nature = 'v-taxi'\n);\n```\n\n使用这条 sql 语句进行批量删除时报 \"You can't specify target table 't1' for update in FROM clause\" 错误，查询后得知原来 msyql 不允许在子查询的同时删除原表中的数据。下面对应的解决办法。\n\n\n```sql\ndelete t1 from tb_dict t1 \nwhere t1.id in (\n\tselect t3.id from (\n\t\tselect * from tb_dict t2 where t2.nature = 'v-taxi'\n\t) as t3\n);\n```\n\n将子查询得到的数据封装成临时表，这时就能解决问题了。\n\n\n<br>","slug":"MySQL/mysql-batch-delete","published":1,"updated":"2018-04-05T11:32:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfoy7138001uacie2e5ag3b9","content":"<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> t1 <span class=\"keyword\">from</span> tb_dict t1 </span><br><span class=\"line\"><span class=\"keyword\">where</span> t1.id <span class=\"keyword\">in</span> (</span><br><span class=\"line\">\t<span class=\"keyword\">select</span> t2.id <span class=\"keyword\">from</span> tb_dict t2 <span class=\"keyword\">where</span> t2.nature = <span class=\"string\">'v-taxi'</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>使用这条 sql 语句进行批量删除时报 “You can’t specify target table ‘t1’ for update in FROM clause” 错误，查询后得知原来 msyql 不允许在子查询的同时删除原表中的数据。下面对应的解决办法。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> t1 <span class=\"keyword\">from</span> tb_dict t1 </span><br><span class=\"line\"><span class=\"keyword\">where</span> t1.id <span class=\"keyword\">in</span> (</span><br><span class=\"line\">\t<span class=\"keyword\">select</span> t3.id <span class=\"keyword\">from</span> (</span><br><span class=\"line\">\t\t<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> tb_dict t2 <span class=\"keyword\">where</span> t2.nature = <span class=\"string\">'v-taxi'</span></span><br><span class=\"line\">\t) <span class=\"keyword\">as</span> t3</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>将子查询得到的数据封装成临时表，这时就能解决问题了。</p>\n<p><br></p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> t1 <span class=\"keyword\">from</span> tb_dict t1 </span><br><span class=\"line\"><span class=\"keyword\">where</span> t1.id <span class=\"keyword\">in</span> (</span><br><span class=\"line\">\t<span class=\"keyword\">select</span> t2.id <span class=\"keyword\">from</span> tb_dict t2 <span class=\"keyword\">where</span> t2.nature = <span class=\"string\">'v-taxi'</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>使用这条 sql 语句进行批量删除时报 “You can’t specify target table ‘t1’ for update in FROM clause” 错误，查询后得知原来 msyql 不允许在子查询的同时删除原表中的数据。下面对应的解决办法。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> t1 <span class=\"keyword\">from</span> tb_dict t1 </span><br><span class=\"line\"><span class=\"keyword\">where</span> t1.id <span class=\"keyword\">in</span> (</span><br><span class=\"line\">\t<span class=\"keyword\">select</span> t3.id <span class=\"keyword\">from</span> (</span><br><span class=\"line\">\t\t<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> tb_dict t2 <span class=\"keyword\">where</span> t2.nature = <span class=\"string\">'v-taxi'</span></span><br><span class=\"line\">\t) <span class=\"keyword\">as</span> t3</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>将子查询得到的数据封装成临时表，这时就能解决问题了。</p>\n<p><br></p>\n"},{"title":"Nginx 安装","date":"2016-09-05T16:00:00.000Z","_content":"\n## 安装编译工具及库文件\n* 切换到root用户下面\n* yum -y install make zlib zlib-devel gcc-c++ libtool  openssl openssl-devel\n\n<!-- more -->   \n\n## 安装 PCRE\n* PCRE 作用是让 Ngnix 支持 Rewrite 功能。\n* wget http://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz\n* tar zxvf pcre-8.35.tar.gz\n* cd pcre-8.35\n* ./configure\n* make && make install\n* pcre-config --version\n\n## 安装 Nginx\n* wget http://nginx.org/download/nginx-1.6.2.tar.gz\n* tar zxvf nginx-1.6.2.tar.gz\n* cd nginx-1.6.2\n* ./configure --with-http_stub_status_module --with-http_ssl_module --with-pcre\n* make && make install\n* /usr/local/nginx/sbin/nginx -v\n\n## Nginx 配置\n* 配置nginx.conf\n\n``` sh\n将/usr/local/nginx/conf/nginx.conf替换为以下内容\n\nuser  liuhaiming liuhaiming;\nworker_processes  4; # 设置值和CPU核心数一致\nerror_log /usr/local/nginx/logs/nginx_error.log notice; #日志位置和日志级别\npid        /usr/local/nginx/logs/nginx.pid;\n#Specifies the value for maximum file descriptors that can be opened by this process.\nworker_rlimit_nofile 65535;\n\nevents {\n        use epoll;\n        worker_connections 65535;\n}\n\n\nhttp {\n        include       mime.types;\n        default_type  application/octet-stream;\n\n        log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n        server_names_hash_bucket_size 128;\n        client_header_buffer_size 32k;\n        large_client_header_buffers 4 32k;\n        client_max_body_size 8m;\n\n        sendfile        on;\n        tcp_nopush on;\n        keepalive_timeout 60;\n        tcp_nodelay on;\n        fastcgi_connect_timeout 300;\n        fastcgi_send_timeout 300;\n        fastcgi_read_timeout 300;\n        fastcgi_buffer_size 64k;\n        fastcgi_buffers 4 64k;\n        fastcgi_busy_buffers_size 128k;\n        fastcgi_temp_file_write_size 128k;\n        gzip on;\n        gzip_min_length 1k;\n        gzip_buffers 4 16k;\n        gzip_http_version 1.0;\n        gzip_comp_level 2;\n        gzip_types text/plain application/x-javascript text/css application/xml;\n        gzip_vary on;\n\n        #下面是server虚拟主机的配置\n        server {\n                listen       80; # 监听端口\n                server_name  localhost; # 域名\n\n                charset utf-8;\n                access_log  logs/host.access.log  main;\n\n                error_page   500 502 503 504  /50x.html;\n                location = /50x.html {\n                        root   html;\n                }\n        }\n}\n```\n\n* 检查配置文件ngnix.conf的正确性: /usr/local/nginx/sbin/nginx -t\n* 启动 Nginx: /usr/local/nginx/sbin/nginx\n* 访问站点: http://182.92.109.136/\n\n## Nginx 其他命令\n* /usr/local/nginx/sbin/nginx -s reload            # 重新载入配置文件\n* /usr/local/nginx/sbin/nginx -s reopen            # 重启 Nginx\n* /usr/local/nginx/sbin/nginx -s stop              # 停止 Nginx\n\n## 常用指令说明\n### main全局配置\n* nginx在运行时与具体业务功能（比如http服务或者email服务代理）无关的一些参数，比如工作进程数，运行的身份等。  \n* woker_processes 4 在配置文件的顶级main部分，worker角色的工作进程的个数，master进程是接收并分配请求给worker处理。这个数值简单一点可以设置为cpu的核数(grep ^processor /proc/cpuinfo | wc -l)，也是 auto 值，如果开启了ssl和gzip更应该设置成与逻辑CPU数量一样甚至为2倍，可以减少I/O操作。如果nginx服务器还有其它服务，可以考虑适当减少。\n* worker_cpu_affinity 也是写在main部分。在高并发情况下，通过设置cpu粘性来降低由于多CPU核切换造成的寄存器等现场重建带来的性能损耗。如worker_cpu_affinity 0001 0010 0100 1000; （四核）。\n* worker_connections 2048 写在events部分。每一个worker进程能并发处理（发起）的最大连接数（包含与客户端或后端被代理服务器间等所有连接数）。nginx作为反向代理服务器，计算公式 最大连接数 = worker_processes * worker_connections/4，所以这里客户端最大连接数是1024，这个可以增到到8192都没关系，看情况而定，但不能超过后面的worker_rlimit_nofile。当nginx作为http服务器时，计算公式里面是除以2。\n* worker_rlimit_nofile 10240 写在main部分。默认是没有设置，可以限制为操作系统最大的限制65535。\n* use epoll 写在events部分。在Linux操作系统下，nginx默认使用epoll事件模型，得益于此，nginx在Linux操作系统下效率相当高。同时Nginx在OpenBSD或FreeBSD操作系统上采用类似于epoll的高效事件模型kqueue。在操作系统不支持这些高效模型时才使用select。\n\n### http服务器\n* 与提供http服务相关的一些配置参数。例如：是否使用keepalive啊，是否使用gzip进行压缩等。\n* sendfile on 开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，减少用户空间到内核空间的上下文切换。对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。\n* keepalive_timeout 65 长连接超时时间，单位是秒，这个参数很敏感，涉及浏览器的种类、后端服务器的超时设置、操作系统的设置，可以另外起一片文章了。长连接请求大量小文件的时候，可以减少重建连接的开销，但假如有大文件上传，65s内没上传完成会导致失败。如果设置时间过长，用户又多，长时间保持连接会占用大量资源。\n* send_timeout 用于指定响应客户端的超时时间。这个超时仅限于两个连接活动之间的时间，如果超过这个时间，客户端没有任何活动，Nginx将会关闭连接。\n* client_max_body_size 10m 允许客户端请求的最大单文件字节数。如果有上传较大文件，请设置它的限制值\n* client_body_buffer_size 128k 缓冲区代理缓冲用户端请求的最大字节数\n\n### 模块http_proxy\n* 这个模块实现的是nginx作为反向代理服务器的功能，包括缓存功能\n* proxy_connect_timeout 60 nginx跟后端服务器连接超时时间(代理连接超时)\n* proxy_read_timeout 60 连接成功后，与后端服务器两个成功的响应操作之间超时时间(代理接收超时)\n* proxy_buffer_size 4k 设置代理服务器（nginx）从后端realserver读取并保存用户头信息的缓冲区大小，默认与proxy_buffers大小相同，其实可以将这个指令值设的小一点\n* proxy_buffers 4 32k proxy_buffers缓冲区，nginx针对单个连接缓存来自后端realserver的响应，网页平均在32k以下的话，这样设置\n* proxy_busy_buffers_size 64k 高负荷下缓冲大小（proxy_buffers*2）\n* proxy_max_temp_file_size 当proxy_buffers放不下后端服务器的响应内容时，会将一部分保存到硬盘的临时文件中，这个值用来设置最大临时文件大小，默认1024M，它与proxy_cache没有关系。大于这个值，将从upstream服务器传回。设置为0禁用。\n* proxy_temp_file_write_size 64k 当缓存被代理的服务器响应到临时文件时，这个选项限制每次写临时文件的大小。proxy_temp_path（可以在编译的时候）指定写到哪那个目录。\n* proxy_pass，proxy_redirect见 location 部分。\n\n### 模块http_gzip\n* gzip on : 开启gzip压缩输出，减少网络传输。\n* gzip_min_length 1k ： 设置允许压缩的页面最小字节数，页面字节数从header头得content-length中进行获取。默认值是20。建议设置成大于1k的字节数，小于1k可能会越压越大。\n* gzip_buffers 4 16k ： 设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。4 16k代表以16k为单位，安装原始数据大小以16k为单位的4倍申请内存。\n* gzip_http_version 1.0 ： 用于识别 http 协议的版本，早期的浏览器不支持 Gzip 压缩，用户就会看到乱码，所以为了支持前期版本加上了这个选项，如果你用了 Nginx 的反向代理并期望也启用 Gzip 压缩的话，由于末端通信是 http/1.0，故请设置为 1.0。\n* gzip_comp_level 6 ： gzip压缩比，1压缩比最小处理速度最快，9压缩比最大但处理速度最慢(传输快但比较消耗cpu)\n* gzip_types ：匹配mime类型进行压缩，无论是否指定,”text/html”类型总是会被压缩的。\n* gzip_proxied any ： Nginx作为反向代理的时候启用，决定开启或者关闭后端服务器返回的结果是否压缩，匹配的前提是后端服务器必须要返回包含”Via”的 header头。\n* gzip_vary on ： 和http头有关系，会在响应头加个 Vary: Accept-Encoding ，可以让前端的缓存服务器缓存经过gzip压缩的页面，例如，用Squid缓存经过Nginx压缩的数据。。\n\n### server虚拟主机\n* http服务上支持若干虚拟主机。每个虚拟主机一个对应的server配置项，配置项里面包含该虚拟主机相关的配置。在提供mail服务的代理时，也可以建立若干server。每个server通过监听地址或端口来区分。\n* listen 监听端口，默认80，小于1024的要以root启动。可以为listen *:80、listen 127.0.0.1:80等形式。\n* server_name 服务器名，如localhost、www.example.com，可以通过正则匹配。\n\n### 模块http_stream\n* 这个模块通过一个简单的调度算法来实现客户端IP到后端服务器的负载均衡，upstream后接负载均衡器的名字，后端realserver以 host:port options; 方式组织在 {} 中。如果后端被代理的只有一台，也可以直接写在 proxy_pass 。\n\n### location\n* http服务中，某些特定的URL对应的一系列配置项。\n* root /var/www/html 定义服务器的默认网站根目录位置。如果locationURL匹配的是子目录或文件，root没什么作用，一般放在server指令里面或/下。\n* index index.jsp index.html index.htm 定义路径下默认访问的文件名，一般跟着root放\n* proxy_pass http:/backend 请求转向backend定义的服务器列表，即反向代理，对应upstream负载均衡器。也可以proxy_pass http://ip:port。\n\n原文链接\n* http://www.runoob.com/linux/nginx-install-setup.html\n* https://segmentfault.com/a/1190000002797601#articleHeader7\n\n<br>","source":"_posts/Nginx/nginx-install.md","raw":"title: Nginx 安装\ndate: 2016-9-6  \ntags:\n    - note\ncategories:\n    - Nginx\n---\n\n## 安装编译工具及库文件\n* 切换到root用户下面\n* yum -y install make zlib zlib-devel gcc-c++ libtool  openssl openssl-devel\n\n<!-- more -->   \n\n## 安装 PCRE\n* PCRE 作用是让 Ngnix 支持 Rewrite 功能。\n* wget http://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz\n* tar zxvf pcre-8.35.tar.gz\n* cd pcre-8.35\n* ./configure\n* make && make install\n* pcre-config --version\n\n## 安装 Nginx\n* wget http://nginx.org/download/nginx-1.6.2.tar.gz\n* tar zxvf nginx-1.6.2.tar.gz\n* cd nginx-1.6.2\n* ./configure --with-http_stub_status_module --with-http_ssl_module --with-pcre\n* make && make install\n* /usr/local/nginx/sbin/nginx -v\n\n## Nginx 配置\n* 配置nginx.conf\n\n``` sh\n将/usr/local/nginx/conf/nginx.conf替换为以下内容\n\nuser  liuhaiming liuhaiming;\nworker_processes  4; # 设置值和CPU核心数一致\nerror_log /usr/local/nginx/logs/nginx_error.log notice; #日志位置和日志级别\npid        /usr/local/nginx/logs/nginx.pid;\n#Specifies the value for maximum file descriptors that can be opened by this process.\nworker_rlimit_nofile 65535;\n\nevents {\n        use epoll;\n        worker_connections 65535;\n}\n\n\nhttp {\n        include       mime.types;\n        default_type  application/octet-stream;\n\n        log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n        server_names_hash_bucket_size 128;\n        client_header_buffer_size 32k;\n        large_client_header_buffers 4 32k;\n        client_max_body_size 8m;\n\n        sendfile        on;\n        tcp_nopush on;\n        keepalive_timeout 60;\n        tcp_nodelay on;\n        fastcgi_connect_timeout 300;\n        fastcgi_send_timeout 300;\n        fastcgi_read_timeout 300;\n        fastcgi_buffer_size 64k;\n        fastcgi_buffers 4 64k;\n        fastcgi_busy_buffers_size 128k;\n        fastcgi_temp_file_write_size 128k;\n        gzip on;\n        gzip_min_length 1k;\n        gzip_buffers 4 16k;\n        gzip_http_version 1.0;\n        gzip_comp_level 2;\n        gzip_types text/plain application/x-javascript text/css application/xml;\n        gzip_vary on;\n\n        #下面是server虚拟主机的配置\n        server {\n                listen       80; # 监听端口\n                server_name  localhost; # 域名\n\n                charset utf-8;\n                access_log  logs/host.access.log  main;\n\n                error_page   500 502 503 504  /50x.html;\n                location = /50x.html {\n                        root   html;\n                }\n        }\n}\n```\n\n* 检查配置文件ngnix.conf的正确性: /usr/local/nginx/sbin/nginx -t\n* 启动 Nginx: /usr/local/nginx/sbin/nginx\n* 访问站点: http://182.92.109.136/\n\n## Nginx 其他命令\n* /usr/local/nginx/sbin/nginx -s reload            # 重新载入配置文件\n* /usr/local/nginx/sbin/nginx -s reopen            # 重启 Nginx\n* /usr/local/nginx/sbin/nginx -s stop              # 停止 Nginx\n\n## 常用指令说明\n### main全局配置\n* nginx在运行时与具体业务功能（比如http服务或者email服务代理）无关的一些参数，比如工作进程数，运行的身份等。  \n* woker_processes 4 在配置文件的顶级main部分，worker角色的工作进程的个数，master进程是接收并分配请求给worker处理。这个数值简单一点可以设置为cpu的核数(grep ^processor /proc/cpuinfo | wc -l)，也是 auto 值，如果开启了ssl和gzip更应该设置成与逻辑CPU数量一样甚至为2倍，可以减少I/O操作。如果nginx服务器还有其它服务，可以考虑适当减少。\n* worker_cpu_affinity 也是写在main部分。在高并发情况下，通过设置cpu粘性来降低由于多CPU核切换造成的寄存器等现场重建带来的性能损耗。如worker_cpu_affinity 0001 0010 0100 1000; （四核）。\n* worker_connections 2048 写在events部分。每一个worker进程能并发处理（发起）的最大连接数（包含与客户端或后端被代理服务器间等所有连接数）。nginx作为反向代理服务器，计算公式 最大连接数 = worker_processes * worker_connections/4，所以这里客户端最大连接数是1024，这个可以增到到8192都没关系，看情况而定，但不能超过后面的worker_rlimit_nofile。当nginx作为http服务器时，计算公式里面是除以2。\n* worker_rlimit_nofile 10240 写在main部分。默认是没有设置，可以限制为操作系统最大的限制65535。\n* use epoll 写在events部分。在Linux操作系统下，nginx默认使用epoll事件模型，得益于此，nginx在Linux操作系统下效率相当高。同时Nginx在OpenBSD或FreeBSD操作系统上采用类似于epoll的高效事件模型kqueue。在操作系统不支持这些高效模型时才使用select。\n\n### http服务器\n* 与提供http服务相关的一些配置参数。例如：是否使用keepalive啊，是否使用gzip进行压缩等。\n* sendfile on 开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，减少用户空间到内核空间的上下文切换。对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。\n* keepalive_timeout 65 长连接超时时间，单位是秒，这个参数很敏感，涉及浏览器的种类、后端服务器的超时设置、操作系统的设置，可以另外起一片文章了。长连接请求大量小文件的时候，可以减少重建连接的开销，但假如有大文件上传，65s内没上传完成会导致失败。如果设置时间过长，用户又多，长时间保持连接会占用大量资源。\n* send_timeout 用于指定响应客户端的超时时间。这个超时仅限于两个连接活动之间的时间，如果超过这个时间，客户端没有任何活动，Nginx将会关闭连接。\n* client_max_body_size 10m 允许客户端请求的最大单文件字节数。如果有上传较大文件，请设置它的限制值\n* client_body_buffer_size 128k 缓冲区代理缓冲用户端请求的最大字节数\n\n### 模块http_proxy\n* 这个模块实现的是nginx作为反向代理服务器的功能，包括缓存功能\n* proxy_connect_timeout 60 nginx跟后端服务器连接超时时间(代理连接超时)\n* proxy_read_timeout 60 连接成功后，与后端服务器两个成功的响应操作之间超时时间(代理接收超时)\n* proxy_buffer_size 4k 设置代理服务器（nginx）从后端realserver读取并保存用户头信息的缓冲区大小，默认与proxy_buffers大小相同，其实可以将这个指令值设的小一点\n* proxy_buffers 4 32k proxy_buffers缓冲区，nginx针对单个连接缓存来自后端realserver的响应，网页平均在32k以下的话，这样设置\n* proxy_busy_buffers_size 64k 高负荷下缓冲大小（proxy_buffers*2）\n* proxy_max_temp_file_size 当proxy_buffers放不下后端服务器的响应内容时，会将一部分保存到硬盘的临时文件中，这个值用来设置最大临时文件大小，默认1024M，它与proxy_cache没有关系。大于这个值，将从upstream服务器传回。设置为0禁用。\n* proxy_temp_file_write_size 64k 当缓存被代理的服务器响应到临时文件时，这个选项限制每次写临时文件的大小。proxy_temp_path（可以在编译的时候）指定写到哪那个目录。\n* proxy_pass，proxy_redirect见 location 部分。\n\n### 模块http_gzip\n* gzip on : 开启gzip压缩输出，减少网络传输。\n* gzip_min_length 1k ： 设置允许压缩的页面最小字节数，页面字节数从header头得content-length中进行获取。默认值是20。建议设置成大于1k的字节数，小于1k可能会越压越大。\n* gzip_buffers 4 16k ： 设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。4 16k代表以16k为单位，安装原始数据大小以16k为单位的4倍申请内存。\n* gzip_http_version 1.0 ： 用于识别 http 协议的版本，早期的浏览器不支持 Gzip 压缩，用户就会看到乱码，所以为了支持前期版本加上了这个选项，如果你用了 Nginx 的反向代理并期望也启用 Gzip 压缩的话，由于末端通信是 http/1.0，故请设置为 1.0。\n* gzip_comp_level 6 ： gzip压缩比，1压缩比最小处理速度最快，9压缩比最大但处理速度最慢(传输快但比较消耗cpu)\n* gzip_types ：匹配mime类型进行压缩，无论是否指定,”text/html”类型总是会被压缩的。\n* gzip_proxied any ： Nginx作为反向代理的时候启用，决定开启或者关闭后端服务器返回的结果是否压缩，匹配的前提是后端服务器必须要返回包含”Via”的 header头。\n* gzip_vary on ： 和http头有关系，会在响应头加个 Vary: Accept-Encoding ，可以让前端的缓存服务器缓存经过gzip压缩的页面，例如，用Squid缓存经过Nginx压缩的数据。。\n\n### server虚拟主机\n* http服务上支持若干虚拟主机。每个虚拟主机一个对应的server配置项，配置项里面包含该虚拟主机相关的配置。在提供mail服务的代理时，也可以建立若干server。每个server通过监听地址或端口来区分。\n* listen 监听端口，默认80，小于1024的要以root启动。可以为listen *:80、listen 127.0.0.1:80等形式。\n* server_name 服务器名，如localhost、www.example.com，可以通过正则匹配。\n\n### 模块http_stream\n* 这个模块通过一个简单的调度算法来实现客户端IP到后端服务器的负载均衡，upstream后接负载均衡器的名字，后端realserver以 host:port options; 方式组织在 {} 中。如果后端被代理的只有一台，也可以直接写在 proxy_pass 。\n\n### location\n* http服务中，某些特定的URL对应的一系列配置项。\n* root /var/www/html 定义服务器的默认网站根目录位置。如果locationURL匹配的是子目录或文件，root没什么作用，一般放在server指令里面或/下。\n* index index.jsp index.html index.htm 定义路径下默认访问的文件名，一般跟着root放\n* proxy_pass http:/backend 请求转向backend定义的服务器列表，即反向代理，对应upstream负载均衡器。也可以proxy_pass http://ip:port。\n\n原文链接\n* http://www.runoob.com/linux/nginx-install-setup.html\n* https://segmentfault.com/a/1190000002797601#articleHeader7\n\n<br>","slug":"Nginx/nginx-install","published":1,"updated":"2018-04-05T11:32:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfoy713a001yaciepmknbdtc","content":"<h2 id=\"安装编译工具及库文件\"><a href=\"#安装编译工具及库文件\" class=\"headerlink\" title=\"安装编译工具及库文件\"></a>安装编译工具及库文件</h2><ul>\n<li>切换到root用户下面</li>\n<li>yum -y install make zlib zlib-devel gcc-c++ libtool  openssl openssl-devel</li>\n</ul>\n<a id=\"more\"></a>   \n<h2 id=\"安装-PCRE\"><a href=\"#安装-PCRE\" class=\"headerlink\" title=\"安装 PCRE\"></a>安装 PCRE</h2><ul>\n<li>PCRE 作用是让 Ngnix 支持 Rewrite 功能。</li>\n<li>wget <a href=\"http://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz\" target=\"_blank\" rel=\"noopener\">http://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz</a></li>\n<li>tar zxvf pcre-8.35.tar.gz</li>\n<li>cd pcre-8.35</li>\n<li>./configure</li>\n<li>make &amp;&amp; make install</li>\n<li>pcre-config –version</li>\n</ul>\n<h2 id=\"安装-Nginx\"><a href=\"#安装-Nginx\" class=\"headerlink\" title=\"安装 Nginx\"></a>安装 Nginx</h2><ul>\n<li>wget <a href=\"http://nginx.org/download/nginx-1.6.2.tar.gz\" target=\"_blank\" rel=\"noopener\">http://nginx.org/download/nginx-1.6.2.tar.gz</a></li>\n<li>tar zxvf nginx-1.6.2.tar.gz</li>\n<li>cd nginx-1.6.2</li>\n<li>./configure –with-http_stub_status_module –with-http_ssl_module –with-pcre</li>\n<li>make &amp;&amp; make install</li>\n<li>/usr/local/nginx/sbin/nginx -v</li>\n</ul>\n<h2 id=\"Nginx-配置\"><a href=\"#Nginx-配置\" class=\"headerlink\" title=\"Nginx 配置\"></a>Nginx 配置</h2><ul>\n<li>配置nginx.conf</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将/usr/<span class=\"built_in\">local</span>/nginx/conf/nginx.conf替换为以下内容</span><br><span class=\"line\"></span><br><span class=\"line\">user  liuhaiming liuhaiming;</span><br><span class=\"line\">worker_processes  4; <span class=\"comment\"># 设置值和CPU核心数一致</span></span><br><span class=\"line\">error_log /usr/<span class=\"built_in\">local</span>/nginx/logs/nginx_error.log notice; <span class=\"comment\">#日志位置和日志级别</span></span><br><span class=\"line\">pid        /usr/<span class=\"built_in\">local</span>/nginx/logs/nginx.pid;</span><br><span class=\"line\"><span class=\"comment\">#Specifies the value for maximum file descriptors that can be opened by this process.</span></span><br><span class=\"line\">worker_rlimit_nofile 65535;</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">        use epoll;</span><br><span class=\"line\">        worker_connections 65535;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">        include       mime.types;</span><br><span class=\"line\">        default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">        log_format  main  <span class=\"string\">'$remote_addr - $remote_user [$time_local] \"$request\" '</span></span><br><span class=\"line\">                      <span class=\"string\">'$status $body_bytes_sent \"$http_referer\" '</span></span><br><span class=\"line\">                      <span class=\"string\">'\"$http_user_agent\" \"$http_x_forwarded_for\"'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        server_names_hash_bucket_size 128;</span><br><span class=\"line\">        client_header_buffer_size 32k;</span><br><span class=\"line\">        large_client_header_buffers 4 32k;</span><br><span class=\"line\">        client_max_body_size 8m;</span><br><span class=\"line\"></span><br><span class=\"line\">        sendfile        on;</span><br><span class=\"line\">        tcp_nopush on;</span><br><span class=\"line\">        keepalive_timeout 60;</span><br><span class=\"line\">        tcp_nodelay on;</span><br><span class=\"line\">        fastcgi_connect_timeout 300;</span><br><span class=\"line\">        fastcgi_send_timeout 300;</span><br><span class=\"line\">        fastcgi_read_timeout 300;</span><br><span class=\"line\">        fastcgi_buffer_size 64k;</span><br><span class=\"line\">        fastcgi_buffers 4 64k;</span><br><span class=\"line\">        fastcgi_busy_buffers_size 128k;</span><br><span class=\"line\">        fastcgi_temp_file_write_size 128k;</span><br><span class=\"line\">        gzip on;</span><br><span class=\"line\">        gzip_min_length 1k;</span><br><span class=\"line\">        gzip_buffers 4 16k;</span><br><span class=\"line\">        gzip_http_version 1.0;</span><br><span class=\"line\">        gzip_comp_level 2;</span><br><span class=\"line\">        gzip_types text/plain application/x-javascript text/css application/xml;</span><br><span class=\"line\">        gzip_vary on;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#下面是server虚拟主机的配置</span></span><br><span class=\"line\">        server &#123;</span><br><span class=\"line\">                listen       80; <span class=\"comment\"># 监听端口</span></span><br><span class=\"line\">                server_name  localhost; <span class=\"comment\"># 域名</span></span><br><span class=\"line\"></span><br><span class=\"line\">                charset utf-8;</span><br><span class=\"line\">                access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">                error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">                location = /50x.html &#123;</span><br><span class=\"line\">                        root   html;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>检查配置文件ngnix.conf的正确性: /usr/local/nginx/sbin/nginx -t</li>\n<li>启动 Nginx: /usr/local/nginx/sbin/nginx</li>\n<li>访问站点: <a href=\"http://182.92.109.136/\" target=\"_blank\" rel=\"noopener\">http://182.92.109.136/</a></li>\n</ul>\n<h2 id=\"Nginx-其他命令\"><a href=\"#Nginx-其他命令\" class=\"headerlink\" title=\"Nginx 其他命令\"></a>Nginx 其他命令</h2><ul>\n<li>/usr/local/nginx/sbin/nginx -s reload            # 重新载入配置文件</li>\n<li>/usr/local/nginx/sbin/nginx -s reopen            # 重启 Nginx</li>\n<li>/usr/local/nginx/sbin/nginx -s stop              # 停止 Nginx</li>\n</ul>\n<h2 id=\"常用指令说明\"><a href=\"#常用指令说明\" class=\"headerlink\" title=\"常用指令说明\"></a>常用指令说明</h2><h3 id=\"main全局配置\"><a href=\"#main全局配置\" class=\"headerlink\" title=\"main全局配置\"></a>main全局配置</h3><ul>\n<li>nginx在运行时与具体业务功能（比如http服务或者email服务代理）无关的一些参数，比如工作进程数，运行的身份等。  </li>\n<li>woker_processes 4 在配置文件的顶级main部分，worker角色的工作进程的个数，master进程是接收并分配请求给worker处理。这个数值简单一点可以设置为cpu的核数(grep ^processor /proc/cpuinfo | wc -l)，也是 auto 值，如果开启了ssl和gzip更应该设置成与逻辑CPU数量一样甚至为2倍，可以减少I/O操作。如果nginx服务器还有其它服务，可以考虑适当减少。</li>\n<li>worker_cpu_affinity 也是写在main部分。在高并发情况下，通过设置cpu粘性来降低由于多CPU核切换造成的寄存器等现场重建带来的性能损耗。如worker_cpu_affinity 0001 0010 0100 1000; （四核）。</li>\n<li>worker_connections 2048 写在events部分。每一个worker进程能并发处理（发起）的最大连接数（包含与客户端或后端被代理服务器间等所有连接数）。nginx作为反向代理服务器，计算公式 最大连接数 = worker_processes * worker_connections/4，所以这里客户端最大连接数是1024，这个可以增到到8192都没关系，看情况而定，但不能超过后面的worker_rlimit_nofile。当nginx作为http服务器时，计算公式里面是除以2。</li>\n<li>worker_rlimit_nofile 10240 写在main部分。默认是没有设置，可以限制为操作系统最大的限制65535。</li>\n<li>use epoll 写在events部分。在Linux操作系统下，nginx默认使用epoll事件模型，得益于此，nginx在Linux操作系统下效率相当高。同时Nginx在OpenBSD或FreeBSD操作系统上采用类似于epoll的高效事件模型kqueue。在操作系统不支持这些高效模型时才使用select。</li>\n</ul>\n<h3 id=\"http服务器\"><a href=\"#http服务器\" class=\"headerlink\" title=\"http服务器\"></a>http服务器</h3><ul>\n<li>与提供http服务相关的一些配置参数。例如：是否使用keepalive啊，是否使用gzip进行压缩等。</li>\n<li>sendfile on 开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，减少用户空间到内核空间的上下文切换。对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。</li>\n<li>keepalive_timeout 65 长连接超时时间，单位是秒，这个参数很敏感，涉及浏览器的种类、后端服务器的超时设置、操作系统的设置，可以另外起一片文章了。长连接请求大量小文件的时候，可以减少重建连接的开销，但假如有大文件上传，65s内没上传完成会导致失败。如果设置时间过长，用户又多，长时间保持连接会占用大量资源。</li>\n<li>send_timeout 用于指定响应客户端的超时时间。这个超时仅限于两个连接活动之间的时间，如果超过这个时间，客户端没有任何活动，Nginx将会关闭连接。</li>\n<li>client_max_body_size 10m 允许客户端请求的最大单文件字节数。如果有上传较大文件，请设置它的限制值</li>\n<li>client_body_buffer_size 128k 缓冲区代理缓冲用户端请求的最大字节数</li>\n</ul>\n<h3 id=\"模块http-proxy\"><a href=\"#模块http-proxy\" class=\"headerlink\" title=\"模块http_proxy\"></a>模块http_proxy</h3><ul>\n<li>这个模块实现的是nginx作为反向代理服务器的功能，包括缓存功能</li>\n<li>proxy_connect_timeout 60 nginx跟后端服务器连接超时时间(代理连接超时)</li>\n<li>proxy_read_timeout 60 连接成功后，与后端服务器两个成功的响应操作之间超时时间(代理接收超时)</li>\n<li>proxy_buffer_size 4k 设置代理服务器（nginx）从后端realserver读取并保存用户头信息的缓冲区大小，默认与proxy_buffers大小相同，其实可以将这个指令值设的小一点</li>\n<li>proxy_buffers 4 32k proxy_buffers缓冲区，nginx针对单个连接缓存来自后端realserver的响应，网页平均在32k以下的话，这样设置</li>\n<li>proxy_busy_buffers_size 64k 高负荷下缓冲大小（proxy_buffers*2）</li>\n<li>proxy_max_temp_file_size 当proxy_buffers放不下后端服务器的响应内容时，会将一部分保存到硬盘的临时文件中，这个值用来设置最大临时文件大小，默认1024M，它与proxy_cache没有关系。大于这个值，将从upstream服务器传回。设置为0禁用。</li>\n<li>proxy_temp_file_write_size 64k 当缓存被代理的服务器响应到临时文件时，这个选项限制每次写临时文件的大小。proxy_temp_path（可以在编译的时候）指定写到哪那个目录。</li>\n<li>proxy_pass，proxy_redirect见 location 部分。</li>\n</ul>\n<h3 id=\"模块http-gzip\"><a href=\"#模块http-gzip\" class=\"headerlink\" title=\"模块http_gzip\"></a>模块http_gzip</h3><ul>\n<li>gzip on : 开启gzip压缩输出，减少网络传输。</li>\n<li>gzip_min_length 1k ： 设置允许压缩的页面最小字节数，页面字节数从header头得content-length中进行获取。默认值是20。建议设置成大于1k的字节数，小于1k可能会越压越大。</li>\n<li>gzip_buffers 4 16k ： 设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。4 16k代表以16k为单位，安装原始数据大小以16k为单位的4倍申请内存。</li>\n<li>gzip_http_version 1.0 ： 用于识别 http 协议的版本，早期的浏览器不支持 Gzip 压缩，用户就会看到乱码，所以为了支持前期版本加上了这个选项，如果你用了 Nginx 的反向代理并期望也启用 Gzip 压缩的话，由于末端通信是 http/1.0，故请设置为 1.0。</li>\n<li>gzip_comp_level 6 ： gzip压缩比，1压缩比最小处理速度最快，9压缩比最大但处理速度最慢(传输快但比较消耗cpu)</li>\n<li>gzip_types ：匹配mime类型进行压缩，无论是否指定,”text/html”类型总是会被压缩的。</li>\n<li>gzip_proxied any ： Nginx作为反向代理的时候启用，决定开启或者关闭后端服务器返回的结果是否压缩，匹配的前提是后端服务器必须要返回包含”Via”的 header头。</li>\n<li>gzip_vary on ： 和http头有关系，会在响应头加个 Vary: Accept-Encoding ，可以让前端的缓存服务器缓存经过gzip压缩的页面，例如，用Squid缓存经过Nginx压缩的数据。。</li>\n</ul>\n<h3 id=\"server虚拟主机\"><a href=\"#server虚拟主机\" class=\"headerlink\" title=\"server虚拟主机\"></a>server虚拟主机</h3><ul>\n<li>http服务上支持若干虚拟主机。每个虚拟主机一个对应的server配置项，配置项里面包含该虚拟主机相关的配置。在提供mail服务的代理时，也可以建立若干server。每个server通过监听地址或端口来区分。</li>\n<li>listen 监听端口，默认80，小于1024的要以root启动。可以为listen *:80、listen 127.0.0.1:80等形式。</li>\n<li>server_name 服务器名，如localhost、<a href=\"http://www.example.com，可以通过正则匹配。\" target=\"_blank\" rel=\"noopener\">www.example.com，可以通过正则匹配。</a></li>\n</ul>\n<h3 id=\"模块http-stream\"><a href=\"#模块http-stream\" class=\"headerlink\" title=\"模块http_stream\"></a>模块http_stream</h3><ul>\n<li>这个模块通过一个简单的调度算法来实现客户端IP到后端服务器的负载均衡，upstream后接负载均衡器的名字，后端realserver以 host:port options; 方式组织在 {} 中。如果后端被代理的只有一台，也可以直接写在 proxy_pass 。</li>\n</ul>\n<h3 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"location\"></a>location</h3><ul>\n<li>http服务中，某些特定的URL对应的一系列配置项。</li>\n<li>root /var/www/html 定义服务器的默认网站根目录位置。如果locationURL匹配的是子目录或文件，root没什么作用，一般放在server指令里面或/下。</li>\n<li>index index.jsp index.html index.htm 定义路径下默认访问的文件名，一般跟着root放</li>\n<li>proxy_pass http:/backend 请求转向backend定义的服务器列表，即反向代理，对应upstream负载均衡器。也可以proxy_pass <a href=\"http://ip:port。\" target=\"_blank\" rel=\"noopener\">http://ip:port。</a></li>\n</ul>\n<p>原文链接</p>\n<ul>\n<li><a href=\"http://www.runoob.com/linux/nginx-install-setup.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/linux/nginx-install-setup.html</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000002797601#articleHeader7\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000002797601#articleHeader7</a></li>\n</ul>\n<p><br></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"安装编译工具及库文件\"><a href=\"#安装编译工具及库文件\" class=\"headerlink\" title=\"安装编译工具及库文件\"></a>安装编译工具及库文件</h2><ul>\n<li>切换到root用户下面</li>\n<li>yum -y install make zlib zlib-devel gcc-c++ libtool  openssl openssl-devel</li>\n</ul>","more":"<h2 id=\"安装-PCRE\"><a href=\"#安装-PCRE\" class=\"headerlink\" title=\"安装 PCRE\"></a>安装 PCRE</h2><ul>\n<li>PCRE 作用是让 Ngnix 支持 Rewrite 功能。</li>\n<li>wget <a href=\"http://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz\" target=\"_blank\" rel=\"noopener\">http://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz</a></li>\n<li>tar zxvf pcre-8.35.tar.gz</li>\n<li>cd pcre-8.35</li>\n<li>./configure</li>\n<li>make &amp;&amp; make install</li>\n<li>pcre-config –version</li>\n</ul>\n<h2 id=\"安装-Nginx\"><a href=\"#安装-Nginx\" class=\"headerlink\" title=\"安装 Nginx\"></a>安装 Nginx</h2><ul>\n<li>wget <a href=\"http://nginx.org/download/nginx-1.6.2.tar.gz\" target=\"_blank\" rel=\"noopener\">http://nginx.org/download/nginx-1.6.2.tar.gz</a></li>\n<li>tar zxvf nginx-1.6.2.tar.gz</li>\n<li>cd nginx-1.6.2</li>\n<li>./configure –with-http_stub_status_module –with-http_ssl_module –with-pcre</li>\n<li>make &amp;&amp; make install</li>\n<li>/usr/local/nginx/sbin/nginx -v</li>\n</ul>\n<h2 id=\"Nginx-配置\"><a href=\"#Nginx-配置\" class=\"headerlink\" title=\"Nginx 配置\"></a>Nginx 配置</h2><ul>\n<li>配置nginx.conf</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将/usr/<span class=\"built_in\">local</span>/nginx/conf/nginx.conf替换为以下内容</span><br><span class=\"line\"></span><br><span class=\"line\">user  liuhaiming liuhaiming;</span><br><span class=\"line\">worker_processes  4; <span class=\"comment\"># 设置值和CPU核心数一致</span></span><br><span class=\"line\">error_log /usr/<span class=\"built_in\">local</span>/nginx/logs/nginx_error.log notice; <span class=\"comment\">#日志位置和日志级别</span></span><br><span class=\"line\">pid        /usr/<span class=\"built_in\">local</span>/nginx/logs/nginx.pid;</span><br><span class=\"line\"><span class=\"comment\">#Specifies the value for maximum file descriptors that can be opened by this process.</span></span><br><span class=\"line\">worker_rlimit_nofile 65535;</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">        use epoll;</span><br><span class=\"line\">        worker_connections 65535;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">        include       mime.types;</span><br><span class=\"line\">        default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">        log_format  main  <span class=\"string\">'$remote_addr - $remote_user [$time_local] \"$request\" '</span></span><br><span class=\"line\">                      <span class=\"string\">'$status $body_bytes_sent \"$http_referer\" '</span></span><br><span class=\"line\">                      <span class=\"string\">'\"$http_user_agent\" \"$http_x_forwarded_for\"'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        server_names_hash_bucket_size 128;</span><br><span class=\"line\">        client_header_buffer_size 32k;</span><br><span class=\"line\">        large_client_header_buffers 4 32k;</span><br><span class=\"line\">        client_max_body_size 8m;</span><br><span class=\"line\"></span><br><span class=\"line\">        sendfile        on;</span><br><span class=\"line\">        tcp_nopush on;</span><br><span class=\"line\">        keepalive_timeout 60;</span><br><span class=\"line\">        tcp_nodelay on;</span><br><span class=\"line\">        fastcgi_connect_timeout 300;</span><br><span class=\"line\">        fastcgi_send_timeout 300;</span><br><span class=\"line\">        fastcgi_read_timeout 300;</span><br><span class=\"line\">        fastcgi_buffer_size 64k;</span><br><span class=\"line\">        fastcgi_buffers 4 64k;</span><br><span class=\"line\">        fastcgi_busy_buffers_size 128k;</span><br><span class=\"line\">        fastcgi_temp_file_write_size 128k;</span><br><span class=\"line\">        gzip on;</span><br><span class=\"line\">        gzip_min_length 1k;</span><br><span class=\"line\">        gzip_buffers 4 16k;</span><br><span class=\"line\">        gzip_http_version 1.0;</span><br><span class=\"line\">        gzip_comp_level 2;</span><br><span class=\"line\">        gzip_types text/plain application/x-javascript text/css application/xml;</span><br><span class=\"line\">        gzip_vary on;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#下面是server虚拟主机的配置</span></span><br><span class=\"line\">        server &#123;</span><br><span class=\"line\">                listen       80; <span class=\"comment\"># 监听端口</span></span><br><span class=\"line\">                server_name  localhost; <span class=\"comment\"># 域名</span></span><br><span class=\"line\"></span><br><span class=\"line\">                charset utf-8;</span><br><span class=\"line\">                access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">                error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">                location = /50x.html &#123;</span><br><span class=\"line\">                        root   html;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>检查配置文件ngnix.conf的正确性: /usr/local/nginx/sbin/nginx -t</li>\n<li>启动 Nginx: /usr/local/nginx/sbin/nginx</li>\n<li>访问站点: <a href=\"http://182.92.109.136/\" target=\"_blank\" rel=\"noopener\">http://182.92.109.136/</a></li>\n</ul>\n<h2 id=\"Nginx-其他命令\"><a href=\"#Nginx-其他命令\" class=\"headerlink\" title=\"Nginx 其他命令\"></a>Nginx 其他命令</h2><ul>\n<li>/usr/local/nginx/sbin/nginx -s reload            # 重新载入配置文件</li>\n<li>/usr/local/nginx/sbin/nginx -s reopen            # 重启 Nginx</li>\n<li>/usr/local/nginx/sbin/nginx -s stop              # 停止 Nginx</li>\n</ul>\n<h2 id=\"常用指令说明\"><a href=\"#常用指令说明\" class=\"headerlink\" title=\"常用指令说明\"></a>常用指令说明</h2><h3 id=\"main全局配置\"><a href=\"#main全局配置\" class=\"headerlink\" title=\"main全局配置\"></a>main全局配置</h3><ul>\n<li>nginx在运行时与具体业务功能（比如http服务或者email服务代理）无关的一些参数，比如工作进程数，运行的身份等。  </li>\n<li>woker_processes 4 在配置文件的顶级main部分，worker角色的工作进程的个数，master进程是接收并分配请求给worker处理。这个数值简单一点可以设置为cpu的核数(grep ^processor /proc/cpuinfo | wc -l)，也是 auto 值，如果开启了ssl和gzip更应该设置成与逻辑CPU数量一样甚至为2倍，可以减少I/O操作。如果nginx服务器还有其它服务，可以考虑适当减少。</li>\n<li>worker_cpu_affinity 也是写在main部分。在高并发情况下，通过设置cpu粘性来降低由于多CPU核切换造成的寄存器等现场重建带来的性能损耗。如worker_cpu_affinity 0001 0010 0100 1000; （四核）。</li>\n<li>worker_connections 2048 写在events部分。每一个worker进程能并发处理（发起）的最大连接数（包含与客户端或后端被代理服务器间等所有连接数）。nginx作为反向代理服务器，计算公式 最大连接数 = worker_processes * worker_connections/4，所以这里客户端最大连接数是1024，这个可以增到到8192都没关系，看情况而定，但不能超过后面的worker_rlimit_nofile。当nginx作为http服务器时，计算公式里面是除以2。</li>\n<li>worker_rlimit_nofile 10240 写在main部分。默认是没有设置，可以限制为操作系统最大的限制65535。</li>\n<li>use epoll 写在events部分。在Linux操作系统下，nginx默认使用epoll事件模型，得益于此，nginx在Linux操作系统下效率相当高。同时Nginx在OpenBSD或FreeBSD操作系统上采用类似于epoll的高效事件模型kqueue。在操作系统不支持这些高效模型时才使用select。</li>\n</ul>\n<h3 id=\"http服务器\"><a href=\"#http服务器\" class=\"headerlink\" title=\"http服务器\"></a>http服务器</h3><ul>\n<li>与提供http服务相关的一些配置参数。例如：是否使用keepalive啊，是否使用gzip进行压缩等。</li>\n<li>sendfile on 开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，减少用户空间到内核空间的上下文切换。对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。</li>\n<li>keepalive_timeout 65 长连接超时时间，单位是秒，这个参数很敏感，涉及浏览器的种类、后端服务器的超时设置、操作系统的设置，可以另外起一片文章了。长连接请求大量小文件的时候，可以减少重建连接的开销，但假如有大文件上传，65s内没上传完成会导致失败。如果设置时间过长，用户又多，长时间保持连接会占用大量资源。</li>\n<li>send_timeout 用于指定响应客户端的超时时间。这个超时仅限于两个连接活动之间的时间，如果超过这个时间，客户端没有任何活动，Nginx将会关闭连接。</li>\n<li>client_max_body_size 10m 允许客户端请求的最大单文件字节数。如果有上传较大文件，请设置它的限制值</li>\n<li>client_body_buffer_size 128k 缓冲区代理缓冲用户端请求的最大字节数</li>\n</ul>\n<h3 id=\"模块http-proxy\"><a href=\"#模块http-proxy\" class=\"headerlink\" title=\"模块http_proxy\"></a>模块http_proxy</h3><ul>\n<li>这个模块实现的是nginx作为反向代理服务器的功能，包括缓存功能</li>\n<li>proxy_connect_timeout 60 nginx跟后端服务器连接超时时间(代理连接超时)</li>\n<li>proxy_read_timeout 60 连接成功后，与后端服务器两个成功的响应操作之间超时时间(代理接收超时)</li>\n<li>proxy_buffer_size 4k 设置代理服务器（nginx）从后端realserver读取并保存用户头信息的缓冲区大小，默认与proxy_buffers大小相同，其实可以将这个指令值设的小一点</li>\n<li>proxy_buffers 4 32k proxy_buffers缓冲区，nginx针对单个连接缓存来自后端realserver的响应，网页平均在32k以下的话，这样设置</li>\n<li>proxy_busy_buffers_size 64k 高负荷下缓冲大小（proxy_buffers*2）</li>\n<li>proxy_max_temp_file_size 当proxy_buffers放不下后端服务器的响应内容时，会将一部分保存到硬盘的临时文件中，这个值用来设置最大临时文件大小，默认1024M，它与proxy_cache没有关系。大于这个值，将从upstream服务器传回。设置为0禁用。</li>\n<li>proxy_temp_file_write_size 64k 当缓存被代理的服务器响应到临时文件时，这个选项限制每次写临时文件的大小。proxy_temp_path（可以在编译的时候）指定写到哪那个目录。</li>\n<li>proxy_pass，proxy_redirect见 location 部分。</li>\n</ul>\n<h3 id=\"模块http-gzip\"><a href=\"#模块http-gzip\" class=\"headerlink\" title=\"模块http_gzip\"></a>模块http_gzip</h3><ul>\n<li>gzip on : 开启gzip压缩输出，减少网络传输。</li>\n<li>gzip_min_length 1k ： 设置允许压缩的页面最小字节数，页面字节数从header头得content-length中进行获取。默认值是20。建议设置成大于1k的字节数，小于1k可能会越压越大。</li>\n<li>gzip_buffers 4 16k ： 设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。4 16k代表以16k为单位，安装原始数据大小以16k为单位的4倍申请内存。</li>\n<li>gzip_http_version 1.0 ： 用于识别 http 协议的版本，早期的浏览器不支持 Gzip 压缩，用户就会看到乱码，所以为了支持前期版本加上了这个选项，如果你用了 Nginx 的反向代理并期望也启用 Gzip 压缩的话，由于末端通信是 http/1.0，故请设置为 1.0。</li>\n<li>gzip_comp_level 6 ： gzip压缩比，1压缩比最小处理速度最快，9压缩比最大但处理速度最慢(传输快但比较消耗cpu)</li>\n<li>gzip_types ：匹配mime类型进行压缩，无论是否指定,”text/html”类型总是会被压缩的。</li>\n<li>gzip_proxied any ： Nginx作为反向代理的时候启用，决定开启或者关闭后端服务器返回的结果是否压缩，匹配的前提是后端服务器必须要返回包含”Via”的 header头。</li>\n<li>gzip_vary on ： 和http头有关系，会在响应头加个 Vary: Accept-Encoding ，可以让前端的缓存服务器缓存经过gzip压缩的页面，例如，用Squid缓存经过Nginx压缩的数据。。</li>\n</ul>\n<h3 id=\"server虚拟主机\"><a href=\"#server虚拟主机\" class=\"headerlink\" title=\"server虚拟主机\"></a>server虚拟主机</h3><ul>\n<li>http服务上支持若干虚拟主机。每个虚拟主机一个对应的server配置项，配置项里面包含该虚拟主机相关的配置。在提供mail服务的代理时，也可以建立若干server。每个server通过监听地址或端口来区分。</li>\n<li>listen 监听端口，默认80，小于1024的要以root启动。可以为listen *:80、listen 127.0.0.1:80等形式。</li>\n<li>server_name 服务器名，如localhost、<a href=\"http://www.example.com，可以通过正则匹配。\" target=\"_blank\" rel=\"noopener\">www.example.com，可以通过正则匹配。</a></li>\n</ul>\n<h3 id=\"模块http-stream\"><a href=\"#模块http-stream\" class=\"headerlink\" title=\"模块http_stream\"></a>模块http_stream</h3><ul>\n<li>这个模块通过一个简单的调度算法来实现客户端IP到后端服务器的负载均衡，upstream后接负载均衡器的名字，后端realserver以 host:port options; 方式组织在 {} 中。如果后端被代理的只有一台，也可以直接写在 proxy_pass 。</li>\n</ul>\n<h3 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"location\"></a>location</h3><ul>\n<li>http服务中，某些特定的URL对应的一系列配置项。</li>\n<li>root /var/www/html 定义服务器的默认网站根目录位置。如果locationURL匹配的是子目录或文件，root没什么作用，一般放在server指令里面或/下。</li>\n<li>index index.jsp index.html index.htm 定义路径下默认访问的文件名，一般跟着root放</li>\n<li>proxy_pass http:/backend 请求转向backend定义的服务器列表，即反向代理，对应upstream负载均衡器。也可以proxy_pass <a href=\"http://ip:port。\" target=\"_blank\" rel=\"noopener\">http://ip:port。</a></li>\n</ul>\n<p>原文链接</p>\n<ul>\n<li><a href=\"http://www.runoob.com/linux/nginx-install-setup.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/linux/nginx-install-setup.html</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000002797601#articleHeader7\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000002797601#articleHeader7</a></li>\n</ul>\n<p><br></p>"},{"title":"Node.js中用escape解决sql注入","date":"2016-07-04T16:00:00.000Z","_content":"\n### 直接拼写sql进行数据库的操作时，很容易被人在动态参数中加入特殊字符产生sql注入，威胁数据库的安全。\n\n``` js\n'use strict';\n\nconst mysql = require('mysql');\n\nlet param = 'ns';\nlet pool = mysql.createPool({\n  user: 'root',\n  password: 'root',\n  database: 'nlp_dict'\n});\n\npool.getConnection(function (err, conn) {\n  let sql = 'select * from tb_nature where nature = \"' + param + '\" and del_status=1';\n  conn.query(sql, function (err, result) {\n    console.log(result);\n  })\n});\n```\n<!-- more -->\n\n这时正常情况下能查询到一条数据，如果将param修改成  \nlet param = 'ns\"-- ';  \nsql语句就会变成  \nselect * from tb_nature where nature = \"ns\"-- \" and del_status=1  \n后面的del_status就会被参数中的 -- 注释掉，失去作用，能查询到多条数据。  \n\n如果对param使用escape包装下，就能将参数中的特殊字符进行转义，防止sql的注入。\nlet sql = 'select * from tb_nature where nature = ' +  mysql.escape(param) + ' and del_status=1';\n\n<br>","source":"_posts/Node.js/escape.md","raw":"title: Node.js中用escape解决sql注入\ndate: 2016-7-5  \ntags:\n    - original\ncategories:\n    - Node.js\n---\n\n### 直接拼写sql进行数据库的操作时，很容易被人在动态参数中加入特殊字符产生sql注入，威胁数据库的安全。\n\n``` js\n'use strict';\n\nconst mysql = require('mysql');\n\nlet param = 'ns';\nlet pool = mysql.createPool({\n  user: 'root',\n  password: 'root',\n  database: 'nlp_dict'\n});\n\npool.getConnection(function (err, conn) {\n  let sql = 'select * from tb_nature where nature = \"' + param + '\" and del_status=1';\n  conn.query(sql, function (err, result) {\n    console.log(result);\n  })\n});\n```\n<!-- more -->\n\n这时正常情况下能查询到一条数据，如果将param修改成  \nlet param = 'ns\"-- ';  \nsql语句就会变成  \nselect * from tb_nature where nature = \"ns\"-- \" and del_status=1  \n后面的del_status就会被参数中的 -- 注释掉，失去作用，能查询到多条数据。  \n\n如果对param使用escape包装下，就能将参数中的特殊字符进行转义，防止sql的注入。\nlet sql = 'select * from tb_nature where nature = ' +  mysql.escape(param) + ' and del_status=1';\n\n<br>","slug":"Node.js/escape","published":1,"updated":"2018-04-05T11:32:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfoy713c0022acie7vrujv02","content":"<h3 id=\"直接拼写sql进行数据库的操作时，很容易被人在动态参数中加入特殊字符产生sql注入，威胁数据库的安全。\"><a href=\"#直接拼写sql进行数据库的操作时，很容易被人在动态参数中加入特殊字符产生sql注入，威胁数据库的安全。\" class=\"headerlink\" title=\"直接拼写sql进行数据库的操作时，很容易被人在动态参数中加入特殊字符产生sql注入，威胁数据库的安全。\"></a>直接拼写sql进行数据库的操作时，很容易被人在动态参数中加入特殊字符产生sql注入，威胁数据库的安全。</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> param = <span class=\"string\">'ns'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> pool = mysql.createPool(&#123;</span><br><span class=\"line\">  user: <span class=\"string\">'root'</span>,</span><br><span class=\"line\">  password: <span class=\"string\">'root'</span>,</span><br><span class=\"line\">  database: <span class=\"string\">'nlp_dict'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">pool.getConnection(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, conn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sql = <span class=\"string\">'select * from tb_nature where nature = \"'</span> + param + <span class=\"string\">'\" and del_status=1'</span>;</span><br><span class=\"line\">  conn.query(sql, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>这时正常情况下能查询到一条数据，如果将param修改成<br>let param = ‘ns”– ‘;<br>sql语句就会变成<br>select * from tb_nature where nature = “ns”– “ and del_status=1<br>后面的del_status就会被参数中的 – 注释掉，失去作用，能查询到多条数据。  </p>\n<p>如果对param使用escape包装下，就能将参数中的特殊字符进行转义，防止sql的注入。<br>let sql = ‘select * from tb_nature where nature = ‘ +  mysql.escape(param) + ‘ and del_status=1’;</p>\n<p><br></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"直接拼写sql进行数据库的操作时，很容易被人在动态参数中加入特殊字符产生sql注入，威胁数据库的安全。\"><a href=\"#直接拼写sql进行数据库的操作时，很容易被人在动态参数中加入特殊字符产生sql注入，威胁数据库的安全。\" class=\"headerlink\" title=\"直接拼写sql进行数据库的操作时，很容易被人在动态参数中加入特殊字符产生sql注入，威胁数据库的安全。\"></a>直接拼写sql进行数据库的操作时，很容易被人在动态参数中加入特殊字符产生sql注入，威胁数据库的安全。</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> param = <span class=\"string\">'ns'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> pool = mysql.createPool(&#123;</span><br><span class=\"line\">  user: <span class=\"string\">'root'</span>,</span><br><span class=\"line\">  password: <span class=\"string\">'root'</span>,</span><br><span class=\"line\">  database: <span class=\"string\">'nlp_dict'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">pool.getConnection(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, conn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sql = <span class=\"string\">'select * from tb_nature where nature = \"'</span> + param + <span class=\"string\">'\" and del_status=1'</span>;</span><br><span class=\"line\">  conn.query(sql, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>","more":"<p>这时正常情况下能查询到一条数据，如果将param修改成<br>let param = ‘ns”– ‘;<br>sql语句就会变成<br>select * from tb_nature where nature = “ns”– “ and del_status=1<br>后面的del_status就会被参数中的 – 注释掉，失去作用，能查询到多条数据。  </p>\n<p>如果对param使用escape包装下，就能将参数中的特殊字符进行转义，防止sql的注入。<br>let sql = ‘select * from tb_nature where nature = ‘ +  mysql.escape(param) + ‘ and del_status=1’;</p>\n<p><br></p>"},{"title":"北京大雪","date":"2016-01-05T16:00:00.000Z","_content":"![](http://7xia33.com1.z0.glb.clouddn.com/bjdaxIMG_733823232.jpg) \n\t北京难得一见的大雪，冰天雪地的很好看。 \n<!-- more -->\n![](http://7xia33.com1.z0.glb.clouddn.com/bjdaxIMG_7408.JPG)  \n![](http://7xia33.com1.z0.glb.clouddn.com/bjdaxIMG_7307.JPG)  \n![](http://7xia33.com1.z0.glb.clouddn.com/bjdaxIMG_7326.JPG)  \n![](http://7xia33.com1.z0.glb.clouddn.com/bjdaxIMG_7331.JPG)  \n![](http://7xia33.com1.z0.glb.clouddn.com/bjdaxIMG_7351.JPG)  \n![](http://7xia33.com1.z0.glb.clouddn.com/bjdaxIMG_7392.JPG)  \n![](http://7xia33.com1.z0.glb.clouddn.com/bjdaxIMG_7395.JPG)  \n![](http://7xia33.com1.z0.glb.clouddn.com/bjdaxIMG_7415.JPG)  \n![](http://7xia33.com1.z0.glb.clouddn.com/bjdaxIMG_7424.JPG)  \n\n<br>","source":"_posts/Photo/beijingdaxue.md","raw":"title: 北京大雪\ndate: 2016-01-06\n\ntags:\n\ncategories:\n    - Photo\n---\n![](http://7xia33.com1.z0.glb.clouddn.com/bjdaxIMG_733823232.jpg) \n\t北京难得一见的大雪，冰天雪地的很好看。 \n<!-- more -->\n![](http://7xia33.com1.z0.glb.clouddn.com/bjdaxIMG_7408.JPG)  \n![](http://7xia33.com1.z0.glb.clouddn.com/bjdaxIMG_7307.JPG)  \n![](http://7xia33.com1.z0.glb.clouddn.com/bjdaxIMG_7326.JPG)  \n![](http://7xia33.com1.z0.glb.clouddn.com/bjdaxIMG_7331.JPG)  \n![](http://7xia33.com1.z0.glb.clouddn.com/bjdaxIMG_7351.JPG)  \n![](http://7xia33.com1.z0.glb.clouddn.com/bjdaxIMG_7392.JPG)  \n![](http://7xia33.com1.z0.glb.clouddn.com/bjdaxIMG_7395.JPG)  \n![](http://7xia33.com1.z0.glb.clouddn.com/bjdaxIMG_7415.JPG)  \n![](http://7xia33.com1.z0.glb.clouddn.com/bjdaxIMG_7424.JPG)  \n\n<br>","slug":"Photo/beijingdaxue","published":1,"updated":"2018-04-05T11:32:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfoy713f0026aciel13udpx3","content":"<p><img src=\"http://7xia33.com1.z0.glb.clouddn.com/bjdaxIMG_733823232.jpg\" alt=\"\"><br>    北京难得一见的大雪，冰天雪地的很好看。<br><a id=\"more\"></a><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/bjdaxIMG_7408.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/bjdaxIMG_7307.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/bjdaxIMG_7326.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/bjdaxIMG_7331.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/bjdaxIMG_7351.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/bjdaxIMG_7392.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/bjdaxIMG_7395.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/bjdaxIMG_7415.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/bjdaxIMG_7424.JPG\" alt=\"\">  </p>\n<p><br></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://7xia33.com1.z0.glb.clouddn.com/bjdaxIMG_733823232.jpg\" alt=\"\"><br>    北京难得一见的大雪，冰天雪地的很好看。<br>","more":"<br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/bjdaxIMG_7408.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/bjdaxIMG_7307.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/bjdaxIMG_7326.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/bjdaxIMG_7331.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/bjdaxIMG_7351.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/bjdaxIMG_7392.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/bjdaxIMG_7395.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/bjdaxIMG_7415.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/bjdaxIMG_7424.JPG\" alt=\"\">  </p>\n<p><br></p>"},{"title":"蓝色港湾跨年夜","date":"2016-01-05T16:00:00.000Z","_content":"\n![](http://7xia33.com1.z0.glb.clouddn.com/lsgwIMG_75423232.jpg) \n\t跨年夜无聊去蓝色港湾看灯展，还是挺好看的。 \n<!-- more -->\n![](http://7xia33.com1.z0.glb.clouddn.com/lsgwIMG_7560.JPG) \n![](http://7xia33.com1.z0.glb.clouddn.com/lsgwIMG_7515.JPG)  \n![](http://7xia33.com1.z0.glb.clouddn.com/lsgwIMG_7461.JPG)  \n![](http://7xia33.com1.z0.glb.clouddn.com/lsgwIMG_7466.JPG)  \n![](http://7xia33.com1.z0.glb.clouddn.com/lsgwIMG_7610.JPG)  \n![](http://7xia33.com1.z0.glb.clouddn.com/lsgwIMG_7616.JPG)  \n\n<br>","source":"_posts/Photo/lansegangwan.md","raw":"title: 蓝色港湾跨年夜\ndate: 2016-01-06\n\ntags:\n\ncategories:\n    - Photo\n---\n\n![](http://7xia33.com1.z0.glb.clouddn.com/lsgwIMG_75423232.jpg) \n\t跨年夜无聊去蓝色港湾看灯展，还是挺好看的。 \n<!-- more -->\n![](http://7xia33.com1.z0.glb.clouddn.com/lsgwIMG_7560.JPG) \n![](http://7xia33.com1.z0.glb.clouddn.com/lsgwIMG_7515.JPG)  \n![](http://7xia33.com1.z0.glb.clouddn.com/lsgwIMG_7461.JPG)  \n![](http://7xia33.com1.z0.glb.clouddn.com/lsgwIMG_7466.JPG)  \n![](http://7xia33.com1.z0.glb.clouddn.com/lsgwIMG_7610.JPG)  \n![](http://7xia33.com1.z0.glb.clouddn.com/lsgwIMG_7616.JPG)  \n\n<br>","slug":"Photo/lansegangwan","published":1,"updated":"2018-04-05T11:32:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfoy713h0029acie5k5t7qir","content":"<p><img src=\"http://7xia33.com1.z0.glb.clouddn.com/lsgwIMG_75423232.jpg\" alt=\"\"><br>    跨年夜无聊去蓝色港湾看灯展，还是挺好看的。<br><a id=\"more\"></a><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/lsgwIMG_7560.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/lsgwIMG_7515.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/lsgwIMG_7461.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/lsgwIMG_7466.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/lsgwIMG_7610.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/lsgwIMG_7616.JPG\" alt=\"\">  </p>\n<p><br></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://7xia33.com1.z0.glb.clouddn.com/lsgwIMG_75423232.jpg\" alt=\"\"><br>    跨年夜无聊去蓝色港湾看灯展，还是挺好看的。<br>","more":"<br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/lsgwIMG_7560.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/lsgwIMG_7515.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/lsgwIMG_7461.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/lsgwIMG_7466.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/lsgwIMG_7610.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/lsgwIMG_7616.JPG\" alt=\"\">  </p>\n<p><br></p>"},{"title":"三亚春节","date":"2016-02-15T16:00:00.000Z","_content":"\n![](http://7xia33.com1.z0.glb.clouddn.com/sanyaIMG_8180.jpg) \n\t在三亚过的春节，也没怎么出去玩……\n<!-- more -->\n![](http://7xia33.com1.z0.glb.clouddn.com/sanyaIMG_8062.JPG) \n![](http://7xia33.com1.z0.glb.clouddn.com/sanyaIMG_8151.JPG)  \n![](http://7xia33.com1.z0.glb.clouddn.com/sanyaIMG_8077.JPG)  \n![](http://7xia33.com1.z0.glb.clouddn.com/sanyaIMG_8206.JPG)  \n![](http://7xia33.com1.z0.glb.clouddn.com/sanyaIMG_8194.JPG)    \n\n<br>","source":"_posts/Photo/sanyacunjie.md","raw":"title: 三亚春节\ndate: 2016-02-16\n\ntags:\n\ncategories:\n    - Photo\n---\n\n![](http://7xia33.com1.z0.glb.clouddn.com/sanyaIMG_8180.jpg) \n\t在三亚过的春节，也没怎么出去玩……\n<!-- more -->\n![](http://7xia33.com1.z0.glb.clouddn.com/sanyaIMG_8062.JPG) \n![](http://7xia33.com1.z0.glb.clouddn.com/sanyaIMG_8151.JPG)  \n![](http://7xia33.com1.z0.glb.clouddn.com/sanyaIMG_8077.JPG)  \n![](http://7xia33.com1.z0.glb.clouddn.com/sanyaIMG_8206.JPG)  \n![](http://7xia33.com1.z0.glb.clouddn.com/sanyaIMG_8194.JPG)    \n\n<br>","slug":"Photo/sanyacunjie","published":1,"updated":"2018-04-05T11:32:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfoy713j002dacie2lbecs6j","content":"<p><img src=\"http://7xia33.com1.z0.glb.clouddn.com/sanyaIMG_8180.jpg\" alt=\"\"><br>    在三亚过的春节，也没怎么出去玩……<br><a id=\"more\"></a><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/sanyaIMG_8062.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/sanyaIMG_8151.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/sanyaIMG_8077.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/sanyaIMG_8206.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/sanyaIMG_8194.JPG\" alt=\"\">    </p>\n<p><br></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://7xia33.com1.z0.glb.clouddn.com/sanyaIMG_8180.jpg\" alt=\"\"><br>    在三亚过的春节，也没怎么出去玩……<br>","more":"<br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/sanyaIMG_8062.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/sanyaIMG_8151.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/sanyaIMG_8077.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/sanyaIMG_8206.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/sanyaIMG_8194.JPG\" alt=\"\">    </p>\n<p><br></p>"},{"title":"香山红叶节","date":"2015-10-27T16:00:00.000Z","_content":"\n![](http://7xia33.com1.z0.glb.clouddn.com/IMG_70742324.jpg)\n老早爬起来去香山看红叶，没有想象中的那么好，红叶不多，可能去的还不是时候。\n<!-- more --> \n![](http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_6998.JPG) \n![](http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_7008.JPG)\n![](http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_7035.JPG)\n![](http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_7060.JPG)\n![](http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_7093.JPG)\n![](http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_7095.JPG)\n![](http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_7152.JPG)\n![](http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_7202.JPG)\n![](http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_7251.JPG)\n![](http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_7257.JPG)\n![](http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_7263.JPG)\n\n<br>","source":"_posts/Photo/xiangshan.md","raw":"title: 香山红叶节\ndate: 2015-10-28\n\ntags:\n\ncategories:\n    - Photo\n---\n\n![](http://7xia33.com1.z0.glb.clouddn.com/IMG_70742324.jpg)\n老早爬起来去香山看红叶，没有想象中的那么好，红叶不多，可能去的还不是时候。\n<!-- more --> \n![](http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_6998.JPG) \n![](http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_7008.JPG)\n![](http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_7035.JPG)\n![](http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_7060.JPG)\n![](http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_7093.JPG)\n![](http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_7095.JPG)\n![](http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_7152.JPG)\n![](http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_7202.JPG)\n![](http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_7251.JPG)\n![](http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_7257.JPG)\n![](http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_7263.JPG)\n\n<br>","slug":"Photo/xiangshan","published":1,"updated":"2018-04-05T11:32:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfoy713l002gaciernb8ycaf","content":"<p><img src=\"http://7xia33.com1.z0.glb.clouddn.com/IMG_70742324.jpg\" alt=\"\"><br>老早爬起来去香山看红叶，没有想象中的那么好，红叶不多，可能去的还不是时候。<br><a id=\"more\"></a><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_6998.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_7008.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_7035.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_7060.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_7093.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_7095.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_7152.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_7202.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_7251.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_7257.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_7263.JPG\" alt=\"\"></p>\n<p><br></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://7xia33.com1.z0.glb.clouddn.com/IMG_70742324.jpg\" alt=\"\"><br>老早爬起来去香山看红叶，没有想象中的那么好，红叶不多，可能去的还不是时候。<br>","more":"<br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_6998.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_7008.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_7035.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_7060.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_7093.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_7095.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_7152.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_7202.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_7251.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_7257.JPG\" alt=\"\"><br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/xiangshanIMG_7263.JPG\" alt=\"\"></p>\n<p><br></p>"},{"title":"Spring Boot 中使用 Jedis 来操作 Redis","date":"2016-10-26T16:00:00.000Z","_content":"\n把之前老的项目切换到用 Spring Boot 时，由于抛弃了 xml 配置文件的使用，需要把之前 Jedis 配置现在用注解的形式重新实现一遍。  \n\n### 老的代码\n* config.properties\n\n``` properties\n# redis数据库连接配置(covert)\nredis.url=redis://:name@host:6379/2\n# 最大实例数\nredis.maxTotal=100\n# 最大空闲实例数\nredis.maxIdle=10\n# (创建实例时)最大等待时间\nredis.maxWaitMillis=10000\n# (创建实例时)是否验证\nredis.testOnBorrow=true\n```\n\n<!-- more -->\n\n* spring.xml\n\n``` xml\n<!--加载外部数据库配置-->\n<context:property-placeholder location=\"classpath:config.properties\" file-encoding=\"utf-8\" ignore-unresolvable=\"true\"/>\n\n<!-- 配置redis池，依次为最大实例数，最大空闲实例数，(创建实例时)最大等待时间，(创建实例时)是否验证 -->\n<bean id=\"jedisPoolConfig\" class=\"redis.clients.jedis.JedisPoolConfig\">\n    <property name=\"maxTotal\" value=\"${redis.maxTotal}\"/>\n    <property name=\"maxIdle\" value=\"${redis.maxIdle}\"/>\n    <property name=\"maxWaitMillis\" value=\"${redis.maxWaitMillis}\"/>\n    <property name=\"testOnBorrow\" value=\"${redis.testOnBorrow}\"/>\n</bean>\n<bean id=\"convertShardInfo\" class=\"redis.clients.jedis.JedisShardInfo\">\n    <constructor-arg name=\"host\" value=\"${redis.url}\"/>\n</bean>\n<bean id=\"convertJedisPool\" class=\"redis.clients.jedis.ShardedJedisPool\">\n    <constructor-arg index=\"0\" ref=\"jedisPoolConfig\"/>\n    <constructor-arg index=\"1\">\n        <list>\n            <ref bean=\"convertShardInfo\"/>\n        </list>\n    </constructor-arg>\n</bean>\n```\n\n### 新的代码\n\n* application.yml\n\n``` yml\n# redis数据库连接配置(covert)\nredisConfig:\n  url: \"redis://:name@host:6379/2\"\n  # 最大实例数\n  maxTotal: 100\n  # 最大空闲实例数\n  maxIdle: 10\n  # (创建实例时)最大等待时间\n  maxWaitMillis: 10000\n  # (创建实例时)是否验证\n  testOnBorrow: true\n```\n\n* RedisConfig.java\n\n``` java\npackage com.raventech.web.models.yml;\n\n@Component\n@ConfigurationProperties(prefix = \"redisConfig\")\npublic class RedisConfig implements Serializable {\n    private static final long serialVersionUID = 1097752157567754456L;\n    private String url;\n    private Integer maxTotal;\n    private Integer maxIdle;\n    private Long maxWaitMillis;\n    private Boolean testOnBorrow;\n    ......\n```\n\n* JedisConfiguration.java\n\n``` java\n@Configuration\n@ComponentScan({\"com.raventech.web.models.yml\"}) // 解决 Configuration 注解中使用 Autowired 注解 IDE 报错\npublic class JedisConfiguration {\n\t@Autowired\n\tRedisConfig redisConfig;\n\n\t@Bean\n\tpublic ShardedJedisPool convertJedisPool() {\n\t\tJedisPoolConfig jedisPoolConfig = new JedisPoolConfig();\n\t\tjedisPoolConfig.setMaxTotal(redisConfig.getMaxTotal());\n\t\tjedisPoolConfig.setMaxIdle(redisConfig.getMaxIdle());\n\t\tjedisPoolConfig.setMaxWaitMillis(redisConfig.getMaxWaitMillis());\n\t\tjedisPoolConfig.setTestOnBorrow(redisConfig.getTestOnBorrow());\n\t\tList<JedisShardInfo> jedisShardInfoList = new ArrayList<>();\n\t\tjedisShardInfoList.add(new JedisShardInfo(redisConfig.getUrl()));\n\t\treturn new ShardedJedisPool(jedisPoolConfig, jedisShardInfoList);\n\t}\n}\n```\n\n### 应用\n\n```\n@Autowired\nprivate ShardedJedisPool convertJedisPool;\n\npublic String convertRedisGet(String key) {\n\tShardedJedis resource = convertJedisPool.getResource();\n\tString result = resource.get(key);\n\tresource.close();\n\treturn result;\n}\n}\n```\n\n\n<br>","source":"_posts/SpringBoot/spring-boot-jedis.md","raw":"title: Spring Boot 中使用 Jedis 来操作 Redis\ndate: 2016-10-27  \ntags:\n    - original\ncategories:\n    - Spring Boot\n---\n\n把之前老的项目切换到用 Spring Boot 时，由于抛弃了 xml 配置文件的使用，需要把之前 Jedis 配置现在用注解的形式重新实现一遍。  \n\n### 老的代码\n* config.properties\n\n``` properties\n# redis数据库连接配置(covert)\nredis.url=redis://:name@host:6379/2\n# 最大实例数\nredis.maxTotal=100\n# 最大空闲实例数\nredis.maxIdle=10\n# (创建实例时)最大等待时间\nredis.maxWaitMillis=10000\n# (创建实例时)是否验证\nredis.testOnBorrow=true\n```\n\n<!-- more -->\n\n* spring.xml\n\n``` xml\n<!--加载外部数据库配置-->\n<context:property-placeholder location=\"classpath:config.properties\" file-encoding=\"utf-8\" ignore-unresolvable=\"true\"/>\n\n<!-- 配置redis池，依次为最大实例数，最大空闲实例数，(创建实例时)最大等待时间，(创建实例时)是否验证 -->\n<bean id=\"jedisPoolConfig\" class=\"redis.clients.jedis.JedisPoolConfig\">\n    <property name=\"maxTotal\" value=\"${redis.maxTotal}\"/>\n    <property name=\"maxIdle\" value=\"${redis.maxIdle}\"/>\n    <property name=\"maxWaitMillis\" value=\"${redis.maxWaitMillis}\"/>\n    <property name=\"testOnBorrow\" value=\"${redis.testOnBorrow}\"/>\n</bean>\n<bean id=\"convertShardInfo\" class=\"redis.clients.jedis.JedisShardInfo\">\n    <constructor-arg name=\"host\" value=\"${redis.url}\"/>\n</bean>\n<bean id=\"convertJedisPool\" class=\"redis.clients.jedis.ShardedJedisPool\">\n    <constructor-arg index=\"0\" ref=\"jedisPoolConfig\"/>\n    <constructor-arg index=\"1\">\n        <list>\n            <ref bean=\"convertShardInfo\"/>\n        </list>\n    </constructor-arg>\n</bean>\n```\n\n### 新的代码\n\n* application.yml\n\n``` yml\n# redis数据库连接配置(covert)\nredisConfig:\n  url: \"redis://:name@host:6379/2\"\n  # 最大实例数\n  maxTotal: 100\n  # 最大空闲实例数\n  maxIdle: 10\n  # (创建实例时)最大等待时间\n  maxWaitMillis: 10000\n  # (创建实例时)是否验证\n  testOnBorrow: true\n```\n\n* RedisConfig.java\n\n``` java\npackage com.raventech.web.models.yml;\n\n@Component\n@ConfigurationProperties(prefix = \"redisConfig\")\npublic class RedisConfig implements Serializable {\n    private static final long serialVersionUID = 1097752157567754456L;\n    private String url;\n    private Integer maxTotal;\n    private Integer maxIdle;\n    private Long maxWaitMillis;\n    private Boolean testOnBorrow;\n    ......\n```\n\n* JedisConfiguration.java\n\n``` java\n@Configuration\n@ComponentScan({\"com.raventech.web.models.yml\"}) // 解决 Configuration 注解中使用 Autowired 注解 IDE 报错\npublic class JedisConfiguration {\n\t@Autowired\n\tRedisConfig redisConfig;\n\n\t@Bean\n\tpublic ShardedJedisPool convertJedisPool() {\n\t\tJedisPoolConfig jedisPoolConfig = new JedisPoolConfig();\n\t\tjedisPoolConfig.setMaxTotal(redisConfig.getMaxTotal());\n\t\tjedisPoolConfig.setMaxIdle(redisConfig.getMaxIdle());\n\t\tjedisPoolConfig.setMaxWaitMillis(redisConfig.getMaxWaitMillis());\n\t\tjedisPoolConfig.setTestOnBorrow(redisConfig.getTestOnBorrow());\n\t\tList<JedisShardInfo> jedisShardInfoList = new ArrayList<>();\n\t\tjedisShardInfoList.add(new JedisShardInfo(redisConfig.getUrl()));\n\t\treturn new ShardedJedisPool(jedisPoolConfig, jedisShardInfoList);\n\t}\n}\n```\n\n### 应用\n\n```\n@Autowired\nprivate ShardedJedisPool convertJedisPool;\n\npublic String convertRedisGet(String key) {\n\tShardedJedis resource = convertJedisPool.getResource();\n\tString result = resource.get(key);\n\tresource.close();\n\treturn result;\n}\n}\n```\n\n\n<br>","slug":"SpringBoot/spring-boot-jedis","published":1,"updated":"2018-04-05T11:32:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfoy713m002kaciem0t5uib9","content":"<p>把之前老的项目切换到用 Spring Boot 时，由于抛弃了 xml 配置文件的使用，需要把之前 Jedis 配置现在用注解的形式重新实现一遍。  </p>\n<h3 id=\"老的代码\"><a href=\"#老的代码\" class=\"headerlink\" title=\"老的代码\"></a>老的代码</h3><ul>\n<li>config.properties</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># redis数据库连接配置(covert)</span><br><span class=\"line\">redis.url=redis://:name@host:6379/2</span><br><span class=\"line\"># 最大实例数</span><br><span class=\"line\">redis.maxTotal=100</span><br><span class=\"line\"># 最大空闲实例数</span><br><span class=\"line\">redis.maxIdle=10</span><br><span class=\"line\"># (创建实例时)最大等待时间</span><br><span class=\"line\">redis.maxWaitMillis=10000</span><br><span class=\"line\"># (创建实例时)是否验证</span><br><span class=\"line\">redis.testOnBorrow=true</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<ul>\n<li>spring.xml</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--加载外部数据库配置--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">\"classpath:config.properties\"</span> <span class=\"attr\">file-encoding</span>=<span class=\"string\">\"utf-8\"</span> <span class=\"attr\">ignore-unresolvable</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 配置redis池，依次为最大实例数，最大空闲实例数，(创建实例时)最大等待时间，(创建实例时)是否验证 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"jedisPoolConfig\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"redis.clients.jedis.JedisPoolConfig\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxTotal\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;redis.maxTotal&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxIdle\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;redis.maxIdle&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxWaitMillis\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;redis.maxWaitMillis&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"testOnBorrow\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;redis.testOnBorrow&#125;\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"convertShardInfo\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"redis.clients.jedis.JedisShardInfo\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">\"host\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;redis.url&#125;\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"convertJedisPool\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"redis.clients.jedis.ShardedJedisPool\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"jedisPoolConfig\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">\"1\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ref</span> <span class=\"attr\">bean</span>=<span class=\"string\">\"convertShardInfo\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"新的代码\"><a href=\"#新的代码\" class=\"headerlink\" title=\"新的代码\"></a>新的代码</h3><ul>\n<li>application.yml</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># redis数据库连接配置(covert)</span></span><br><span class=\"line\"><span class=\"attr\">redisConfig:</span></span><br><span class=\"line\"><span class=\"attr\">  url:</span> <span class=\"string\">\"redis://:name@host:6379/2\"</span></span><br><span class=\"line\">  <span class=\"comment\"># 最大实例数</span></span><br><span class=\"line\"><span class=\"attr\">  maxTotal:</span> <span class=\"number\">100</span></span><br><span class=\"line\">  <span class=\"comment\"># 最大空闲实例数</span></span><br><span class=\"line\"><span class=\"attr\">  maxIdle:</span> <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"comment\"># (创建实例时)最大等待时间</span></span><br><span class=\"line\"><span class=\"attr\">  maxWaitMillis:</span> <span class=\"number\">10000</span></span><br><span class=\"line\">  <span class=\"comment\"># (创建实例时)是否验证</span></span><br><span class=\"line\"><span class=\"attr\">  testOnBorrow:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>RedisConfig.java</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.raventech.web.models.yml;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"redisConfig\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisConfig</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1097752157567754456L</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String url;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer maxTotal;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer maxIdle;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long maxWaitMillis;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean testOnBorrow;</span><br><span class=\"line\">    ......</span><br></pre></td></tr></table></figure>\n<ul>\n<li>JedisConfiguration.java</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(&#123;<span class=\"string\">\"com.raventech.web.models.yml\"</span>&#125;) <span class=\"comment\">// 解决 Configuration 注解中使用 Autowired 注解 IDE 报错</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JedisConfiguration</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\tRedisConfig redisConfig;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> ShardedJedisPool <span class=\"title\">convertJedisPool</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tJedisPoolConfig jedisPoolConfig = <span class=\"keyword\">new</span> JedisPoolConfig();</span><br><span class=\"line\">\t\tjedisPoolConfig.setMaxTotal(redisConfig.getMaxTotal());</span><br><span class=\"line\">\t\tjedisPoolConfig.setMaxIdle(redisConfig.getMaxIdle());</span><br><span class=\"line\">\t\tjedisPoolConfig.setMaxWaitMillis(redisConfig.getMaxWaitMillis());</span><br><span class=\"line\">\t\tjedisPoolConfig.setTestOnBorrow(redisConfig.getTestOnBorrow());</span><br><span class=\"line\">\t\tList&lt;JedisShardInfo&gt; jedisShardInfoList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">\t\tjedisShardInfoList.add(<span class=\"keyword\">new</span> JedisShardInfo(redisConfig.getUrl()));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ShardedJedisPool(jedisPoolConfig, jedisShardInfoList);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Autowired</span><br><span class=\"line\">private ShardedJedisPool convertJedisPool;</span><br><span class=\"line\"></span><br><span class=\"line\">public String convertRedisGet(String key) &#123;</span><br><span class=\"line\">\tShardedJedis resource = convertJedisPool.getResource();</span><br><span class=\"line\">\tString result = resource.get(key);</span><br><span class=\"line\">\tresource.close();</span><br><span class=\"line\">\treturn result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n","site":{"data":{}},"excerpt":"<p>把之前老的项目切换到用 Spring Boot 时，由于抛弃了 xml 配置文件的使用，需要把之前 Jedis 配置现在用注解的形式重新实现一遍。  </p>\n<h3 id=\"老的代码\"><a href=\"#老的代码\" class=\"headerlink\" title=\"老的代码\"></a>老的代码</h3><ul>\n<li>config.properties</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># redis数据库连接配置(covert)</span><br><span class=\"line\">redis.url=redis://:name@host:6379/2</span><br><span class=\"line\"># 最大实例数</span><br><span class=\"line\">redis.maxTotal=100</span><br><span class=\"line\"># 最大空闲实例数</span><br><span class=\"line\">redis.maxIdle=10</span><br><span class=\"line\"># (创建实例时)最大等待时间</span><br><span class=\"line\">redis.maxWaitMillis=10000</span><br><span class=\"line\"># (创建实例时)是否验证</span><br><span class=\"line\">redis.testOnBorrow=true</span><br></pre></td></tr></table></figure>","more":"<ul>\n<li>spring.xml</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--加载外部数据库配置--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">\"classpath:config.properties\"</span> <span class=\"attr\">file-encoding</span>=<span class=\"string\">\"utf-8\"</span> <span class=\"attr\">ignore-unresolvable</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 配置redis池，依次为最大实例数，最大空闲实例数，(创建实例时)最大等待时间，(创建实例时)是否验证 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"jedisPoolConfig\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"redis.clients.jedis.JedisPoolConfig\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxTotal\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;redis.maxTotal&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxIdle\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;redis.maxIdle&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxWaitMillis\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;redis.maxWaitMillis&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"testOnBorrow\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;redis.testOnBorrow&#125;\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"convertShardInfo\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"redis.clients.jedis.JedisShardInfo\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">\"host\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;redis.url&#125;\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"convertJedisPool\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"redis.clients.jedis.ShardedJedisPool\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"jedisPoolConfig\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">\"1\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ref</span> <span class=\"attr\">bean</span>=<span class=\"string\">\"convertShardInfo\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"新的代码\"><a href=\"#新的代码\" class=\"headerlink\" title=\"新的代码\"></a>新的代码</h3><ul>\n<li>application.yml</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># redis数据库连接配置(covert)</span></span><br><span class=\"line\"><span class=\"attr\">redisConfig:</span></span><br><span class=\"line\"><span class=\"attr\">  url:</span> <span class=\"string\">\"redis://:name@host:6379/2\"</span></span><br><span class=\"line\">  <span class=\"comment\"># 最大实例数</span></span><br><span class=\"line\"><span class=\"attr\">  maxTotal:</span> <span class=\"number\">100</span></span><br><span class=\"line\">  <span class=\"comment\"># 最大空闲实例数</span></span><br><span class=\"line\"><span class=\"attr\">  maxIdle:</span> <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"comment\"># (创建实例时)最大等待时间</span></span><br><span class=\"line\"><span class=\"attr\">  maxWaitMillis:</span> <span class=\"number\">10000</span></span><br><span class=\"line\">  <span class=\"comment\"># (创建实例时)是否验证</span></span><br><span class=\"line\"><span class=\"attr\">  testOnBorrow:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>RedisConfig.java</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.raventech.web.models.yml;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"redisConfig\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisConfig</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1097752157567754456L</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String url;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer maxTotal;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer maxIdle;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long maxWaitMillis;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean testOnBorrow;</span><br><span class=\"line\">    ......</span><br></pre></td></tr></table></figure>\n<ul>\n<li>JedisConfiguration.java</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(&#123;<span class=\"string\">\"com.raventech.web.models.yml\"</span>&#125;) <span class=\"comment\">// 解决 Configuration 注解中使用 Autowired 注解 IDE 报错</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JedisConfiguration</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\tRedisConfig redisConfig;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> ShardedJedisPool <span class=\"title\">convertJedisPool</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tJedisPoolConfig jedisPoolConfig = <span class=\"keyword\">new</span> JedisPoolConfig();</span><br><span class=\"line\">\t\tjedisPoolConfig.setMaxTotal(redisConfig.getMaxTotal());</span><br><span class=\"line\">\t\tjedisPoolConfig.setMaxIdle(redisConfig.getMaxIdle());</span><br><span class=\"line\">\t\tjedisPoolConfig.setMaxWaitMillis(redisConfig.getMaxWaitMillis());</span><br><span class=\"line\">\t\tjedisPoolConfig.setTestOnBorrow(redisConfig.getTestOnBorrow());</span><br><span class=\"line\">\t\tList&lt;JedisShardInfo&gt; jedisShardInfoList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">\t\tjedisShardInfoList.add(<span class=\"keyword\">new</span> JedisShardInfo(redisConfig.getUrl()));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ShardedJedisPool(jedisPoolConfig, jedisShardInfoList);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Autowired</span><br><span class=\"line\">private ShardedJedisPool convertJedisPool;</span><br><span class=\"line\"></span><br><span class=\"line\">public String convertRedisGet(String key) &#123;</span><br><span class=\"line\">\tShardedJedis resource = convertJedisPool.getResource();</span><br><span class=\"line\">\tString result = resource.get(key);</span><br><span class=\"line\">\tresource.close();</span><br><span class=\"line\">\treturn result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>"},{"title":"RPC框架motan使用","date":"2016-11-09T16:00:00.000Z","_content":"\n## 简介\n* motan是新浪微博开源的一套轻量级、方便使用的RPC框架\n* 项目地址：https://github.com/weibocom/motan\n\n<!-- more -->\n\n## Hello World\n\n* 使用的过程分为Server端和Client端，Server提供RCP的服务接口，Client端发起调用获取结果。\n* maven的pom文件配置  \n\n``` xml\n<properties>\n    <motan.version>0.2.1</motan.version>\n</properties>\n\n<dependencies>\n    <dependency>\n        <groupId>com.weibo</groupId>\n        <artifactId>motan-core</artifactId>\n        <version>${motan.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>com.weibo</groupId>\n        <artifactId>motan-transport-netty</artifactId>\n        <version>${motan.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>com.weibo</groupId>\n        <artifactId>motan-springsupport</artifactId>\n        <version>${motan.version}</version>\n    </dependency>\n</dependencies>\n```\n\n### Server 端\n* 暴露的接口\n``` java\npackage com.raventech.user.motan;\n\n/**\n * @author liuhaiming on 10/11/2016.\n */\npublic interface HelloService {\n  String hello(String world);\n}\n```\n* 暴露接口的实现类\n``` java\npackage com.raventech.user.motan;\n\n/**\n * @author liuhaiming on 10/11/2016.\n */\npublic class HelloServiceImpl implements HelloService {\n  @Override\n  public String hello(String world) {\n    return \"hello \" + world;\n  }\n}\n```\n* xml配置文件，暴露接口\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:motan=\"http://api.weibo.com/schema/motan\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\n        http://api.weibo.com/schema/motan http://api.weibo.com/schema/motan.xsd\">\n\n    <bean id=\"helloServiceImpl\" class=\"com.raventech.user.motan.HelloServiceImpl\"/>\n    <motan:service interface=\"com.raventech.user.motan.HelloService\" ref=\"helloServiceImpl\" export=\"8002\"/>\n</beans>\n```\n* 启动服务的方法（运行main方法就可以启动服务了）\n``` java\npackage com.raventech.user;\n\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\n/**\n * @author liuhaiming on 10/11/2016.\n */\npublic class Server {\n  public static void main(String[] args) {\n    new ClassPathXmlApplicationContext(\"classpath:motan-server.xml\");\n    System.out.println(\"Server start ...\");\n  }\n}\n```\n\n### Client 端\n* 要请求的接口（不论包名还是类名都要和Server端的一样）\n``` java\npackage com.raventech.user.motan;\n\n/**\n * @author liuhaiming on 10/11/2016.\n */\npublic interface HelloService {\n  String hello(String world);\n}\n```\n* xml配置文件，获取接口信息\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:motan=\"http://api.weibo.com/schema/motan\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\n        http://api.weibo.com/schema/motan http://api.weibo.com/schema/motan.xsd\">\n\n    <motan:referer id=\"helloService\" interface=\"com.raventech.user.motan.HelloService\" directUrl=\"127.0.0.1:8002\"/>\n</beans>\n```\n* 调用服务的方法（运行main方法就可以调用服务了）\n``` java\npackage com.raventech.web;\n\nimport com.raventech.user.motan.HelloService;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\n/**\n * @author liuhaiming on 10/11/2016.\n */\npublic class Client {\n  public static void main(String[] args) {\n    ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"classpath:motan-client.xml\");\n    HelloService fooService = (HelloService) applicationContext.getBean(\"helloService\");\n    System.out.println(fooService.hello(\"world\"));\n  }\n}\n```\n* 调用响应结果\n  ![](http://7xia33.com1.z0.glb.clouddn.com/2016-11-09%20at%2017.45.png)\n\n## 使用Consul作为注册中心\n* 在集群环境下使用motan需要依赖Consul等服务发现组件\n* [Consul的介绍安装和使用](https://www.google.com)\n* maven的pom文件配置(在上面的基础上增加consul)\n``` xml\n<dependency>\n    <groupId>com.weibo</groupId>\n    <artifactId>motan-registry-consul</artifactId>\n    <version>${motan.version}</version>\n</dependency>\n```\n\n### Server 端\n* xml配置文件添加consul的注册\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:motan=\"http://api.weibo.com/schema/motan\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\n        http://api.weibo.com/schema/motan http://api.weibo.com/schema/motan.xsd\">\n\n    <motan:registry regProtocol=\"consul\" name=\"registry\" address=\"127.0.0.1:8500\"/>\n\n    <bean id=\"helloServiceImpl\" class=\"com.raventech.user.motan.HelloServiceImpl\"/>\n    <motan:service interface=\"com.raventech.user.motan.HelloService\" ref=\"helloServiceImpl\" registry=\"registry\"  export=\"8002\"/>\n</beans>\n```\n* 启动服务的方法要在程序启动后调用心跳开关，将服务注册到consul，不然Client无法调用 （别的和上文Hello World一样不变，运行main方法启动服务）\n``` java\npackage com.raventech.user;\n\nimport com.weibo.api.motan.common.MotanConstants;\nimport com.weibo.api.motan.util.MotanSwitcherUtil;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\n/**\n * @author liuhaiming on 10/11/2016.\n */\npublic class Server {\n  public static void main(String[] args) {\n    new ClassPathXmlApplicationContext(\"classpath:motan-server.xml\");\n    MotanSwitcherUtil.setSwitcherValue(MotanConstants.REGISTRY_HEARTBEAT_SWITCHER, true);\n    System.out.println(\"Server start ...\");\n  }\n}\n```\n\n### Client 端\n* xml配置文件添加consul的服务发现\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:motan=\"http://api.weibo.com/schema/motan\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\n        http://api.weibo.com/schema/motan http://api.weibo.com/schema/motan.xsd\">\n\n    <motan:registry regProtocol=\"consul\" name=\"registry\" address=\"127.0.0.1:8500\"/>\n\n    <motan:referer id=\"helloService\" interface=\"com.raventech.user.motan.HelloService\" registry=\"registry\"/>\n</beans>\n```\n* 别的和上文Hello World一样不变，运行Client类的main方法调用服务\n\n## 使用注解的方式集成到Spring Boot项目中\n* 项目改成Spring Boot后抛弃了繁琐的xml文件配置改为用注解的方式。motan也支持注解的方式进行配置，这样更加方便了代码的集成和风格的统一。\n* 继续在前面的代码中进行修改，没提到的保持不变\n\n### Server 端\n* 删除motan-server.xml配置文件\n* 用注解加载motan需要的配置\n``` java\npackage com.raventech.user.config;\n\nimport com.weibo.api.motan.config.springsupport.AnnotationBean;\nimport com.weibo.api.motan.config.springsupport.BasicServiceConfigBean;\nimport com.weibo.api.motan.config.springsupport.ProtocolConfigBean;\nimport com.weibo.api.motan.config.springsupport.RegistryConfigBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * @author liuhaiming on 10/11/2016.\n */\n@Configuration\npublic class MotanConfiguration {\n\n  @Bean\n  public AnnotationBean motanAnnotationBean() {\n    AnnotationBean motanAnnotationBean = new AnnotationBean();\n    motanAnnotationBean.setPackage(\"com.raventech.user.motan\");\n    return motanAnnotationBean;\n  }\n\n  @Bean(name = \"motan\")\n  public ProtocolConfigBean protocolConfig1() {\n    ProtocolConfigBean config = new ProtocolConfigBean();\n    config.setDefault(true);\n    config.setName(\"motan\");\n    config.setMaxContentLength(1048576);\n    return config;\n  }\n\n  @Bean(name = \"registry\")\n  public RegistryConfigBean registryConfig() {\n    RegistryConfigBean config = new RegistryConfigBean();\n    config.setRegProtocol(\"consul\");\n    config.setAddress(\"127.0.0.1:8500\");\n    return config;\n  }\n\n  @Bean\n  public BasicServiceConfigBean baseServiceConfig() {\n    BasicServiceConfigBean config = new BasicServiceConfigBean();\n    config.setExport(\"motan:8002\");\n    config.setRegistry(\"registry\");\n    return config;\n  }\n}\n```\n\n* 暴露接口的实现类加上@MotanService注解，自动生成bean\n``` java\npackage com.raventech.user.motan;\n\nimport com.weibo.api.motan.config.springsupport.annotation.MotanService;\n\n/**\n * @author liuhaiming on 10/11/2016.\n */\n@MotanService\npublic class HelloServiceImpl implements HelloService {\n  @Override\n  public String hello(String world) {\n    return \"hello \" + world;\n  }\n}\n```\n\n* 启动服务的方法就是启动Spring Boot项目，并在在程序启动后调用心跳开关 (运行main方法启动服务)\n``` java\npackage com.raventech.user;\n\nimport com.weibo.api.motan.common.MotanConstants;\nimport com.weibo.api.motan.util.MotanSwitcherUtil;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n/**\n * @author liuhaiming on 10/11/2016.\n */\n@SpringBootApplication\npublic class Server {\n  public static void main(String[] args) {\n    SpringApplication.run(Server.class, args);\n    MotanSwitcherUtil.setSwitcherValue(MotanConstants.REGISTRY_HEARTBEAT_SWITCHER, true);\n    System.out.println(\"Server start ...\");\n  }\n}\n```\n\n### Client 端\n* 删除motan-client.xml配置文件和Client.java启动文件，已经没用了\n* 用注解加载motan需要的配置\n``` java\npackage com.raventech.web.config;\n\nimport com.weibo.api.motan.config.springsupport.AnnotationBean;\nimport com.weibo.api.motan.config.springsupport.BasicRefererConfigBean;\nimport com.weibo.api.motan.config.springsupport.ProtocolConfigBean;\nimport com.weibo.api.motan.config.springsupport.RegistryConfigBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * @author liuhaiming on 10/11/2016.\n */\n@Configuration\npublic class MotanConfiguration {\n\n  @Bean\n  public AnnotationBean motanAnnotationBean() {\n    AnnotationBean motanAnnotationBean = new AnnotationBean();\n    # 添加用到motan注解的类的包名\n    motanAnnotationBean.setPackage(\"com.raventech.web.controller\");\n    return motanAnnotationBean;\n  }\n\n  @Bean(name = \"motan\")\n  public ProtocolConfigBean protocolConfig1() {\n    ProtocolConfigBean config = new ProtocolConfigBean();\n    config.setDefault(true);\n    config.setName(\"motan\");\n    config.setMaxContentLength(1048576);\n    return config;\n  }\n\n  @Bean(name = \"registry\")\n  public RegistryConfigBean registryConfig() {\n    RegistryConfigBean config = new RegistryConfigBean();\n    config.setRegProtocol(\"consul\");\n    config.setAddress(\"127.0.0.1:8500\");\n    return config;\n  }\n\n  @Bean(name = \"basicRefererConfig\")\n  public BasicRefererConfigBean basicRefererConfigBean() {\n    BasicRefererConfigBean config = new BasicRefererConfigBean();\n    config.setProtocol(\"motan\");\n    config.setRegistry(\"registry\");\n    config.setThrowException(true);\n    return config;\n  }\n}\n```\n* 调用方法（在Controller中使用）\n``` java\npackage com.raventech.web.controller;\n\nimport com.raventech.user.motan.HelloService;\nimport com.raventech.web.common.BaseController;\nimport com.weibo.api.motan.config.springsupport.annotation.MotanReferer;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author liuhaiming on 10/11/2016.\n */\n@RestController\n@RequestMapping(\"/motan\")\npublic class HelloController extends BaseController {\n\n  @MotanReferer(basicReferer = \"basicRefererConfig\")\n  private HelloService helloService;\n\n  @RequestMapping(value = \"/hello\", method = RequestMethod.GET)\n  public String hello() throws Exception {\n    return helloService.hello(\"world\");\n  }\n}\n```\n* 启动Spring Boot项目，在浏览器中访问http://127.0.0.1:8080/motan/hello就可以获取验证结果\n\n<br>","source":"_posts/RPC/motan-hello.md","raw":"title: RPC框架motan使用\ndate: 2016-11-10  \ntags:\n    - original\n    - motan\ncategories:\n    - RPC\n---\n\n## 简介\n* motan是新浪微博开源的一套轻量级、方便使用的RPC框架\n* 项目地址：https://github.com/weibocom/motan\n\n<!-- more -->\n\n## Hello World\n\n* 使用的过程分为Server端和Client端，Server提供RCP的服务接口，Client端发起调用获取结果。\n* maven的pom文件配置  \n\n``` xml\n<properties>\n    <motan.version>0.2.1</motan.version>\n</properties>\n\n<dependencies>\n    <dependency>\n        <groupId>com.weibo</groupId>\n        <artifactId>motan-core</artifactId>\n        <version>${motan.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>com.weibo</groupId>\n        <artifactId>motan-transport-netty</artifactId>\n        <version>${motan.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>com.weibo</groupId>\n        <artifactId>motan-springsupport</artifactId>\n        <version>${motan.version}</version>\n    </dependency>\n</dependencies>\n```\n\n### Server 端\n* 暴露的接口\n``` java\npackage com.raventech.user.motan;\n\n/**\n * @author liuhaiming on 10/11/2016.\n */\npublic interface HelloService {\n  String hello(String world);\n}\n```\n* 暴露接口的实现类\n``` java\npackage com.raventech.user.motan;\n\n/**\n * @author liuhaiming on 10/11/2016.\n */\npublic class HelloServiceImpl implements HelloService {\n  @Override\n  public String hello(String world) {\n    return \"hello \" + world;\n  }\n}\n```\n* xml配置文件，暴露接口\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:motan=\"http://api.weibo.com/schema/motan\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\n        http://api.weibo.com/schema/motan http://api.weibo.com/schema/motan.xsd\">\n\n    <bean id=\"helloServiceImpl\" class=\"com.raventech.user.motan.HelloServiceImpl\"/>\n    <motan:service interface=\"com.raventech.user.motan.HelloService\" ref=\"helloServiceImpl\" export=\"8002\"/>\n</beans>\n```\n* 启动服务的方法（运行main方法就可以启动服务了）\n``` java\npackage com.raventech.user;\n\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\n/**\n * @author liuhaiming on 10/11/2016.\n */\npublic class Server {\n  public static void main(String[] args) {\n    new ClassPathXmlApplicationContext(\"classpath:motan-server.xml\");\n    System.out.println(\"Server start ...\");\n  }\n}\n```\n\n### Client 端\n* 要请求的接口（不论包名还是类名都要和Server端的一样）\n``` java\npackage com.raventech.user.motan;\n\n/**\n * @author liuhaiming on 10/11/2016.\n */\npublic interface HelloService {\n  String hello(String world);\n}\n```\n* xml配置文件，获取接口信息\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:motan=\"http://api.weibo.com/schema/motan\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\n        http://api.weibo.com/schema/motan http://api.weibo.com/schema/motan.xsd\">\n\n    <motan:referer id=\"helloService\" interface=\"com.raventech.user.motan.HelloService\" directUrl=\"127.0.0.1:8002\"/>\n</beans>\n```\n* 调用服务的方法（运行main方法就可以调用服务了）\n``` java\npackage com.raventech.web;\n\nimport com.raventech.user.motan.HelloService;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\n/**\n * @author liuhaiming on 10/11/2016.\n */\npublic class Client {\n  public static void main(String[] args) {\n    ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"classpath:motan-client.xml\");\n    HelloService fooService = (HelloService) applicationContext.getBean(\"helloService\");\n    System.out.println(fooService.hello(\"world\"));\n  }\n}\n```\n* 调用响应结果\n  ![](http://7xia33.com1.z0.glb.clouddn.com/2016-11-09%20at%2017.45.png)\n\n## 使用Consul作为注册中心\n* 在集群环境下使用motan需要依赖Consul等服务发现组件\n* [Consul的介绍安装和使用](https://www.google.com)\n* maven的pom文件配置(在上面的基础上增加consul)\n``` xml\n<dependency>\n    <groupId>com.weibo</groupId>\n    <artifactId>motan-registry-consul</artifactId>\n    <version>${motan.version}</version>\n</dependency>\n```\n\n### Server 端\n* xml配置文件添加consul的注册\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:motan=\"http://api.weibo.com/schema/motan\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\n        http://api.weibo.com/schema/motan http://api.weibo.com/schema/motan.xsd\">\n\n    <motan:registry regProtocol=\"consul\" name=\"registry\" address=\"127.0.0.1:8500\"/>\n\n    <bean id=\"helloServiceImpl\" class=\"com.raventech.user.motan.HelloServiceImpl\"/>\n    <motan:service interface=\"com.raventech.user.motan.HelloService\" ref=\"helloServiceImpl\" registry=\"registry\"  export=\"8002\"/>\n</beans>\n```\n* 启动服务的方法要在程序启动后调用心跳开关，将服务注册到consul，不然Client无法调用 （别的和上文Hello World一样不变，运行main方法启动服务）\n``` java\npackage com.raventech.user;\n\nimport com.weibo.api.motan.common.MotanConstants;\nimport com.weibo.api.motan.util.MotanSwitcherUtil;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\n/**\n * @author liuhaiming on 10/11/2016.\n */\npublic class Server {\n  public static void main(String[] args) {\n    new ClassPathXmlApplicationContext(\"classpath:motan-server.xml\");\n    MotanSwitcherUtil.setSwitcherValue(MotanConstants.REGISTRY_HEARTBEAT_SWITCHER, true);\n    System.out.println(\"Server start ...\");\n  }\n}\n```\n\n### Client 端\n* xml配置文件添加consul的服务发现\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:motan=\"http://api.weibo.com/schema/motan\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\n        http://api.weibo.com/schema/motan http://api.weibo.com/schema/motan.xsd\">\n\n    <motan:registry regProtocol=\"consul\" name=\"registry\" address=\"127.0.0.1:8500\"/>\n\n    <motan:referer id=\"helloService\" interface=\"com.raventech.user.motan.HelloService\" registry=\"registry\"/>\n</beans>\n```\n* 别的和上文Hello World一样不变，运行Client类的main方法调用服务\n\n## 使用注解的方式集成到Spring Boot项目中\n* 项目改成Spring Boot后抛弃了繁琐的xml文件配置改为用注解的方式。motan也支持注解的方式进行配置，这样更加方便了代码的集成和风格的统一。\n* 继续在前面的代码中进行修改，没提到的保持不变\n\n### Server 端\n* 删除motan-server.xml配置文件\n* 用注解加载motan需要的配置\n``` java\npackage com.raventech.user.config;\n\nimport com.weibo.api.motan.config.springsupport.AnnotationBean;\nimport com.weibo.api.motan.config.springsupport.BasicServiceConfigBean;\nimport com.weibo.api.motan.config.springsupport.ProtocolConfigBean;\nimport com.weibo.api.motan.config.springsupport.RegistryConfigBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * @author liuhaiming on 10/11/2016.\n */\n@Configuration\npublic class MotanConfiguration {\n\n  @Bean\n  public AnnotationBean motanAnnotationBean() {\n    AnnotationBean motanAnnotationBean = new AnnotationBean();\n    motanAnnotationBean.setPackage(\"com.raventech.user.motan\");\n    return motanAnnotationBean;\n  }\n\n  @Bean(name = \"motan\")\n  public ProtocolConfigBean protocolConfig1() {\n    ProtocolConfigBean config = new ProtocolConfigBean();\n    config.setDefault(true);\n    config.setName(\"motan\");\n    config.setMaxContentLength(1048576);\n    return config;\n  }\n\n  @Bean(name = \"registry\")\n  public RegistryConfigBean registryConfig() {\n    RegistryConfigBean config = new RegistryConfigBean();\n    config.setRegProtocol(\"consul\");\n    config.setAddress(\"127.0.0.1:8500\");\n    return config;\n  }\n\n  @Bean\n  public BasicServiceConfigBean baseServiceConfig() {\n    BasicServiceConfigBean config = new BasicServiceConfigBean();\n    config.setExport(\"motan:8002\");\n    config.setRegistry(\"registry\");\n    return config;\n  }\n}\n```\n\n* 暴露接口的实现类加上@MotanService注解，自动生成bean\n``` java\npackage com.raventech.user.motan;\n\nimport com.weibo.api.motan.config.springsupport.annotation.MotanService;\n\n/**\n * @author liuhaiming on 10/11/2016.\n */\n@MotanService\npublic class HelloServiceImpl implements HelloService {\n  @Override\n  public String hello(String world) {\n    return \"hello \" + world;\n  }\n}\n```\n\n* 启动服务的方法就是启动Spring Boot项目，并在在程序启动后调用心跳开关 (运行main方法启动服务)\n``` java\npackage com.raventech.user;\n\nimport com.weibo.api.motan.common.MotanConstants;\nimport com.weibo.api.motan.util.MotanSwitcherUtil;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n/**\n * @author liuhaiming on 10/11/2016.\n */\n@SpringBootApplication\npublic class Server {\n  public static void main(String[] args) {\n    SpringApplication.run(Server.class, args);\n    MotanSwitcherUtil.setSwitcherValue(MotanConstants.REGISTRY_HEARTBEAT_SWITCHER, true);\n    System.out.println(\"Server start ...\");\n  }\n}\n```\n\n### Client 端\n* 删除motan-client.xml配置文件和Client.java启动文件，已经没用了\n* 用注解加载motan需要的配置\n``` java\npackage com.raventech.web.config;\n\nimport com.weibo.api.motan.config.springsupport.AnnotationBean;\nimport com.weibo.api.motan.config.springsupport.BasicRefererConfigBean;\nimport com.weibo.api.motan.config.springsupport.ProtocolConfigBean;\nimport com.weibo.api.motan.config.springsupport.RegistryConfigBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * @author liuhaiming on 10/11/2016.\n */\n@Configuration\npublic class MotanConfiguration {\n\n  @Bean\n  public AnnotationBean motanAnnotationBean() {\n    AnnotationBean motanAnnotationBean = new AnnotationBean();\n    # 添加用到motan注解的类的包名\n    motanAnnotationBean.setPackage(\"com.raventech.web.controller\");\n    return motanAnnotationBean;\n  }\n\n  @Bean(name = \"motan\")\n  public ProtocolConfigBean protocolConfig1() {\n    ProtocolConfigBean config = new ProtocolConfigBean();\n    config.setDefault(true);\n    config.setName(\"motan\");\n    config.setMaxContentLength(1048576);\n    return config;\n  }\n\n  @Bean(name = \"registry\")\n  public RegistryConfigBean registryConfig() {\n    RegistryConfigBean config = new RegistryConfigBean();\n    config.setRegProtocol(\"consul\");\n    config.setAddress(\"127.0.0.1:8500\");\n    return config;\n  }\n\n  @Bean(name = \"basicRefererConfig\")\n  public BasicRefererConfigBean basicRefererConfigBean() {\n    BasicRefererConfigBean config = new BasicRefererConfigBean();\n    config.setProtocol(\"motan\");\n    config.setRegistry(\"registry\");\n    config.setThrowException(true);\n    return config;\n  }\n}\n```\n* 调用方法（在Controller中使用）\n``` java\npackage com.raventech.web.controller;\n\nimport com.raventech.user.motan.HelloService;\nimport com.raventech.web.common.BaseController;\nimport com.weibo.api.motan.config.springsupport.annotation.MotanReferer;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author liuhaiming on 10/11/2016.\n */\n@RestController\n@RequestMapping(\"/motan\")\npublic class HelloController extends BaseController {\n\n  @MotanReferer(basicReferer = \"basicRefererConfig\")\n  private HelloService helloService;\n\n  @RequestMapping(value = \"/hello\", method = RequestMethod.GET)\n  public String hello() throws Exception {\n    return helloService.hello(\"world\");\n  }\n}\n```\n* 启动Spring Boot项目，在浏览器中访问http://127.0.0.1:8080/motan/hello就可以获取验证结果\n\n<br>","slug":"RPC/motan-hello","published":1,"updated":"2018-04-05T11:32:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfoy713o002maciejad55gn9","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>motan是新浪微博开源的一套轻量级、方便使用的RPC框架</li>\n<li>项目地址：<a href=\"https://github.com/weibocom/motan\" target=\"_blank\" rel=\"noopener\">https://github.com/weibocom/motan</a></li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h2><ul>\n<li>使用的过程分为Server端和Client端，Server提供RCP的服务接口，Client端发起调用获取结果。</li>\n<li>maven的pom文件配置  </li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">motan.version</span>&gt;</span>0.2.1<span class=\"tag\">&lt;/<span class=\"name\">motan.version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.weibo<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>motan-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;motan.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.weibo<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>motan-transport-netty<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;motan.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.weibo<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>motan-springsupport<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;motan.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Server-端\"><a href=\"#Server-端\" class=\"headerlink\" title=\"Server 端\"></a>Server 端</h3><ul>\n<li><p>暴露的接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.raventech.user.motan;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuhaiming on 10/11/2016.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">HelloService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">String <span class=\"title\">hello</span><span class=\"params\">(String world)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>暴露接口的实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.raventech.user.motan;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuhaiming on 10/11/2016.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">HelloService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">(String world)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"hello \"</span> + world;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>xml配置文件，暴露接口</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:motan</span>=<span class=\"string\">\"http://api.weibo.com/schema/motan\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        http://api.weibo.com/schema/motan http://api.weibo.com/schema/motan.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"helloServiceImpl\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.raventech.user.motan.HelloServiceImpl\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">motan:service</span> <span class=\"attr\">interface</span>=<span class=\"string\">\"com.raventech.user.motan.HelloService\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"helloServiceImpl\"</span> <span class=\"attr\">export</span>=<span class=\"string\">\"8002\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动服务的方法（运行main方法就可以启动服务了）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.raventech.user;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuhaiming on 10/11/2016.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Server</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"classpath:motan-server.xml\"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Server start ...\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Client-端\"><a href=\"#Client-端\" class=\"headerlink\" title=\"Client 端\"></a>Client 端</h3><ul>\n<li><p>要请求的接口（不论包名还是类名都要和Server端的一样）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.raventech.user.motan;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuhaiming on 10/11/2016.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">HelloService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">String <span class=\"title\">hello</span><span class=\"params\">(String world)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>xml配置文件，获取接口信息</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:motan</span>=<span class=\"string\">\"http://api.weibo.com/schema/motan\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        http://api.weibo.com/schema/motan http://api.weibo.com/schema/motan.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">motan:referer</span> <span class=\"attr\">id</span>=<span class=\"string\">\"helloService\"</span> <span class=\"attr\">interface</span>=<span class=\"string\">\"com.raventech.user.motan.HelloService\"</span> <span class=\"attr\">directUrl</span>=<span class=\"string\">\"127.0.0.1:8002\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>调用服务的方法（运行main方法就可以调用服务了）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.raventech.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.raventech.user.motan.HelloService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuhaiming on 10/11/2016.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    ApplicationContext applicationContext = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"classpath:motan-client.xml\"</span>);</span><br><span class=\"line\">    HelloService fooService = (HelloService) applicationContext.getBean(<span class=\"string\">\"helloService\"</span>);</span><br><span class=\"line\">    System.out.println(fooService.hello(<span class=\"string\">\"world\"</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>调用响应结果<br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/2016-11-09%20at%2017.45.png\" alt=\"\"></p>\n</li>\n</ul>\n<h2 id=\"使用Consul作为注册中心\"><a href=\"#使用Consul作为注册中心\" class=\"headerlink\" title=\"使用Consul作为注册中心\"></a>使用Consul作为注册中心</h2><ul>\n<li>在集群环境下使用motan需要依赖Consul等服务发现组件</li>\n<li><a href=\"https://www.google.com\" target=\"_blank\" rel=\"noopener\">Consul的介绍安装和使用</a></li>\n<li>maven的pom文件配置(在上面的基础上增加consul)<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.weibo<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>motan-registry-consul<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;motan.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Server-端-1\"><a href=\"#Server-端-1\" class=\"headerlink\" title=\"Server 端\"></a>Server 端</h3><ul>\n<li><p>xml配置文件添加consul的注册</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:motan</span>=<span class=\"string\">\"http://api.weibo.com/schema/motan\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        http://api.weibo.com/schema/motan http://api.weibo.com/schema/motan.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">motan:registry</span> <span class=\"attr\">regProtocol</span>=<span class=\"string\">\"consul\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"registry\"</span> <span class=\"attr\">address</span>=<span class=\"string\">\"127.0.0.1:8500\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"helloServiceImpl\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.raventech.user.motan.HelloServiceImpl\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">motan:service</span> <span class=\"attr\">interface</span>=<span class=\"string\">\"com.raventech.user.motan.HelloService\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"helloServiceImpl\"</span> <span class=\"attr\">registry</span>=<span class=\"string\">\"registry\"</span>  <span class=\"attr\">export</span>=<span class=\"string\">\"8002\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动服务的方法要在程序启动后调用心跳开关，将服务注册到consul，不然Client无法调用 （别的和上文Hello World一样不变，运行main方法启动服务）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.raventech.user;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.weibo.api.motan.common.MotanConstants;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.weibo.api.motan.util.MotanSwitcherUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuhaiming on 10/11/2016.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Server</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"classpath:motan-server.xml\"</span>);</span><br><span class=\"line\">    MotanSwitcherUtil.setSwitcherValue(MotanConstants.REGISTRY_HEARTBEAT_SWITCHER, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Server start ...\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Client-端-1\"><a href=\"#Client-端-1\" class=\"headerlink\" title=\"Client 端\"></a>Client 端</h3><ul>\n<li><p>xml配置文件添加consul的服务发现</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:motan</span>=<span class=\"string\">\"http://api.weibo.com/schema/motan\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        http://api.weibo.com/schema/motan http://api.weibo.com/schema/motan.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">motan:registry</span> <span class=\"attr\">regProtocol</span>=<span class=\"string\">\"consul\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"registry\"</span> <span class=\"attr\">address</span>=<span class=\"string\">\"127.0.0.1:8500\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">motan:referer</span> <span class=\"attr\">id</span>=<span class=\"string\">\"helloService\"</span> <span class=\"attr\">interface</span>=<span class=\"string\">\"com.raventech.user.motan.HelloService\"</span> <span class=\"attr\">registry</span>=<span class=\"string\">\"registry\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>别的和上文Hello World一样不变，运行Client类的main方法调用服务</p>\n</li>\n</ul>\n<h2 id=\"使用注解的方式集成到Spring-Boot项目中\"><a href=\"#使用注解的方式集成到Spring-Boot项目中\" class=\"headerlink\" title=\"使用注解的方式集成到Spring Boot项目中\"></a>使用注解的方式集成到Spring Boot项目中</h2><ul>\n<li>项目改成Spring Boot后抛弃了繁琐的xml文件配置改为用注解的方式。motan也支持注解的方式进行配置，这样更加方便了代码的集成和风格的统一。</li>\n<li>继续在前面的代码中进行修改，没提到的保持不变</li>\n</ul>\n<h3 id=\"Server-端-2\"><a href=\"#Server-端-2\" class=\"headerlink\" title=\"Server 端\"></a>Server 端</h3><ul>\n<li>删除motan-server.xml配置文件</li>\n<li><p>用注解加载motan需要的配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.raventech.user.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.weibo.api.motan.config.springsupport.AnnotationBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.weibo.api.motan.config.springsupport.BasicServiceConfigBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.weibo.api.motan.config.springsupport.ProtocolConfigBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.weibo.api.motan.config.springsupport.RegistryConfigBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuhaiming on 10/11/2016.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MotanConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Bean</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> AnnotationBean <span class=\"title\">motanAnnotationBean</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    AnnotationBean motanAnnotationBean = <span class=\"keyword\">new</span> AnnotationBean();</span><br><span class=\"line\">    motanAnnotationBean.setPackage(<span class=\"string\">\"com.raventech.user.motan\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> motanAnnotationBean;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"motan\"</span>)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> ProtocolConfigBean <span class=\"title\">protocolConfig1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ProtocolConfigBean config = <span class=\"keyword\">new</span> ProtocolConfigBean();</span><br><span class=\"line\">    config.setDefault(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    config.setName(<span class=\"string\">\"motan\"</span>);</span><br><span class=\"line\">    config.setMaxContentLength(<span class=\"number\">1048576</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"registry\"</span>)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> RegistryConfigBean <span class=\"title\">registryConfig</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    RegistryConfigBean config = <span class=\"keyword\">new</span> RegistryConfigBean();</span><br><span class=\"line\">    config.setRegProtocol(<span class=\"string\">\"consul\"</span>);</span><br><span class=\"line\">    config.setAddress(<span class=\"string\">\"127.0.0.1:8500\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Bean</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> BasicServiceConfigBean <span class=\"title\">baseServiceConfig</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    BasicServiceConfigBean config = <span class=\"keyword\">new</span> BasicServiceConfigBean();</span><br><span class=\"line\">    config.setExport(<span class=\"string\">\"motan:8002\"</span>);</span><br><span class=\"line\">    config.setRegistry(<span class=\"string\">\"registry\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>暴露接口的实现类加上@MotanService注解，自动生成bean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.raventech.user.motan;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.weibo.api.motan.config.springsupport.annotation.MotanService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuhaiming on 10/11/2016.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@MotanService</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">HelloService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">(String world)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"hello \"</span> + world;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动服务的方法就是启动Spring Boot项目，并在在程序启动后调用心跳开关 (运行main方法启动服务)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.raventech.user;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.weibo.api.motan.common.MotanConstants;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.weibo.api.motan.util.MotanSwitcherUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuhaiming on 10/11/2016.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Server</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    SpringApplication.run(Server.class, args);</span><br><span class=\"line\">    MotanSwitcherUtil.setSwitcherValue(MotanConstants.REGISTRY_HEARTBEAT_SWITCHER, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Server start ...\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Client-端-2\"><a href=\"#Client-端-2\" class=\"headerlink\" title=\"Client 端\"></a>Client 端</h3><ul>\n<li>删除motan-client.xml配置文件和Client.java启动文件，已经没用了</li>\n<li><p>用注解加载motan需要的配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.raventech.web.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.weibo.api.motan.config.springsupport.AnnotationBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.weibo.api.motan.config.springsupport.BasicRefererConfigBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.weibo.api.motan.config.springsupport.ProtocolConfigBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.weibo.api.motan.config.springsupport.RegistryConfigBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuhaiming on 10/11/2016.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MotanConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Bean</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> AnnotationBean <span class=\"title\">motanAnnotationBean</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    AnnotationBean motanAnnotationBean = <span class=\"keyword\">new</span> AnnotationBean();</span><br><span class=\"line\">    # 添加用到motan注解的类的包名</span><br><span class=\"line\">    motanAnnotationBean.setPackage(<span class=\"string\">\"com.raventech.web.controller\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> motanAnnotationBean;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"motan\"</span>)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> ProtocolConfigBean <span class=\"title\">protocolConfig1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ProtocolConfigBean config = <span class=\"keyword\">new</span> ProtocolConfigBean();</span><br><span class=\"line\">    config.setDefault(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    config.setName(<span class=\"string\">\"motan\"</span>);</span><br><span class=\"line\">    config.setMaxContentLength(<span class=\"number\">1048576</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"registry\"</span>)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> RegistryConfigBean <span class=\"title\">registryConfig</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    RegistryConfigBean config = <span class=\"keyword\">new</span> RegistryConfigBean();</span><br><span class=\"line\">    config.setRegProtocol(<span class=\"string\">\"consul\"</span>);</span><br><span class=\"line\">    config.setAddress(<span class=\"string\">\"127.0.0.1:8500\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"basicRefererConfig\"</span>)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> BasicRefererConfigBean <span class=\"title\">basicRefererConfigBean</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    BasicRefererConfigBean config = <span class=\"keyword\">new</span> BasicRefererConfigBean();</span><br><span class=\"line\">    config.setProtocol(<span class=\"string\">\"motan\"</span>);</span><br><span class=\"line\">    config.setRegistry(<span class=\"string\">\"registry\"</span>);</span><br><span class=\"line\">    config.setThrowException(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>调用方法（在Controller中使用）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.raventech.web.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.raventech.user.motan.HelloService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.raventech.web.common.BaseController;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.weibo.api.motan.config.springsupport.annotation.MotanReferer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuhaiming on 10/11/2016.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/motan\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@MotanReferer</span>(basicReferer = <span class=\"string\">\"basicRefererConfig\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">private</span> HelloService helloService;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/hello\"</span>, method = RequestMethod.GET)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> helloService.hello(<span class=\"string\">\"world\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动Spring Boot项目，在浏览器中访问<a href=\"http://127.0.0.1:8080/motan/hello就可以获取验证结果\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080/motan/hello就可以获取验证结果</a></p>\n</li>\n</ul>\n<p><br></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>motan是新浪微博开源的一套轻量级、方便使用的RPC框架</li>\n<li>项目地址：<a href=\"https://github.com/weibocom/motan\" target=\"_blank\" rel=\"noopener\">https://github.com/weibocom/motan</a></li>\n</ul>","more":"<h2 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h2><ul>\n<li>使用的过程分为Server端和Client端，Server提供RCP的服务接口，Client端发起调用获取结果。</li>\n<li>maven的pom文件配置  </li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">motan.version</span>&gt;</span>0.2.1<span class=\"tag\">&lt;/<span class=\"name\">motan.version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.weibo<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>motan-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;motan.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.weibo<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>motan-transport-netty<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;motan.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.weibo<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>motan-springsupport<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;motan.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Server-端\"><a href=\"#Server-端\" class=\"headerlink\" title=\"Server 端\"></a>Server 端</h3><ul>\n<li><p>暴露的接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.raventech.user.motan;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuhaiming on 10/11/2016.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">HelloService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">String <span class=\"title\">hello</span><span class=\"params\">(String world)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>暴露接口的实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.raventech.user.motan;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuhaiming on 10/11/2016.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">HelloService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">(String world)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"hello \"</span> + world;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>xml配置文件，暴露接口</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:motan</span>=<span class=\"string\">\"http://api.weibo.com/schema/motan\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        http://api.weibo.com/schema/motan http://api.weibo.com/schema/motan.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"helloServiceImpl\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.raventech.user.motan.HelloServiceImpl\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">motan:service</span> <span class=\"attr\">interface</span>=<span class=\"string\">\"com.raventech.user.motan.HelloService\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"helloServiceImpl\"</span> <span class=\"attr\">export</span>=<span class=\"string\">\"8002\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动服务的方法（运行main方法就可以启动服务了）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.raventech.user;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuhaiming on 10/11/2016.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Server</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"classpath:motan-server.xml\"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Server start ...\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Client-端\"><a href=\"#Client-端\" class=\"headerlink\" title=\"Client 端\"></a>Client 端</h3><ul>\n<li><p>要请求的接口（不论包名还是类名都要和Server端的一样）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.raventech.user.motan;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuhaiming on 10/11/2016.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">HelloService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">String <span class=\"title\">hello</span><span class=\"params\">(String world)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>xml配置文件，获取接口信息</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:motan</span>=<span class=\"string\">\"http://api.weibo.com/schema/motan\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        http://api.weibo.com/schema/motan http://api.weibo.com/schema/motan.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">motan:referer</span> <span class=\"attr\">id</span>=<span class=\"string\">\"helloService\"</span> <span class=\"attr\">interface</span>=<span class=\"string\">\"com.raventech.user.motan.HelloService\"</span> <span class=\"attr\">directUrl</span>=<span class=\"string\">\"127.0.0.1:8002\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>调用服务的方法（运行main方法就可以调用服务了）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.raventech.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.raventech.user.motan.HelloService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuhaiming on 10/11/2016.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    ApplicationContext applicationContext = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"classpath:motan-client.xml\"</span>);</span><br><span class=\"line\">    HelloService fooService = (HelloService) applicationContext.getBean(<span class=\"string\">\"helloService\"</span>);</span><br><span class=\"line\">    System.out.println(fooService.hello(<span class=\"string\">\"world\"</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>调用响应结果<br><img src=\"http://7xia33.com1.z0.glb.clouddn.com/2016-11-09%20at%2017.45.png\" alt=\"\"></p>\n</li>\n</ul>\n<h2 id=\"使用Consul作为注册中心\"><a href=\"#使用Consul作为注册中心\" class=\"headerlink\" title=\"使用Consul作为注册中心\"></a>使用Consul作为注册中心</h2><ul>\n<li>在集群环境下使用motan需要依赖Consul等服务发现组件</li>\n<li><a href=\"https://www.google.com\" target=\"_blank\" rel=\"noopener\">Consul的介绍安装和使用</a></li>\n<li>maven的pom文件配置(在上面的基础上增加consul)<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.weibo<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>motan-registry-consul<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;motan.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Server-端-1\"><a href=\"#Server-端-1\" class=\"headerlink\" title=\"Server 端\"></a>Server 端</h3><ul>\n<li><p>xml配置文件添加consul的注册</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:motan</span>=<span class=\"string\">\"http://api.weibo.com/schema/motan\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        http://api.weibo.com/schema/motan http://api.weibo.com/schema/motan.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">motan:registry</span> <span class=\"attr\">regProtocol</span>=<span class=\"string\">\"consul\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"registry\"</span> <span class=\"attr\">address</span>=<span class=\"string\">\"127.0.0.1:8500\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"helloServiceImpl\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.raventech.user.motan.HelloServiceImpl\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">motan:service</span> <span class=\"attr\">interface</span>=<span class=\"string\">\"com.raventech.user.motan.HelloService\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"helloServiceImpl\"</span> <span class=\"attr\">registry</span>=<span class=\"string\">\"registry\"</span>  <span class=\"attr\">export</span>=<span class=\"string\">\"8002\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动服务的方法要在程序启动后调用心跳开关，将服务注册到consul，不然Client无法调用 （别的和上文Hello World一样不变，运行main方法启动服务）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.raventech.user;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.weibo.api.motan.common.MotanConstants;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.weibo.api.motan.util.MotanSwitcherUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuhaiming on 10/11/2016.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Server</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"classpath:motan-server.xml\"</span>);</span><br><span class=\"line\">    MotanSwitcherUtil.setSwitcherValue(MotanConstants.REGISTRY_HEARTBEAT_SWITCHER, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Server start ...\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Client-端-1\"><a href=\"#Client-端-1\" class=\"headerlink\" title=\"Client 端\"></a>Client 端</h3><ul>\n<li><p>xml配置文件添加consul的服务发现</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:motan</span>=<span class=\"string\">\"http://api.weibo.com/schema/motan\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        http://api.weibo.com/schema/motan http://api.weibo.com/schema/motan.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">motan:registry</span> <span class=\"attr\">regProtocol</span>=<span class=\"string\">\"consul\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"registry\"</span> <span class=\"attr\">address</span>=<span class=\"string\">\"127.0.0.1:8500\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">motan:referer</span> <span class=\"attr\">id</span>=<span class=\"string\">\"helloService\"</span> <span class=\"attr\">interface</span>=<span class=\"string\">\"com.raventech.user.motan.HelloService\"</span> <span class=\"attr\">registry</span>=<span class=\"string\">\"registry\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>别的和上文Hello World一样不变，运行Client类的main方法调用服务</p>\n</li>\n</ul>\n<h2 id=\"使用注解的方式集成到Spring-Boot项目中\"><a href=\"#使用注解的方式集成到Spring-Boot项目中\" class=\"headerlink\" title=\"使用注解的方式集成到Spring Boot项目中\"></a>使用注解的方式集成到Spring Boot项目中</h2><ul>\n<li>项目改成Spring Boot后抛弃了繁琐的xml文件配置改为用注解的方式。motan也支持注解的方式进行配置，这样更加方便了代码的集成和风格的统一。</li>\n<li>继续在前面的代码中进行修改，没提到的保持不变</li>\n</ul>\n<h3 id=\"Server-端-2\"><a href=\"#Server-端-2\" class=\"headerlink\" title=\"Server 端\"></a>Server 端</h3><ul>\n<li>删除motan-server.xml配置文件</li>\n<li><p>用注解加载motan需要的配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.raventech.user.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.weibo.api.motan.config.springsupport.AnnotationBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.weibo.api.motan.config.springsupport.BasicServiceConfigBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.weibo.api.motan.config.springsupport.ProtocolConfigBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.weibo.api.motan.config.springsupport.RegistryConfigBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuhaiming on 10/11/2016.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MotanConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Bean</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> AnnotationBean <span class=\"title\">motanAnnotationBean</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    AnnotationBean motanAnnotationBean = <span class=\"keyword\">new</span> AnnotationBean();</span><br><span class=\"line\">    motanAnnotationBean.setPackage(<span class=\"string\">\"com.raventech.user.motan\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> motanAnnotationBean;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"motan\"</span>)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> ProtocolConfigBean <span class=\"title\">protocolConfig1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ProtocolConfigBean config = <span class=\"keyword\">new</span> ProtocolConfigBean();</span><br><span class=\"line\">    config.setDefault(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    config.setName(<span class=\"string\">\"motan\"</span>);</span><br><span class=\"line\">    config.setMaxContentLength(<span class=\"number\">1048576</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"registry\"</span>)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> RegistryConfigBean <span class=\"title\">registryConfig</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    RegistryConfigBean config = <span class=\"keyword\">new</span> RegistryConfigBean();</span><br><span class=\"line\">    config.setRegProtocol(<span class=\"string\">\"consul\"</span>);</span><br><span class=\"line\">    config.setAddress(<span class=\"string\">\"127.0.0.1:8500\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Bean</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> BasicServiceConfigBean <span class=\"title\">baseServiceConfig</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    BasicServiceConfigBean config = <span class=\"keyword\">new</span> BasicServiceConfigBean();</span><br><span class=\"line\">    config.setExport(<span class=\"string\">\"motan:8002\"</span>);</span><br><span class=\"line\">    config.setRegistry(<span class=\"string\">\"registry\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>暴露接口的实现类加上@MotanService注解，自动生成bean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.raventech.user.motan;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.weibo.api.motan.config.springsupport.annotation.MotanService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuhaiming on 10/11/2016.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@MotanService</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">HelloService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">(String world)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"hello \"</span> + world;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动服务的方法就是启动Spring Boot项目，并在在程序启动后调用心跳开关 (运行main方法启动服务)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.raventech.user;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.weibo.api.motan.common.MotanConstants;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.weibo.api.motan.util.MotanSwitcherUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuhaiming on 10/11/2016.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Server</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    SpringApplication.run(Server.class, args);</span><br><span class=\"line\">    MotanSwitcherUtil.setSwitcherValue(MotanConstants.REGISTRY_HEARTBEAT_SWITCHER, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Server start ...\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Client-端-2\"><a href=\"#Client-端-2\" class=\"headerlink\" title=\"Client 端\"></a>Client 端</h3><ul>\n<li>删除motan-client.xml配置文件和Client.java启动文件，已经没用了</li>\n<li><p>用注解加载motan需要的配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.raventech.web.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.weibo.api.motan.config.springsupport.AnnotationBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.weibo.api.motan.config.springsupport.BasicRefererConfigBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.weibo.api.motan.config.springsupport.ProtocolConfigBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.weibo.api.motan.config.springsupport.RegistryConfigBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuhaiming on 10/11/2016.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MotanConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Bean</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> AnnotationBean <span class=\"title\">motanAnnotationBean</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    AnnotationBean motanAnnotationBean = <span class=\"keyword\">new</span> AnnotationBean();</span><br><span class=\"line\">    # 添加用到motan注解的类的包名</span><br><span class=\"line\">    motanAnnotationBean.setPackage(<span class=\"string\">\"com.raventech.web.controller\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> motanAnnotationBean;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"motan\"</span>)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> ProtocolConfigBean <span class=\"title\">protocolConfig1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ProtocolConfigBean config = <span class=\"keyword\">new</span> ProtocolConfigBean();</span><br><span class=\"line\">    config.setDefault(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    config.setName(<span class=\"string\">\"motan\"</span>);</span><br><span class=\"line\">    config.setMaxContentLength(<span class=\"number\">1048576</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"registry\"</span>)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> RegistryConfigBean <span class=\"title\">registryConfig</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    RegistryConfigBean config = <span class=\"keyword\">new</span> RegistryConfigBean();</span><br><span class=\"line\">    config.setRegProtocol(<span class=\"string\">\"consul\"</span>);</span><br><span class=\"line\">    config.setAddress(<span class=\"string\">\"127.0.0.1:8500\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"basicRefererConfig\"</span>)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> BasicRefererConfigBean <span class=\"title\">basicRefererConfigBean</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    BasicRefererConfigBean config = <span class=\"keyword\">new</span> BasicRefererConfigBean();</span><br><span class=\"line\">    config.setProtocol(<span class=\"string\">\"motan\"</span>);</span><br><span class=\"line\">    config.setRegistry(<span class=\"string\">\"registry\"</span>);</span><br><span class=\"line\">    config.setThrowException(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>调用方法（在Controller中使用）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.raventech.web.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.raventech.user.motan.HelloService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.raventech.web.common.BaseController;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.weibo.api.motan.config.springsupport.annotation.MotanReferer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuhaiming on 10/11/2016.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/motan\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@MotanReferer</span>(basicReferer = <span class=\"string\">\"basicRefererConfig\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">private</span> HelloService helloService;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/hello\"</span>, method = RequestMethod.GET)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> helloService.hello(<span class=\"string\">\"world\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动Spring Boot项目，在浏览器中访问<a href=\"http://127.0.0.1:8080/motan/hello就可以获取验证结果\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8080/motan/hello就可以获取验证结果</a></p>\n</li>\n</ul>\n<p><br></p>"},{"title":"Configuration 注解中使用 Autowired 注解 IDE 报错","date":"2016-10-25T16:00:00.000Z","_content":"\n在 Spring Boot 项目中会用 @Configuration 注解来初始化配置, 这时可以通过 @autowired 自动注入封装好的model对象, 方便使用yml中的配置的数据。\t \n这样做代码运行没问题，通过该对象也可以成功的获取yml配置文件中的数据，但是 IDE 却给出 “Could not autowird. No beans of'RedisConfig' type found.” 的错误提示。\t\n\n![](http://7xia33.com1.z0.glb.clouddn.com/2016-10-26%20at%2016.18.png)  \n\n<!-- more -->\n\n我们手动的在 @Configuration 注解下面添加 @ComponentScan 注解并指定所需model类的包地址就可以解决整个问题了。\t  \n原因估计是因为在项目的启动的最初阶段，IDE 还没有扫描到model类，无法发现对应的 bean，于是就需要我们手动的给其指定需要扫描的包了。\t  \n\n![](http://7xia33.com1.z0.glb.clouddn.com/2016-10-26%20at%2016.19.png)\n\n<br>","source":"_posts/SpringBoot/spring-boot-no-beans.md","raw":"title: Configuration 注解中使用 Autowired 注解 IDE 报错\ndate: 2016-10-26  \ntags:\n    - original\ncategories:\n    - Spring Boot  \n---\n\n在 Spring Boot 项目中会用 @Configuration 注解来初始化配置, 这时可以通过 @autowired 自动注入封装好的model对象, 方便使用yml中的配置的数据。\t \n这样做代码运行没问题，通过该对象也可以成功的获取yml配置文件中的数据，但是 IDE 却给出 “Could not autowird. No beans of'RedisConfig' type found.” 的错误提示。\t\n\n![](http://7xia33.com1.z0.glb.clouddn.com/2016-10-26%20at%2016.18.png)  \n\n<!-- more -->\n\n我们手动的在 @Configuration 注解下面添加 @ComponentScan 注解并指定所需model类的包地址就可以解决整个问题了。\t  \n原因估计是因为在项目的启动的最初阶段，IDE 还没有扫描到model类，无法发现对应的 bean，于是就需要我们手动的给其指定需要扫描的包了。\t  \n\n![](http://7xia33.com1.z0.glb.clouddn.com/2016-10-26%20at%2016.19.png)\n\n<br>","slug":"SpringBoot/spring-boot-no-beans","published":1,"updated":"2018-04-05T11:32:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfoy713p002qacie322u82da","content":"<p>在 Spring Boot 项目中会用 @Configuration 注解来初始化配置, 这时可以通过 @autowired 自动注入封装好的model对象, 方便使用yml中的配置的数据。<br>这样做代码运行没问题，通过该对象也可以成功的获取yml配置文件中的数据，但是 IDE 却给出 “Could not autowird. No beans of’RedisConfig’ type found.” 的错误提示。    </p>\n<p><img src=\"http://7xia33.com1.z0.glb.clouddn.com/2016-10-26%20at%2016.18.png\" alt=\"\">  </p>\n<a id=\"more\"></a>\n<p>我们手动的在 @Configuration 注解下面添加 @ComponentScan 注解并指定所需model类的包地址就可以解决整个问题了。<br>原因估计是因为在项目的启动的最初阶段，IDE 还没有扫描到model类，无法发现对应的 bean，于是就需要我们手动的给其指定需要扫描的包了。      </p>\n<p><img src=\"http://7xia33.com1.z0.glb.clouddn.com/2016-10-26%20at%2016.19.png\" alt=\"\"></p>\n<p><br></p>\n","site":{"data":{}},"excerpt":"<p>在 Spring Boot 项目中会用 @Configuration 注解来初始化配置, 这时可以通过 @autowired 自动注入封装好的model对象, 方便使用yml中的配置的数据。<br>这样做代码运行没问题，通过该对象也可以成功的获取yml配置文件中的数据，但是 IDE 却给出 “Could not autowird. No beans of’RedisConfig’ type found.” 的错误提示。    </p>\n<p><img src=\"http://7xia33.com1.z0.glb.clouddn.com/2016-10-26%20at%2016.18.png\" alt=\"\">  </p>","more":"<p>我们手动的在 @Configuration 注解下面添加 @ComponentScan 注解并指定所需model类的包地址就可以解决整个问题了。<br>原因估计是因为在项目的启动的最初阶段，IDE 还没有扫描到model类，无法发现对应的 bean，于是就需要我们手动的给其指定需要扫描的包了。      </p>\n<p><img src=\"http://7xia33.com1.z0.glb.clouddn.com/2016-10-26%20at%2016.19.png\" alt=\"\"></p>\n<p><br></p>"},{"title":"Spring Boot 项目中只能有一个main方法","date":"2016-10-23T16:00:00.000Z","_content":"\n对Spring Boot 项目用maven进行打包的时候报错以下错误  \n\n[ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:1.4.1.RELEASE:repackage (default) on project nlp-user: Execution default of goal org.springframework.boot:spring-boot-maven-plugin:1.4.1.RELEASE:repackage failed: Unable to find a single main class from the following candidates [com.raventech.user.Application, com.raventech.user.util.Utils] -> [Help 1]  \n\n<!-- more -->\n\n原来是因为 Spring Boot 项目中只能有一个main方法，不然 spring-boot-maven-plugin 在打包的过程中会扫描到了多个 main 方法，然后就懵逼不知道用哪个作为启动方法了。  \n\n以前总喜欢在 Utils 中写个main方法来调试静态方法，看来以后用完就得随手把它给删除了。\n\n<br>","source":"_posts/SpringBoot/spring-boot-single-main.md","raw":"title: Spring Boot 项目中只能有一个main方法\ndate: 2016-10-24  \ntags:\n    - original\ncategories:\n    - Spring Boot  \n---\n\n对Spring Boot 项目用maven进行打包的时候报错以下错误  \n\n[ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:1.4.1.RELEASE:repackage (default) on project nlp-user: Execution default of goal org.springframework.boot:spring-boot-maven-plugin:1.4.1.RELEASE:repackage failed: Unable to find a single main class from the following candidates [com.raventech.user.Application, com.raventech.user.util.Utils] -> [Help 1]  \n\n<!-- more -->\n\n原来是因为 Spring Boot 项目中只能有一个main方法，不然 spring-boot-maven-plugin 在打包的过程中会扫描到了多个 main 方法，然后就懵逼不知道用哪个作为启动方法了。  \n\n以前总喜欢在 Utils 中写个main方法来调试静态方法，看来以后用完就得随手把它给删除了。\n\n<br>","slug":"SpringBoot/spring-boot-single-main","published":1,"updated":"2018-04-05T11:32:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfoy713r002taciepmp5u0od","content":"<p>对Spring Boot 项目用maven进行打包的时候报错以下错误  </p>\n<p>[ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:1.4.1.RELEASE:repackage (default) on project nlp-user: Execution default of goal org.springframework.boot:spring-boot-maven-plugin:1.4.1.RELEASE:repackage failed: Unable to find a single main class from the following candidates [com.raventech.user.Application, com.raventech.user.util.Utils] -&gt; [Help 1]  </p>\n<a id=\"more\"></a>\n<p>原来是因为 Spring Boot 项目中只能有一个main方法，不然 spring-boot-maven-plugin 在打包的过程中会扫描到了多个 main 方法，然后就懵逼不知道用哪个作为启动方法了。  </p>\n<p>以前总喜欢在 Utils 中写个main方法来调试静态方法，看来以后用完就得随手把它给删除了。</p>\n<p><br></p>\n","site":{"data":{}},"excerpt":"<p>对Spring Boot 项目用maven进行打包的时候报错以下错误  </p>\n<p>[ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:1.4.1.RELEASE:repackage (default) on project nlp-user: Execution default of goal org.springframework.boot:spring-boot-maven-plugin:1.4.1.RELEASE:repackage failed: Unable to find a single main class from the following candidates [com.raventech.user.Application, com.raventech.user.util.Utils] -&gt; [Help 1]  </p>","more":"<p>原来是因为 Spring Boot 项目中只能有一个main方法，不然 spring-boot-maven-plugin 在打包的过程中会扫描到了多个 main 方法，然后就懵逼不知道用哪个作为启动方法了。  </p>\n<p>以前总喜欢在 Utils 中写个main方法来调试静态方法，看来以后用完就得随手把它给删除了。</p>\n<p><br></p>"},{"title":"yml 文件中使用环境变量","date":"2016-10-24T16:00:00.000Z","_content":"\nSpring Boot 中可以用 spring.profiles.active 参数来指定系统环境，让系统加载不同的配置文件。  \n可以在程序启动的时候加上参数来指定需要的配置  \n\n```\njava -Dspring.profiles.active=\"dev\" -jar user.jar\n```\n\n<!-- more -->\n\n当然我们也可以事先设置好系统的环境变量\n\n```\nexpoer SERVER_EVN=test\n```\n\n然后在 yml 文件中用 active: ${SERVER_EVN} 来动态的获取系统已设置好的数据。这样这台 test 服务器中的再启动 Spring Boot 项目的时候就可以不用每次都去设置参数了。  \n\n同时 yml 也支持 ${SERVER_EVN:dev} 这样的方式来设置默认值，此时如果环境变量中没有 SERVER_EVN ， active就会默认设置为\"dev\"。  \n\n<br>","source":"_posts/SpringBoot/yml-evn.md","raw":"title: yml 文件中使用环境变量\ndate: 2016-10-25  \ntags:\n    - original\ncategories:\n    - Spring Boot  \n---\n\nSpring Boot 中可以用 spring.profiles.active 参数来指定系统环境，让系统加载不同的配置文件。  \n可以在程序启动的时候加上参数来指定需要的配置  \n\n```\njava -Dspring.profiles.active=\"dev\" -jar user.jar\n```\n\n<!-- more -->\n\n当然我们也可以事先设置好系统的环境变量\n\n```\nexpoer SERVER_EVN=test\n```\n\n然后在 yml 文件中用 active: ${SERVER_EVN} 来动态的获取系统已设置好的数据。这样这台 test 服务器中的再启动 Spring Boot 项目的时候就可以不用每次都去设置参数了。  \n\n同时 yml 也支持 ${SERVER_EVN:dev} 这样的方式来设置默认值，此时如果环境变量中没有 SERVER_EVN ， active就会默认设置为\"dev\"。  \n\n<br>","slug":"SpringBoot/yml-evn","published":1,"updated":"2018-04-05T11:32:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfoy713t002xaciehqlp0mli","content":"<p>Spring Boot 中可以用 spring.profiles.active 参数来指定系统环境，让系统加载不同的配置文件。<br>可以在程序启动的时候加上参数来指定需要的配置  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -Dspring.profiles.active=&quot;dev&quot; -jar user.jar</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>当然我们也可以事先设置好系统的环境变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expoer SERVER_EVN=test</span><br></pre></td></tr></table></figure>\n<p>然后在 yml 文件中用 active: ${SERVER_EVN} 来动态的获取系统已设置好的数据。这样这台 test 服务器中的再启动 Spring Boot 项目的时候就可以不用每次都去设置参数了。  </p>\n<p>同时 yml 也支持 ${SERVER_EVN:dev} 这样的方式来设置默认值，此时如果环境变量中没有 SERVER_EVN ， active就会默认设置为”dev”。  </p>\n<p><br></p>\n","site":{"data":{}},"excerpt":"<p>Spring Boot 中可以用 spring.profiles.active 参数来指定系统环境，让系统加载不同的配置文件。<br>可以在程序启动的时候加上参数来指定需要的配置  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -Dspring.profiles.active=&quot;dev&quot; -jar user.jar</span><br></pre></td></tr></table></figure>","more":"<p>当然我们也可以事先设置好系统的环境变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expoer SERVER_EVN=test</span><br></pre></td></tr></table></figure>\n<p>然后在 yml 文件中用 active: ${SERVER_EVN} 来动态的获取系统已设置好的数据。这样这台 test 服务器中的再启动 Spring Boot 项目的时候就可以不用每次都去设置参数了。  </p>\n<p>同时 yml 也支持 ${SERVER_EVN:dev} 这样的方式来设置默认值，此时如果环境变量中没有 SERVER_EVN ， active就会默认设置为”dev”。  </p>\n<p><br></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjfoy711y0003acienicocm9a","category_id":"cjfoy71250005acien4g14lzk","_id":"cjfoy712h000facieih5ty5ts"},{"post_id":"cjfoy71220004aciet6nmh7wd","category_id":"cjfoy712a000aaciek1pvdeh0","_id":"cjfoy712m000macieb2tqwj8t"},{"post_id":"cjfoy71270007acie9eq0okte","category_id":"cjfoy712a000aaciek1pvdeh0","_id":"cjfoy712p000tacie59chnl24"},{"post_id":"cjfoy71280008aciemq579pq5","category_id":"cjfoy712a000aaciek1pvdeh0","_id":"cjfoy712s000yacie6zbirp4o"},{"post_id":"cjfoy71290009acie9e9i0241","category_id":"cjfoy712p000saciervtjw9c9","_id":"cjfoy712v0014acie55btwyln"},{"post_id":"cjfoy712t0011aciehqvz4yvi","category_id":"cjfoy712s0010acieblzaxwz9","_id":"cjfoy712z001baciepeysu5ot"},{"post_id":"cjfoy712c000daciegtmo3cxy","category_id":"cjfoy712s0010acieblzaxwz9","_id":"cjfoy7130001faciet78pkl6u"},{"post_id":"cjfoy712u0013aciekavwllsx","category_id":"cjfoy712s0010acieblzaxwz9","_id":"cjfoy7132001jaciebgk7vhkv"},{"post_id":"cjfoy712w0018acieqj7qndxl","category_id":"cjfoy712s0010acieblzaxwz9","_id":"cjfoy7134001nacieyx3n27yo"},{"post_id":"cjfoy712y001aaciewz0yq1eb","category_id":"cjfoy712s0010acieblzaxwz9","_id":"cjfoy7137001raciexa3q7rsi"},{"post_id":"cjfoy712g000eacieeau1dlo1","category_id":"cjfoy712v0017acieody7quql","_id":"cjfoy7139001vacie7zio5nsq"},{"post_id":"cjfoy712j000jacie81uihgfm","category_id":"cjfoy712v0017acieody7quql","_id":"cjfoy713b001zacietbsj2ach"},{"post_id":"cjfoy712k000kacie2wxmhtt6","category_id":"cjfoy712v0017acieody7quql","_id":"cjfoy713d0024aciepolrvuuy"},{"post_id":"cjfoy712m000pacieb5vmhwc0","category_id":"cjfoy712s0010acieblzaxwz9","_id":"cjfoy713i002baciemzxcgsva"},{"post_id":"cjfoy712o000racientznuudo","category_id":"cjfoy712s0010acieblzaxwz9","_id":"cjfoy713m002iacie1ywgah8z"},{"post_id":"cjfoy712q000vaciex5mi1qim","category_id":"cjfoy712s0010acieblzaxwz9","_id":"cjfoy713p002oacie2d79m13c"},{"post_id":"cjfoy712r000xaciel0ipdgli","category_id":"cjfoy712s0010acieblzaxwz9","_id":"cjfoy713s002uacie198z7qx9"},{"post_id":"cjfoy7130001eaciejdzxejyu","category_id":"cjfoy713o002naciew4mkxw2d","_id":"cjfoy713w0030aciell7jkpp4"},{"post_id":"cjfoy7132001iacierw7yzj9d","category_id":"cjfoy713o002naciew4mkxw2d","_id":"cjfoy713w0034aciegisw4qop"},{"post_id":"cjfoy7134001macie6ywge7vt","category_id":"cjfoy713o002naciew4mkxw2d","_id":"cjfoy713x0037acierw11y3eu"},{"post_id":"cjfoy7136001qacieq9lqjdhe","category_id":"cjfoy713w0033acietug9vw3e","_id":"cjfoy713y003caciem9diqfty"},{"post_id":"cjfoy7138001uacie2e5ag3b9","category_id":"cjfoy713w0033acietug9vw3e","_id":"cjfoy713y003faciemjsz5bvu"},{"post_id":"cjfoy713a001yaciepmknbdtc","category_id":"cjfoy713y003bacieledrjr57","_id":"cjfoy713z003kacieqmdmk0ow"},{"post_id":"cjfoy713c0022acie7vrujv02","category_id":"cjfoy713z003haciebq8vuex6","_id":"cjfoy7140003oacieobsj3ila"},{"post_id":"cjfoy713f0026aciel13udpx3","category_id":"cjfoy713z003lacie2kyzg1pz","_id":"cjfoy7141003saciemhtwzdtk"},{"post_id":"cjfoy713h0029acie5k5t7qir","category_id":"cjfoy713z003lacie2kyzg1pz","_id":"cjfoy7142003uacield8rkcxc"},{"post_id":"cjfoy713j002dacie2lbecs6j","category_id":"cjfoy713z003lacie2kyzg1pz","_id":"cjfoy7142003wacie9ewgeckh"},{"post_id":"cjfoy713l002gaciernb8ycaf","category_id":"cjfoy713z003lacie2kyzg1pz","_id":"cjfoy7143003xacieff9nx0k6"},{"post_id":"cjfoy713m002kaciem0t5uib9","category_id":"cjfoy7142003vaciee1lrnfxm","_id":"cjfoy7144003zacieej8rmr4o"},{"post_id":"cjfoy713o002maciejad55gn9","category_id":"cjfoy7143003yacie94j3llyl","_id":"cjfoy71460042acieuaip7gy7"},{"post_id":"cjfoy713p002qacie322u82da","category_id":"cjfoy7142003vaciee1lrnfxm","_id":"cjfoy71470044acied6sdqh66"},{"post_id":"cjfoy713r002taciepmp5u0od","category_id":"cjfoy7142003vaciee1lrnfxm","_id":"cjfoy71480045acieymw64oeg"},{"post_id":"cjfoy713t002xaciehqlp0mli","category_id":"cjfoy7142003vaciee1lrnfxm","_id":"cjfoy71490046acienie0ynqg"}],"PostTag":[{"post_id":"cjfoy711y0003acienicocm9a","tag_id":"cjfoy71260006aciecl57oakp","_id":"cjfoy712c000cacietsm40iaz"},{"post_id":"cjfoy71220004aciet6nmh7wd","tag_id":"cjfoy71260006aciecl57oakp","_id":"cjfoy712j000iacie2615stpp"},{"post_id":"cjfoy712j000jacie81uihgfm","tag_id":"cjfoy71260006aciecl57oakp","_id":"cjfoy712m000oacie6ma77yey"},{"post_id":"cjfoy71270007acie9eq0okte","tag_id":"cjfoy712h000gacieagvw8jdi","_id":"cjfoy712o000qacie8d5ab4ef"},{"post_id":"cjfoy71280008aciemq579pq5","tag_id":"cjfoy712h000gacieagvw8jdi","_id":"cjfoy712r000waciem6z3czrv"},{"post_id":"cjfoy71290009acie9e9i0241","tag_id":"cjfoy712h000gacieagvw8jdi","_id":"cjfoy712t0012acien3i7poxr"},{"post_id":"cjfoy712t0011aciehqvz4yvi","tag_id":"cjfoy712s000zaciezq0y1i3e","_id":"cjfoy712v0016acieks1qsk4g"},{"post_id":"cjfoy712t0011aciehqvz4yvi","tag_id":"cjfoy71260006aciecl57oakp","_id":"cjfoy712y0019acieoixuzbjv"},{"post_id":"cjfoy712c000daciegtmo3cxy","tag_id":"cjfoy712s000zaciezq0y1i3e","_id":"cjfoy712z001dacie38dyyjrg"},{"post_id":"cjfoy712c000daciegtmo3cxy","tag_id":"cjfoy71260006aciecl57oakp","_id":"cjfoy7131001hacievle85li8"},{"post_id":"cjfoy712u0013aciekavwllsx","tag_id":"cjfoy712h000gacieagvw8jdi","_id":"cjfoy7133001kacie4thbtikh"},{"post_id":"cjfoy712w0018acieqj7qndxl","tag_id":"cjfoy712s000zaciezq0y1i3e","_id":"cjfoy7135001pacieq207dztt"},{"post_id":"cjfoy712w0018acieqj7qndxl","tag_id":"cjfoy71260006aciecl57oakp","_id":"cjfoy7138001sacien6d9wiy1"},{"post_id":"cjfoy712g000eacieeau1dlo1","tag_id":"cjfoy712h000gacieagvw8jdi","_id":"cjfoy713a001xacie17wjbah2"},{"post_id":"cjfoy712y001aaciewz0yq1eb","tag_id":"cjfoy71260006aciecl57oakp","_id":"cjfoy713c0020acieexe4n3p1"},{"post_id":"cjfoy712k000kacie2wxmhtt6","tag_id":"cjfoy71260006aciecl57oakp","_id":"cjfoy713f0025aciegf8war7r"},{"post_id":"cjfoy712k000kacie2wxmhtt6","tag_id":"cjfoy712z001caciedi0tk4fd","_id":"cjfoy713g0027aciek4ynwpyh"},{"post_id":"cjfoy7132001iacierw7yzj9d","tag_id":"cjfoy712h000gacieagvw8jdi","_id":"cjfoy713j002cacietgvxszz9"},{"post_id":"cjfoy7134001macie6ywge7vt","tag_id":"cjfoy712h000gacieagvw8jdi","_id":"cjfoy713k002eaciecpf2w249"},{"post_id":"cjfoy712m000pacieb5vmhwc0","tag_id":"cjfoy712s000zaciezq0y1i3e","_id":"cjfoy713m002jaciemryh7vfo"},{"post_id":"cjfoy712m000pacieb5vmhwc0","tag_id":"cjfoy71260006aciecl57oakp","_id":"cjfoy713n002lacie2r9sij7t"},{"post_id":"cjfoy7136001qacieq9lqjdhe","tag_id":"cjfoy712h000gacieagvw8jdi","_id":"cjfoy713p002pacief9f50bnk"},{"post_id":"cjfoy7138001uacie2e5ag3b9","tag_id":"cjfoy712h000gacieagvw8jdi","_id":"cjfoy713r002sacieoywrlvq6"},{"post_id":"cjfoy712o000racientznuudo","tag_id":"cjfoy712s000zaciezq0y1i3e","_id":"cjfoy713t002waciepvvqcsvm"},{"post_id":"cjfoy712o000racientznuudo","tag_id":"cjfoy71260006aciecl57oakp","_id":"cjfoy713v002yacie0earb7kw"},{"post_id":"cjfoy713a001yaciepmknbdtc","tag_id":"cjfoy71260006aciecl57oakp","_id":"cjfoy713w0031acieeq67g105"},{"post_id":"cjfoy713c0022acie7vrujv02","tag_id":"cjfoy712h000gacieagvw8jdi","_id":"cjfoy713w0032acie81bt9b34"},{"post_id":"cjfoy712q000vaciex5mi1qim","tag_id":"cjfoy712s000zaciezq0y1i3e","_id":"cjfoy713w0035aciexx9vx38z"},{"post_id":"cjfoy712q000vaciex5mi1qim","tag_id":"cjfoy71260006aciecl57oakp","_id":"cjfoy713x0036acie65tmsbu6"},{"post_id":"cjfoy712r000xaciel0ipdgli","tag_id":"cjfoy712s000zaciezq0y1i3e","_id":"cjfoy713x0039acierjo37l6d"},{"post_id":"cjfoy712r000xaciel0ipdgli","tag_id":"cjfoy71260006aciecl57oakp","_id":"cjfoy713x003aacieggwplyxg"},{"post_id":"cjfoy713m002kaciem0t5uib9","tag_id":"cjfoy712h000gacieagvw8jdi","_id":"cjfoy713y003dacie4t4gt9c9"},{"post_id":"cjfoy7130001eaciejdzxejyu","tag_id":"cjfoy713k002faciesic9kxrz","_id":"cjfoy713y003eaciey4q7i27b"},{"post_id":"cjfoy7130001eaciejdzxejyu","tag_id":"cjfoy712h000gacieagvw8jdi","_id":"cjfoy713y003gacienfxttdg1"},{"post_id":"cjfoy713p002qacie322u82da","tag_id":"cjfoy712h000gacieagvw8jdi","_id":"cjfoy713z003iacieb44ak8cq"},{"post_id":"cjfoy713r002taciepmp5u0od","tag_id":"cjfoy712h000gacieagvw8jdi","_id":"cjfoy713z003jacie5fcg8ebf"},{"post_id":"cjfoy713t002xaciehqlp0mli","tag_id":"cjfoy712h000gacieagvw8jdi","_id":"cjfoy713z003macie5vjm6p6l"},{"post_id":"cjfoy713o002maciejad55gn9","tag_id":"cjfoy712h000gacieagvw8jdi","_id":"cjfoy7140003naciemav9lfmo"},{"post_id":"cjfoy713o002maciejad55gn9","tag_id":"cjfoy713r002raciej4vzixz7","_id":"cjfoy7140003qaciefgza3r7b"}],"Tag":[{"name":"note","_id":"cjfoy71260006aciecl57oakp"},{"name":"original","_id":"cjfoy712h000gacieagvw8jdi"},{"name":"es6","_id":"cjfoy712s000zaciezq0y1i3e"},{"name":"jvm","_id":"cjfoy712z001caciedi0tk4fd"},{"name":"软件","_id":"cjfoy713k002faciesic9kxrz"},{"name":"motan","_id":"cjfoy713r002raciej4vzixz7"}]}}